/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { PoolClient } from 'pg';

export async function run(client: PoolClient): Promise<void> {
  await client.query(`CREATE TABLE IF NOT EXISTS "Account" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT,
    "owner" TEXT,
    "patient" TEXT[],
    "period" TIMESTAMPTZ,
    "status" TEXT,
    "subject" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_lastUpdated_idx ON "Account" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_compartments_idx ON "Account" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_projectId_idx ON "Account" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account__source_idx ON "Account" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account__tag_idx ON "Account" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Account__profile_idx ON "Account" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account__security_idx ON "Account" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_name_idx ON "Account" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_owner_idx ON "Account" ("owner")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_patient_idx ON "Account" USING gin ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_period_idx ON "Account" ("period")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_status_idx ON "Account" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_subject_idx ON "Account" USING gin ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Account_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_History_id_idx ON "Account_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_History_lastUpdated_idx ON "Account_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Account_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_Token_resourceId_idx ON "Account_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_Token_code_idx ON "Account_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_Token_system_idx ON "Account_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Account_Token_value_idx ON "Account_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Account_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Account_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ActivityDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_lastUpdated_idx ON "ActivityDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_compartments_idx ON "ActivityDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_projectId_idx ON "ActivityDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition__source_idx ON "ActivityDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition__tag_idx ON "ActivityDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition__profile_idx ON "ActivityDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition__security_idx ON "ActivityDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_composedOf_idx ON "ActivityDefinition" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_context_idx ON "ActivityDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_contextQuantity_idx ON "ActivityDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_date_idx ON "ActivityDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_dependsOn_idx ON "ActivityDefinition" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_derivedFrom_idx ON "ActivityDefinition" USING gin ("derivedFrom")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_description_idx ON "ActivityDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_effective_idx ON "ActivityDefinition" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_name_idx ON "ActivityDefinition" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_predecessor_idx ON "ActivityDefinition" USING gin ("predecessor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_publisher_idx ON "ActivityDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_status_idx ON "ActivityDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_successor_idx ON "ActivityDefinition" USING gin ("successor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_title_idx ON "ActivityDefinition" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_url_idx ON "ActivityDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_version_idx ON "ActivityDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_contextTypeQuantity_idx ON "ActivityDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_contextTypeValue_idx ON "ActivityDefinition" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ActivityDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_History_id_idx ON "ActivityDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_History_lastUpdated_idx ON "ActivityDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ActivityDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_Token_resourceId_idx ON "ActivityDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_Token_code_idx ON "ActivityDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_Token_system_idx ON "ActivityDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ActivityDefinition_Token_value_idx ON "ActivityDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ActivityDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ActivityDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AdverseEvent" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "actuality" TEXT,
    "date" TIMESTAMPTZ,
    "location" TEXT,
    "recorder" TEXT,
    "resultingcondition" TEXT[],
    "study" TEXT[],
    "subject" TEXT,
    "substance" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_lastUpdated_idx ON "AdverseEvent" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_compartments_idx ON "AdverseEvent" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_projectId_idx ON "AdverseEvent" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent__source_idx ON "AdverseEvent" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent__tag_idx ON "AdverseEvent" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent__profile_idx ON "AdverseEvent" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent__security_idx ON "AdverseEvent" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_actuality_idx ON "AdverseEvent" ("actuality")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_date_idx ON "AdverseEvent" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_location_idx ON "AdverseEvent" ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_recorder_idx ON "AdverseEvent" ("recorder")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_resultingcondition_idx ON "AdverseEvent" USING gin ("resultingcondition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_study_idx ON "AdverseEvent" USING gin ("study")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_subject_idx ON "AdverseEvent" ("subject")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_substance_idx ON "AdverseEvent" USING gin ("substance")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AdverseEvent_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_History_id_idx ON "AdverseEvent_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_History_lastUpdated_idx ON "AdverseEvent_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AdverseEvent_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_Token_resourceId_idx ON "AdverseEvent_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_Token_code_idx ON "AdverseEvent_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_Token_system_idx ON "AdverseEvent_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AdverseEvent_Token_value_idx ON "AdverseEvent_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AdverseEvent_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "AdverseEvent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AllergyIntolerance" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "asserter" TEXT,
    "category" TEXT[],
    "criticality" TEXT,
    "date" TIMESTAMPTZ,
    "lastDate" TIMESTAMPTZ,
    "onset" TIMESTAMPTZ[],
    "patient" TEXT,
    "recorder" TEXT,
    "severity" TEXT[],
    "type" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_lastUpdated_idx ON "AllergyIntolerance" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_compartments_idx ON "AllergyIntolerance" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_projectId_idx ON "AllergyIntolerance" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance__source_idx ON "AllergyIntolerance" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance__tag_idx ON "AllergyIntolerance" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance__profile_idx ON "AllergyIntolerance" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance__security_idx ON "AllergyIntolerance" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_asserter_idx ON "AllergyIntolerance" ("asserter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_category_idx ON "AllergyIntolerance" USING gin ("category")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_criticality_idx ON "AllergyIntolerance" ("criticality")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_date_idx ON "AllergyIntolerance" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_lastDate_idx ON "AllergyIntolerance" ("lastDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_onset_idx ON "AllergyIntolerance" USING gin ("onset")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_patient_idx ON "AllergyIntolerance" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_recorder_idx ON "AllergyIntolerance" ("recorder")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_severity_idx ON "AllergyIntolerance" USING gin ("severity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_type_idx ON "AllergyIntolerance" ("type")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AllergyIntolerance_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_History_id_idx ON "AllergyIntolerance_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_History_lastUpdated_idx ON "AllergyIntolerance_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AllergyIntolerance_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_Token_resourceId_idx ON "AllergyIntolerance_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_Token_code_idx ON "AllergyIntolerance_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_Token_system_idx ON "AllergyIntolerance_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AllergyIntolerance_Token_value_idx ON "AllergyIntolerance_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AllergyIntolerance_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "AllergyIntolerance_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Appointment" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "actor" TEXT[],
    "basedOn" TEXT[],
    "date" TIMESTAMPTZ,
    "location" TEXT[],
    "partStatus" TEXT[],
    "patient" TEXT[],
    "practitioner" TEXT[],
    "reasonReference" TEXT[],
    "slot" TEXT[],
    "status" TEXT,
    "supportingInfo" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_lastUpdated_idx ON "Appointment" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_compartments_idx ON "Appointment" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_projectId_idx ON "Appointment" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment__source_idx ON "Appointment" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment__tag_idx ON "Appointment" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment__profile_idx ON "Appointment" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment__security_idx ON "Appointment" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_actor_idx ON "Appointment" USING gin ("actor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_basedOn_idx ON "Appointment" USING gin ("basedOn")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_date_idx ON "Appointment" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_location_idx ON "Appointment" USING gin ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_partStatus_idx ON "Appointment" USING gin ("partStatus")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_patient_idx ON "Appointment" USING gin ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_practitioner_idx ON "Appointment" USING gin ("practitioner")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_reasonReference_idx ON "Appointment" USING gin ("reasonReference")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_slot_idx ON "Appointment" USING gin ("slot")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_status_idx ON "Appointment" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_supportingInfo_idx ON "Appointment" USING gin ("supportingInfo")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Appointment_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_History_id_idx ON "Appointment_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_History_lastUpdated_idx ON "Appointment_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Appointment_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_Token_resourceId_idx ON "Appointment_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_Token_code_idx ON "Appointment_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_Token_system_idx ON "Appointment_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Appointment_Token_value_idx ON "Appointment_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Appointment_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Appointment_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AppointmentResponse" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "actor" TEXT,
    "appointment" TEXT,
    "location" TEXT,
    "partStatus" TEXT,
    "patient" TEXT,
    "practitioner" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_lastUpdated_idx ON "AppointmentResponse" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_compartments_idx ON "AppointmentResponse" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_projectId_idx ON "AppointmentResponse" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse__source_idx ON "AppointmentResponse" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse__tag_idx ON "AppointmentResponse" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse__profile_idx ON "AppointmentResponse" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse__security_idx ON "AppointmentResponse" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_actor_idx ON "AppointmentResponse" ("actor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_appointment_idx ON "AppointmentResponse" ("appointment")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_location_idx ON "AppointmentResponse" ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_partStatus_idx ON "AppointmentResponse" ("partStatus")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_patient_idx ON "AppointmentResponse" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_practitioner_idx ON "AppointmentResponse" ("practitioner")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AppointmentResponse_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_History_id_idx ON "AppointmentResponse_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_History_lastUpdated_idx ON "AppointmentResponse_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AppointmentResponse_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_Token_resourceId_idx ON "AppointmentResponse_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_Token_code_idx ON "AppointmentResponse_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_Token_system_idx ON "AppointmentResponse_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AppointmentResponse_Token_value_idx ON "AppointmentResponse_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AppointmentResponse_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "AppointmentResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AuditEvent" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "action" TEXT,
    "address" TEXT[],
    "agent" TEXT[],
    "agentName" TEXT[],
    "altid" TEXT[],
    "date" TIMESTAMPTZ,
    "entity" TEXT[],
    "entityName" TEXT[],
    "outcome" TEXT,
    "patient" TEXT[],
    "policy" TEXT[],
    "site" TEXT,
    "source" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_lastUpdated_idx ON "AuditEvent" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_compartments_idx ON "AuditEvent" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_projectId_idx ON "AuditEvent" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent__source_idx ON "AuditEvent" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent__tag_idx ON "AuditEvent" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent__profile_idx ON "AuditEvent" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent__security_idx ON "AuditEvent" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_action_idx ON "AuditEvent" ("action")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_address_idx ON "AuditEvent" USING gin ("address")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_agent_idx ON "AuditEvent" USING gin ("agent")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_agentName_idx ON "AuditEvent" USING gin ("agentName")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_altid_idx ON "AuditEvent" USING gin ("altid")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_date_idx ON "AuditEvent" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_entity_idx ON "AuditEvent" USING gin ("entity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_entityName_idx ON "AuditEvent" USING gin ("entityName")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_outcome_idx ON "AuditEvent" ("outcome")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_patient_idx ON "AuditEvent" USING gin ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_policy_idx ON "AuditEvent" USING gin ("policy")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_site_idx ON "AuditEvent" ("site")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_source_idx ON "AuditEvent" ("source")');

  await client.query(`CREATE TABLE IF NOT EXISTS "AuditEvent_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_History_id_idx ON "AuditEvent_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_History_lastUpdated_idx ON "AuditEvent_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AuditEvent_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_Token_resourceId_idx ON "AuditEvent_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_Token_code_idx ON "AuditEvent_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_Token_system_idx ON "AuditEvent_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AuditEvent_Token_value_idx ON "AuditEvent_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AuditEvent_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "AuditEvent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Basic" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "author" TEXT,
    "created" DATE,
    "patient" TEXT,
    "subject" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_lastUpdated_idx ON "Basic" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_compartments_idx ON "Basic" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_projectId_idx ON "Basic" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic__source_idx ON "Basic" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic__tag_idx ON "Basic" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic__profile_idx ON "Basic" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic__security_idx ON "Basic" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_author_idx ON "Basic" ("author")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_created_idx ON "Basic" ("created")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_patient_idx ON "Basic" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_subject_idx ON "Basic" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Basic_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_History_id_idx ON "Basic_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_History_lastUpdated_idx ON "Basic_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Basic_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_Token_resourceId_idx ON "Basic_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_Token_code_idx ON "Basic_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_Token_system_idx ON "Basic_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Basic_Token_value_idx ON "Basic_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Basic_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Basic_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Binary" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_lastUpdated_idx ON "Binary" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_compartments_idx ON "Binary" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_projectId_idx ON "Binary" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary__source_idx ON "Binary" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary__tag_idx ON "Binary" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary__profile_idx ON "Binary" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary__security_idx ON "Binary" ("_security")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Binary_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_History_id_idx ON "Binary_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_History_lastUpdated_idx ON "Binary_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Binary_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_Token_resourceId_idx ON "Binary_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_Token_code_idx ON "Binary_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_Token_system_idx ON "Binary_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Binary_Token_value_idx ON "Binary_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Binary_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Binary_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "BiologicallyDerivedProduct" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_lastUpdated_idx ON "BiologicallyDerivedProduct" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_compartments_idx ON "BiologicallyDerivedProduct" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_projectId_idx ON "BiologicallyDerivedProduct" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct__source_idx ON "BiologicallyDerivedProduct" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct__tag_idx ON "BiologicallyDerivedProduct" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct__profile_idx ON "BiologicallyDerivedProduct" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct__security_idx ON "BiologicallyDerivedProduct" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BiologicallyDerivedProduct_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_History_id_idx ON "BiologicallyDerivedProduct_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_History_lastUpdated_idx ON "BiologicallyDerivedProduct_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BiologicallyDerivedProduct_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_Token_resourceId_idx ON "BiologicallyDerivedProduct_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_Token_code_idx ON "BiologicallyDerivedProduct_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_Token_system_idx ON "BiologicallyDerivedProduct_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BiologicallyDerivedProduct_Token_value_idx ON "BiologicallyDerivedProduct_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BiologicallyDerivedProduct_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "BiologicallyDerivedProduct_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BodyStructure" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_lastUpdated_idx ON "BodyStructure" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_compartments_idx ON "BodyStructure" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_projectId_idx ON "BodyStructure" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure__source_idx ON "BodyStructure" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure__tag_idx ON "BodyStructure" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure__profile_idx ON "BodyStructure" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure__security_idx ON "BodyStructure" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_patient_idx ON "BodyStructure" ("patient")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BodyStructure_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_History_id_idx ON "BodyStructure_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_History_lastUpdated_idx ON "BodyStructure_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BodyStructure_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_Token_resourceId_idx ON "BodyStructure_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_Token_code_idx ON "BodyStructure_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_Token_system_idx ON "BodyStructure_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BodyStructure_Token_value_idx ON "BodyStructure_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BodyStructure_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "BodyStructure_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Bundle" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composition" TEXT,
    "message" TEXT,
    "timestamp" TIMESTAMPTZ,
    "type" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_lastUpdated_idx ON "Bundle" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_compartments_idx ON "Bundle" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_projectId_idx ON "Bundle" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle__source_idx ON "Bundle" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle__tag_idx ON "Bundle" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle__profile_idx ON "Bundle" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle__security_idx ON "Bundle" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_composition_idx ON "Bundle" ("composition")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_message_idx ON "Bundle" ("message")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_timestamp_idx ON "Bundle" ("timestamp")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_type_idx ON "Bundle" ("type")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Bundle_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_History_id_idx ON "Bundle_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_History_lastUpdated_idx ON "Bundle_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Bundle_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_Token_resourceId_idx ON "Bundle_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_Token_code_idx ON "Bundle_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_Token_system_idx ON "Bundle_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bundle_Token_value_idx ON "Bundle_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Bundle_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Bundle_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CapabilityStatement" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "fhirversion" TEXT,
    "format" TEXT[],
    "guide" TEXT[],
    "mode" TEXT[],
    "name" TEXT,
    "publisher" TEXT,
    "resource" TEXT[],
    "resourceProfile" TEXT[],
    "software" TEXT,
    "status" TEXT,
    "supportedProfile" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_lastUpdated_idx ON "CapabilityStatement" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_compartments_idx ON "CapabilityStatement" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_projectId_idx ON "CapabilityStatement" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement__source_idx ON "CapabilityStatement" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement__tag_idx ON "CapabilityStatement" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement__profile_idx ON "CapabilityStatement" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement__security_idx ON "CapabilityStatement" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_context_idx ON "CapabilityStatement" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_contextQuantity_idx ON "CapabilityStatement" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_date_idx ON "CapabilityStatement" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_description_idx ON "CapabilityStatement" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_fhirversion_idx ON "CapabilityStatement" ("fhirversion")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_format_idx ON "CapabilityStatement" USING gin ("format")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_guide_idx ON "CapabilityStatement" USING gin ("guide")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_mode_idx ON "CapabilityStatement" USING gin ("mode")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_name_idx ON "CapabilityStatement" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_publisher_idx ON "CapabilityStatement" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_resource_idx ON "CapabilityStatement" USING gin ("resource")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_resourceProfile_idx ON "CapabilityStatement" USING gin ("resourceProfile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_software_idx ON "CapabilityStatement" ("software")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_status_idx ON "CapabilityStatement" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_supportedProfile_idx ON "CapabilityStatement" USING gin ("supportedProfile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_title_idx ON "CapabilityStatement" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_url_idx ON "CapabilityStatement" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_version_idx ON "CapabilityStatement" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_contextTypeQuantity_idx ON "CapabilityStatement" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_contextTypeValue_idx ON "CapabilityStatement" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CapabilityStatement_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_History_id_idx ON "CapabilityStatement_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_History_lastUpdated_idx ON "CapabilityStatement_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CapabilityStatement_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_Token_resourceId_idx ON "CapabilityStatement_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_Token_code_idx ON "CapabilityStatement_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_Token_system_idx ON "CapabilityStatement_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CapabilityStatement_Token_value_idx ON "CapabilityStatement_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CapabilityStatement_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "CapabilityStatement_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CarePlan" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "activityDate" TIMESTAMPTZ[],
    "activityReference" TEXT[],
    "basedOn" TEXT[],
    "careTeam" TEXT[],
    "condition" TEXT[],
    "encounter" TEXT,
    "goal" TEXT[],
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "intent" TEXT,
    "partOf" TEXT[],
    "performer" TEXT[],
    "replaces" TEXT[],
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_lastUpdated_idx ON "CarePlan" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_compartments_idx ON "CarePlan" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_projectId_idx ON "CarePlan" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan__source_idx ON "CarePlan" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan__tag_idx ON "CarePlan" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan__profile_idx ON "CarePlan" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan__security_idx ON "CarePlan" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_date_idx ON "CarePlan" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_patient_idx ON "CarePlan" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_activityDate_idx ON "CarePlan" USING gin ("activityDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_activityReference_idx ON "CarePlan" USING gin ("activityReference")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_basedOn_idx ON "CarePlan" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_careTeam_idx ON "CarePlan" USING gin ("careTeam")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_condition_idx ON "CarePlan" USING gin ("condition")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_encounter_idx ON "CarePlan" ("encounter")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_goal_idx ON "CarePlan" USING gin ("goal")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_instantiatesCanonical_idx ON "CarePlan" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_instantiatesUri_idx ON "CarePlan" USING gin ("instantiatesUri")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_intent_idx ON "CarePlan" ("intent")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_partOf_idx ON "CarePlan" USING gin ("partOf")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_performer_idx ON "CarePlan" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_replaces_idx ON "CarePlan" USING gin ("replaces")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_status_idx ON "CarePlan" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_subject_idx ON "CarePlan" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CarePlan_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_History_id_idx ON "CarePlan_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_History_lastUpdated_idx ON "CarePlan_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CarePlan_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_Token_resourceId_idx ON "CarePlan_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_Token_code_idx ON "CarePlan_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_Token_system_idx ON "CarePlan_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CarePlan_Token_value_idx ON "CarePlan_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CarePlan_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "CarePlan_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CareTeam" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "encounter" TEXT,
    "participant" TEXT[],
    "status" TEXT,
    "subject" TEXT,
    "name" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_lastUpdated_idx ON "CareTeam" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_compartments_idx ON "CareTeam" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_projectId_idx ON "CareTeam" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam__source_idx ON "CareTeam" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam__tag_idx ON "CareTeam" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam__profile_idx ON "CareTeam" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam__security_idx ON "CareTeam" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_date_idx ON "CareTeam" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_patient_idx ON "CareTeam" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_encounter_idx ON "CareTeam" ("encounter")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_participant_idx ON "CareTeam" USING gin ("participant")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_status_idx ON "CareTeam" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_subject_idx ON "CareTeam" ("subject")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_name_idx ON "CareTeam" ("name")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CareTeam_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_History_id_idx ON "CareTeam_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_History_lastUpdated_idx ON "CareTeam_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CareTeam_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_Token_resourceId_idx ON "CareTeam_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_Token_code_idx ON "CareTeam_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_Token_system_idx ON "CareTeam_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CareTeam_Token_value_idx ON "CareTeam_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CareTeam_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "CareTeam_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CatalogEntry" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_lastUpdated_idx ON "CatalogEntry" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_compartments_idx ON "CatalogEntry" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_projectId_idx ON "CatalogEntry" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry__source_idx ON "CatalogEntry" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry__tag_idx ON "CatalogEntry" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry__profile_idx ON "CatalogEntry" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry__security_idx ON "CatalogEntry" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CatalogEntry_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_History_id_idx ON "CatalogEntry_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_History_lastUpdated_idx ON "CatalogEntry_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CatalogEntry_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_Token_resourceId_idx ON "CatalogEntry_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_Token_code_idx ON "CatalogEntry_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_Token_system_idx ON "CatalogEntry_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CatalogEntry_Token_value_idx ON "CatalogEntry_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CatalogEntry_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "CatalogEntry_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItem" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "account" TEXT[],
    "context" TEXT,
    "enteredDate" TIMESTAMPTZ,
    "enterer" TEXT,
    "factorOverride" DOUBLE PRECISION,
    "occurrence" TIMESTAMPTZ,
    "patient" TEXT,
    "performerActor" TEXT[],
    "performingOrganization" TEXT,
    "priceOverride" DOUBLE PRECISION,
    "quantity" DOUBLE PRECISION,
    "requestingOrganization" TEXT,
    "service" TEXT[],
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_lastUpdated_idx ON "ChargeItem" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_compartments_idx ON "ChargeItem" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_projectId_idx ON "ChargeItem" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem__source_idx ON "ChargeItem" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem__tag_idx ON "ChargeItem" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem__profile_idx ON "ChargeItem" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem__security_idx ON "ChargeItem" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_account_idx ON "ChargeItem" USING gin ("account")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_context_idx ON "ChargeItem" ("context")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_enteredDate_idx ON "ChargeItem" ("enteredDate")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_enterer_idx ON "ChargeItem" ("enterer")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_factorOverride_idx ON "ChargeItem" ("factorOverride")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_occurrence_idx ON "ChargeItem" ("occurrence")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_patient_idx ON "ChargeItem" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_performerActor_idx ON "ChargeItem" USING gin ("performerActor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_performingOrganization_idx ON "ChargeItem" ("performingOrganization")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_priceOverride_idx ON "ChargeItem" ("priceOverride")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_quantity_idx ON "ChargeItem" ("quantity")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_requestingOrganization_idx ON "ChargeItem" ("requestingOrganization")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_service_idx ON "ChargeItem" USING gin ("service")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_subject_idx ON "ChargeItem" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItem_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_History_id_idx ON "ChargeItem_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_History_lastUpdated_idx ON "ChargeItem_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItem_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_Token_resourceId_idx ON "ChargeItem_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_Token_code_idx ON "ChargeItem_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_Token_system_idx ON "ChargeItem_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItem_Token_value_idx ON "ChargeItem_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItem_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ChargeItem_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItemDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_lastUpdated_idx ON "ChargeItemDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_compartments_idx ON "ChargeItemDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_projectId_idx ON "ChargeItemDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition__source_idx ON "ChargeItemDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition__tag_idx ON "ChargeItemDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition__profile_idx ON "ChargeItemDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition__security_idx ON "ChargeItemDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_context_idx ON "ChargeItemDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_contextQuantity_idx ON "ChargeItemDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_date_idx ON "ChargeItemDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_description_idx ON "ChargeItemDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_effective_idx ON "ChargeItemDefinition" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_publisher_idx ON "ChargeItemDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_status_idx ON "ChargeItemDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_title_idx ON "ChargeItemDefinition" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_url_idx ON "ChargeItemDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_version_idx ON "ChargeItemDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_contextTypeQuantity_idx ON "ChargeItemDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_contextTypeValue_idx ON "ChargeItemDefinition" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItemDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_History_id_idx ON "ChargeItemDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_History_lastUpdated_idx ON "ChargeItemDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItemDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_Token_resourceId_idx ON "ChargeItemDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_Token_code_idx ON "ChargeItemDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_Token_system_idx ON "ChargeItemDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ChargeItemDefinition_Token_value_idx ON "ChargeItemDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ChargeItemDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ChargeItemDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Claim" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "careTeam" TEXT[],
    "created" TIMESTAMPTZ,
    "detailUdi" TEXT[],
    "encounter" TEXT[],
    "enterer" TEXT,
    "facility" TEXT,
    "insurer" TEXT,
    "itemUdi" TEXT[],
    "patient" TEXT,
    "payee" TEXT,
    "procedureUdi" TEXT[],
    "provider" TEXT,
    "status" TEXT,
    "subdetailUdi" TEXT[],
    "use" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_lastUpdated_idx ON "Claim" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_compartments_idx ON "Claim" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_projectId_idx ON "Claim" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim__source_idx ON "Claim" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim__tag_idx ON "Claim" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim__profile_idx ON "Claim" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim__security_idx ON "Claim" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_careTeam_idx ON "Claim" USING gin ("careTeam")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_created_idx ON "Claim" ("created")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_detailUdi_idx ON "Claim" USING gin ("detailUdi")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_encounter_idx ON "Claim" USING gin ("encounter")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_enterer_idx ON "Claim" ("enterer")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_facility_idx ON "Claim" ("facility")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_insurer_idx ON "Claim" ("insurer")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_itemUdi_idx ON "Claim" USING gin ("itemUdi")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_patient_idx ON "Claim" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_payee_idx ON "Claim" ("payee")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_procedureUdi_idx ON "Claim" USING gin ("procedureUdi")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_provider_idx ON "Claim" ("provider")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_status_idx ON "Claim" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_subdetailUdi_idx ON "Claim" USING gin ("subdetailUdi")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_use_idx ON "Claim" ("use")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Claim_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_History_id_idx ON "Claim_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_History_lastUpdated_idx ON "Claim_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Claim_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_Token_resourceId_idx ON "Claim_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_Token_code_idx ON "Claim_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_Token_system_idx ON "Claim_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Claim_Token_value_idx ON "Claim_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Claim_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Claim_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ClaimResponse" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "created" TIMESTAMPTZ,
    "disposition" TEXT,
    "insurer" TEXT,
    "outcome" TEXT,
    "patient" TEXT,
    "paymentDate" DATE,
    "request" TEXT,
    "requestor" TEXT,
    "status" TEXT,
    "use" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_lastUpdated_idx ON "ClaimResponse" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_compartments_idx ON "ClaimResponse" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_projectId_idx ON "ClaimResponse" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse__source_idx ON "ClaimResponse" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse__tag_idx ON "ClaimResponse" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse__profile_idx ON "ClaimResponse" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse__security_idx ON "ClaimResponse" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_created_idx ON "ClaimResponse" ("created")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_disposition_idx ON "ClaimResponse" ("disposition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_insurer_idx ON "ClaimResponse" ("insurer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_outcome_idx ON "ClaimResponse" ("outcome")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_patient_idx ON "ClaimResponse" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_paymentDate_idx ON "ClaimResponse" ("paymentDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_request_idx ON "ClaimResponse" ("request")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_requestor_idx ON "ClaimResponse" ("requestor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_status_idx ON "ClaimResponse" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_use_idx ON "ClaimResponse" ("use")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ClaimResponse_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_History_id_idx ON "ClaimResponse_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_History_lastUpdated_idx ON "ClaimResponse_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClaimResponse_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_Token_resourceId_idx ON "ClaimResponse_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_Token_code_idx ON "ClaimResponse_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_Token_system_idx ON "ClaimResponse_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClaimResponse_Token_value_idx ON "ClaimResponse_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClaimResponse_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ClaimResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClinicalImpression" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "assessor" TEXT,
    "encounter" TEXT,
    "findingRef" TEXT[],
    "investigation" TEXT[],
    "previous" TEXT,
    "problem" TEXT[],
    "status" TEXT,
    "subject" TEXT,
    "supportingInfo" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_lastUpdated_idx ON "ClinicalImpression" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_compartments_idx ON "ClinicalImpression" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_projectId_idx ON "ClinicalImpression" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression__source_idx ON "ClinicalImpression" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression__tag_idx ON "ClinicalImpression" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression__profile_idx ON "ClinicalImpression" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression__security_idx ON "ClinicalImpression" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_date_idx ON "ClinicalImpression" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_patient_idx ON "ClinicalImpression" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_assessor_idx ON "ClinicalImpression" ("assessor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_encounter_idx ON "ClinicalImpression" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_findingRef_idx ON "ClinicalImpression" USING gin ("findingRef")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_investigation_idx ON "ClinicalImpression" USING gin ("investigation")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_previous_idx ON "ClinicalImpression" ("previous")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_problem_idx ON "ClinicalImpression" USING gin ("problem")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_status_idx ON "ClinicalImpression" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_subject_idx ON "ClinicalImpression" ("subject")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_supportingInfo_idx ON "ClinicalImpression" USING gin ("supportingInfo")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClinicalImpression_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_History_id_idx ON "ClinicalImpression_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_History_lastUpdated_idx ON "ClinicalImpression_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClinicalImpression_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_Token_resourceId_idx ON "ClinicalImpression_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_Token_code_idx ON "ClinicalImpression_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_Token_system_idx ON "ClinicalImpression_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClinicalImpression_Token_value_idx ON "ClinicalImpression_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClinicalImpression_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ClinicalImpression_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CodeSystem" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "code" TEXT[],
    "contentMode" TEXT,
    "language" TEXT[],
    "supplements" TEXT,
    "system" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_lastUpdated_idx ON "CodeSystem" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_compartments_idx ON "CodeSystem" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_projectId_idx ON "CodeSystem" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem__source_idx ON "CodeSystem" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem__tag_idx ON "CodeSystem" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem__profile_idx ON "CodeSystem" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem__security_idx ON "CodeSystem" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_context_idx ON "CodeSystem" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_contextQuantity_idx ON "CodeSystem" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_date_idx ON "CodeSystem" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_description_idx ON "CodeSystem" ("description")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_name_idx ON "CodeSystem" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_publisher_idx ON "CodeSystem" ("publisher")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_status_idx ON "CodeSystem" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_title_idx ON "CodeSystem" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_url_idx ON "CodeSystem" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_version_idx ON "CodeSystem" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_contextTypeQuantity_idx ON "CodeSystem" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_contextTypeValue_idx ON "CodeSystem" USING gin ("contextTypeValue")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_code_idx ON "CodeSystem" USING gin ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_contentMode_idx ON "CodeSystem" ("contentMode")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_language_idx ON "CodeSystem" USING gin ("language")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_supplements_idx ON "CodeSystem" ("supplements")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_system_idx ON "CodeSystem" ("system")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CodeSystem_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_History_id_idx ON "CodeSystem_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_History_lastUpdated_idx ON "CodeSystem_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CodeSystem_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_Token_resourceId_idx ON "CodeSystem_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_Token_code_idx ON "CodeSystem_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_Token_system_idx ON "CodeSystem_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CodeSystem_Token_value_idx ON "CodeSystem_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CodeSystem_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "CodeSystem_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Communication" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "basedOn" TEXT[],
    "encounter" TEXT,
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "partOf" TEXT[],
    "patient" TEXT,
    "received" TIMESTAMPTZ,
    "recipient" TEXT[],
    "sender" TEXT,
    "sent" TIMESTAMPTZ,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_lastUpdated_idx ON "Communication" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_compartments_idx ON "Communication" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_projectId_idx ON "Communication" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication__source_idx ON "Communication" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication__tag_idx ON "Communication" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication__profile_idx ON "Communication" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication__security_idx ON "Communication" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_basedOn_idx ON "Communication" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_encounter_idx ON "Communication" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_instantiatesCanonical_idx ON "Communication" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_instantiatesUri_idx ON "Communication" USING gin ("instantiatesUri")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_partOf_idx ON "Communication" USING gin ("partOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_patient_idx ON "Communication" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_received_idx ON "Communication" ("received")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_recipient_idx ON "Communication" USING gin ("recipient")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_sender_idx ON "Communication" ("sender")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_sent_idx ON "Communication" ("sent")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_status_idx ON "Communication" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_subject_idx ON "Communication" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Communication_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_History_id_idx ON "Communication_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_History_lastUpdated_idx ON "Communication_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Communication_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_Token_resourceId_idx ON "Communication_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_Token_code_idx ON "Communication_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_Token_system_idx ON "Communication_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Communication_Token_value_idx ON "Communication_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Communication_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Communication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CommunicationRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "authored" TIMESTAMPTZ,
    "basedOn" TEXT[],
    "encounter" TEXT,
    "occurrence" TIMESTAMPTZ,
    "patient" TEXT,
    "priority" TEXT,
    "recipient" TEXT[],
    "replaces" TEXT[],
    "requester" TEXT,
    "sender" TEXT,
    "status" TEXT,
    "subject" TEXT,
    "priorityOrder" INTEGER
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_lastUpdated_idx ON "CommunicationRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_compartments_idx ON "CommunicationRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_projectId_idx ON "CommunicationRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest__source_idx ON "CommunicationRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest__tag_idx ON "CommunicationRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest__profile_idx ON "CommunicationRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest__security_idx ON "CommunicationRequest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_authored_idx ON "CommunicationRequest" ("authored")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_basedOn_idx ON "CommunicationRequest" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_encounter_idx ON "CommunicationRequest" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_occurrence_idx ON "CommunicationRequest" ("occurrence")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_patient_idx ON "CommunicationRequest" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_priority_idx ON "CommunicationRequest" ("priority")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_recipient_idx ON "CommunicationRequest" USING gin ("recipient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_replaces_idx ON "CommunicationRequest" USING gin ("replaces")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_requester_idx ON "CommunicationRequest" ("requester")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_sender_idx ON "CommunicationRequest" ("sender")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_status_idx ON "CommunicationRequest" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_subject_idx ON "CommunicationRequest" ("subject")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_priorityOrder_idx ON "CommunicationRequest" ("priorityOrder")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CommunicationRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_History_id_idx ON "CommunicationRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_History_lastUpdated_idx ON "CommunicationRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CommunicationRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_Token_resourceId_idx ON "CommunicationRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_Token_code_idx ON "CommunicationRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_Token_system_idx ON "CommunicationRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CommunicationRequest_Token_value_idx ON "CommunicationRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CommunicationRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "CommunicationRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CompartmentDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "code" TEXT,
    "resource" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_lastUpdated_idx ON "CompartmentDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_compartments_idx ON "CompartmentDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_projectId_idx ON "CompartmentDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition__source_idx ON "CompartmentDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition__tag_idx ON "CompartmentDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition__profile_idx ON "CompartmentDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition__security_idx ON "CompartmentDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_context_idx ON "CompartmentDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_contextQuantity_idx ON "CompartmentDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_date_idx ON "CompartmentDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_description_idx ON "CompartmentDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_name_idx ON "CompartmentDefinition" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_publisher_idx ON "CompartmentDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_status_idx ON "CompartmentDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_url_idx ON "CompartmentDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_version_idx ON "CompartmentDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_contextTypeQuantity_idx ON "CompartmentDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_contextTypeValue_idx ON "CompartmentDefinition" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_code_idx ON "CompartmentDefinition" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_resource_idx ON "CompartmentDefinition" USING gin ("resource")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CompartmentDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_History_id_idx ON "CompartmentDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_History_lastUpdated_idx ON "CompartmentDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CompartmentDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_Token_resourceId_idx ON "CompartmentDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_Token_code_idx ON "CompartmentDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_Token_system_idx ON "CompartmentDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CompartmentDefinition_Token_value_idx ON "CompartmentDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CompartmentDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "CompartmentDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Composition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "attester" TEXT[],
    "author" TEXT[],
    "confidentiality" TEXT,
    "encounter" TEXT,
    "entry" TEXT[],
    "period" TIMESTAMPTZ[],
    "relatedId" TEXT[],
    "relatedRef" TEXT[],
    "status" TEXT,
    "subject" TEXT,
    "title" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_lastUpdated_idx ON "Composition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_compartments_idx ON "Composition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_projectId_idx ON "Composition" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition__source_idx ON "Composition" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition__tag_idx ON "Composition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition__profile_idx ON "Composition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition__security_idx ON "Composition" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_date_idx ON "Composition" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_patient_idx ON "Composition" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_attester_idx ON "Composition" USING gin ("attester")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_author_idx ON "Composition" USING gin ("author")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_confidentiality_idx ON "Composition" ("confidentiality")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_encounter_idx ON "Composition" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_entry_idx ON "Composition" USING gin ("entry")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_period_idx ON "Composition" USING gin ("period")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_relatedId_idx ON "Composition" USING gin ("relatedId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_relatedRef_idx ON "Composition" USING gin ("relatedRef")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_status_idx ON "Composition" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_subject_idx ON "Composition" ("subject")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_title_idx ON "Composition" ("title")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Composition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_History_id_idx ON "Composition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_History_lastUpdated_idx ON "Composition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Composition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_Token_resourceId_idx ON "Composition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_Token_code_idx ON "Composition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_Token_system_idx ON "Composition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Composition_Token_value_idx ON "Composition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Composition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Composition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ConceptMap" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "dependson" TEXT[],
    "other" TEXT[],
    "product" TEXT[],
    "source" TEXT,
    "sourceCode" TEXT[],
    "sourceSystem" TEXT[],
    "sourceUri" TEXT,
    "target" TEXT,
    "targetCode" TEXT[],
    "targetSystem" TEXT[],
    "targetUri" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_lastUpdated_idx ON "ConceptMap" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_compartments_idx ON "ConceptMap" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_projectId_idx ON "ConceptMap" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap__source_idx ON "ConceptMap" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap__tag_idx ON "ConceptMap" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap__profile_idx ON "ConceptMap" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap__security_idx ON "ConceptMap" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_context_idx ON "ConceptMap" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_contextQuantity_idx ON "ConceptMap" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_date_idx ON "ConceptMap" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_description_idx ON "ConceptMap" ("description")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_name_idx ON "ConceptMap" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_publisher_idx ON "ConceptMap" ("publisher")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_status_idx ON "ConceptMap" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_title_idx ON "ConceptMap" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_url_idx ON "ConceptMap" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_version_idx ON "ConceptMap" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_contextTypeQuantity_idx ON "ConceptMap" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_contextTypeValue_idx ON "ConceptMap" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_dependson_idx ON "ConceptMap" USING gin ("dependson")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_other_idx ON "ConceptMap" USING gin ("other")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_product_idx ON "ConceptMap" USING gin ("product")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_source_idx ON "ConceptMap" ("source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_sourceCode_idx ON "ConceptMap" USING gin ("sourceCode")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_sourceSystem_idx ON "ConceptMap" USING gin ("sourceSystem")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_sourceUri_idx ON "ConceptMap" ("sourceUri")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_target_idx ON "ConceptMap" ("target")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_targetCode_idx ON "ConceptMap" USING gin ("targetCode")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_targetSystem_idx ON "ConceptMap" USING gin ("targetSystem")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_targetUri_idx ON "ConceptMap" ("targetUri")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ConceptMap_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_History_id_idx ON "ConceptMap_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_History_lastUpdated_idx ON "ConceptMap_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ConceptMap_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_Token_resourceId_idx ON "ConceptMap_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_Token_code_idx ON "ConceptMap_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_Token_system_idx ON "ConceptMap_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ConceptMap_Token_value_idx ON "ConceptMap_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ConceptMap_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ConceptMap_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Condition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "abatementAge" DOUBLE PRECISION,
    "abatementDate" TIMESTAMPTZ,
    "abatementString" TEXT,
    "asserter" TEXT,
    "encounter" TEXT,
    "evidenceDetail" TEXT[],
    "onsetAge" DOUBLE PRECISION,
    "onsetDate" TIMESTAMPTZ,
    "onsetInfo" TEXT,
    "recordedDate" TIMESTAMPTZ,
    "subject" TEXT,
    "assertedDate" TIMESTAMPTZ
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_lastUpdated_idx ON "Condition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_compartments_idx ON "Condition" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_projectId_idx ON "Condition" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition__source_idx ON "Condition" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition__tag_idx ON "Condition" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition__profile_idx ON "Condition" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition__security_idx ON "Condition" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_patient_idx ON "Condition" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_abatementAge_idx ON "Condition" ("abatementAge")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_abatementDate_idx ON "Condition" ("abatementDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_abatementString_idx ON "Condition" ("abatementString")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_asserter_idx ON "Condition" ("asserter")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_encounter_idx ON "Condition" ("encounter")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_evidenceDetail_idx ON "Condition" USING gin ("evidenceDetail")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_onsetAge_idx ON "Condition" ("onsetAge")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_onsetDate_idx ON "Condition" ("onsetDate")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_onsetInfo_idx ON "Condition" ("onsetInfo")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_recordedDate_idx ON "Condition" ("recordedDate")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_subject_idx ON "Condition" ("subject")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_assertedDate_idx ON "Condition" ("assertedDate")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Condition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_History_id_idx ON "Condition_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_History_lastUpdated_idx ON "Condition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Condition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_Token_resourceId_idx ON "Condition_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_Token_code_idx ON "Condition_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_Token_system_idx ON "Condition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Condition_Token_value_idx ON "Condition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Condition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Condition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Consent" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "actor" TEXT[],
    "consentor" TEXT[],
    "data" TEXT[],
    "organization" TEXT[],
    "period" TIMESTAMPTZ,
    "sourceReference" TEXT,
    "status" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_lastUpdated_idx ON "Consent" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_compartments_idx ON "Consent" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_projectId_idx ON "Consent" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent__source_idx ON "Consent" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent__tag_idx ON "Consent" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent__profile_idx ON "Consent" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent__security_idx ON "Consent" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_date_idx ON "Consent" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_patient_idx ON "Consent" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_actor_idx ON "Consent" USING gin ("actor")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_consentor_idx ON "Consent" USING gin ("consentor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_data_idx ON "Consent" USING gin ("data")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_organization_idx ON "Consent" USING gin ("organization")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_period_idx ON "Consent" ("period")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_sourceReference_idx ON "Consent" ("sourceReference")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_status_idx ON "Consent" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Consent_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_History_id_idx ON "Consent_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_History_lastUpdated_idx ON "Consent_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Consent_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_Token_resourceId_idx ON "Consent_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_Token_code_idx ON "Consent_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_Token_system_idx ON "Consent_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Consent_Token_value_idx ON "Consent_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Consent_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Consent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Contract" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "authority" TEXT[],
    "domain" TEXT[],
    "instantiates" TEXT,
    "issued" TIMESTAMPTZ,
    "patient" TEXT[],
    "signer" TEXT[],
    "status" TEXT,
    "subject" TEXT[],
    "url" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_lastUpdated_idx ON "Contract" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_compartments_idx ON "Contract" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_projectId_idx ON "Contract" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract__source_idx ON "Contract" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract__tag_idx ON "Contract" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract__profile_idx ON "Contract" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract__security_idx ON "Contract" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_authority_idx ON "Contract" USING gin ("authority")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_domain_idx ON "Contract" USING gin ("domain")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_instantiates_idx ON "Contract" ("instantiates")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_issued_idx ON "Contract" ("issued")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_patient_idx ON "Contract" USING gin ("patient")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_signer_idx ON "Contract" USING gin ("signer")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_status_idx ON "Contract" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_subject_idx ON "Contract" USING gin ("subject")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_url_idx ON "Contract" ("url")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Contract_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_History_id_idx ON "Contract_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_History_lastUpdated_idx ON "Contract_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Contract_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_Token_resourceId_idx ON "Contract_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_Token_code_idx ON "Contract_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_Token_system_idx ON "Contract_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Contract_Token_value_idx ON "Contract_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Contract_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Contract_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Coverage" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "beneficiary" TEXT,
    "classValue" TEXT[],
    "dependent" TEXT,
    "patient" TEXT,
    "payor" TEXT[],
    "policyHolder" TEXT,
    "status" TEXT,
    "subscriber" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_lastUpdated_idx ON "Coverage" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_compartments_idx ON "Coverage" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_projectId_idx ON "Coverage" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage__source_idx ON "Coverage" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage__tag_idx ON "Coverage" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage__profile_idx ON "Coverage" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage__security_idx ON "Coverage" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_beneficiary_idx ON "Coverage" ("beneficiary")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_classValue_idx ON "Coverage" USING gin ("classValue")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_dependent_idx ON "Coverage" ("dependent")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_patient_idx ON "Coverage" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_payor_idx ON "Coverage" USING gin ("payor")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_policyHolder_idx ON "Coverage" ("policyHolder")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_status_idx ON "Coverage" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_subscriber_idx ON "Coverage" ("subscriber")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Coverage_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_History_id_idx ON "Coverage_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_History_lastUpdated_idx ON "Coverage_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Coverage_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_Token_resourceId_idx ON "Coverage_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_Token_code_idx ON "Coverage_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_Token_system_idx ON "Coverage_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Coverage_Token_value_idx ON "Coverage_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Coverage_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Coverage_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "created" TIMESTAMPTZ,
    "enterer" TEXT,
    "facility" TEXT,
    "patient" TEXT,
    "provider" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_lastUpdated_idx ON "CoverageEligibilityRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_compartments_idx ON "CoverageEligibilityRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_projectId_idx ON "CoverageEligibilityRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest__source_idx ON "CoverageEligibilityRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest__tag_idx ON "CoverageEligibilityRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest__profile_idx ON "CoverageEligibilityRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest__security_idx ON "CoverageEligibilityRequest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_created_idx ON "CoverageEligibilityRequest" ("created")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_enterer_idx ON "CoverageEligibilityRequest" ("enterer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_facility_idx ON "CoverageEligibilityRequest" ("facility")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_patient_idx ON "CoverageEligibilityRequest" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_provider_idx ON "CoverageEligibilityRequest" ("provider")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_status_idx ON "CoverageEligibilityRequest" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_History_id_idx ON "CoverageEligibilityRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_History_lastUpdated_idx ON "CoverageEligibilityRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_Token_resourceId_idx ON "CoverageEligibilityRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_Token_code_idx ON "CoverageEligibilityRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_Token_system_idx ON "CoverageEligibilityRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityRequest_Token_value_idx ON "CoverageEligibilityRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "CoverageEligibilityRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityResponse" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "created" TIMESTAMPTZ,
    "disposition" TEXT,
    "insurer" TEXT,
    "outcome" TEXT,
    "patient" TEXT,
    "request" TEXT,
    "requestor" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_lastUpdated_idx ON "CoverageEligibilityResponse" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_compartments_idx ON "CoverageEligibilityResponse" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_projectId_idx ON "CoverageEligibilityResponse" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse__source_idx ON "CoverageEligibilityResponse" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse__tag_idx ON "CoverageEligibilityResponse" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse__profile_idx ON "CoverageEligibilityResponse" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse__security_idx ON "CoverageEligibilityResponse" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_created_idx ON "CoverageEligibilityResponse" ("created")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_disposition_idx ON "CoverageEligibilityResponse" ("disposition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_insurer_idx ON "CoverageEligibilityResponse" ("insurer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_outcome_idx ON "CoverageEligibilityResponse" ("outcome")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_patient_idx ON "CoverageEligibilityResponse" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_request_idx ON "CoverageEligibilityResponse" ("request")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_requestor_idx ON "CoverageEligibilityResponse" ("requestor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_status_idx ON "CoverageEligibilityResponse" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityResponse_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_History_id_idx ON "CoverageEligibilityResponse_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_History_lastUpdated_idx ON "CoverageEligibilityResponse_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityResponse_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_Token_resourceId_idx ON "CoverageEligibilityResponse_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_Token_code_idx ON "CoverageEligibilityResponse_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_Token_system_idx ON "CoverageEligibilityResponse_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS CoverageEligibilityResponse_Token_value_idx ON "CoverageEligibilityResponse_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "CoverageEligibilityResponse_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "CoverageEligibilityResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DetectedIssue" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "author" TEXT,
    "identified" TIMESTAMPTZ,
    "implicated" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_lastUpdated_idx ON "DetectedIssue" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_compartments_idx ON "DetectedIssue" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_projectId_idx ON "DetectedIssue" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue__source_idx ON "DetectedIssue" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue__tag_idx ON "DetectedIssue" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue__profile_idx ON "DetectedIssue" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue__security_idx ON "DetectedIssue" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_patient_idx ON "DetectedIssue" ("patient")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_author_idx ON "DetectedIssue" ("author")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_identified_idx ON "DetectedIssue" ("identified")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_implicated_idx ON "DetectedIssue" USING gin ("implicated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DetectedIssue_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_History_id_idx ON "DetectedIssue_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_History_lastUpdated_idx ON "DetectedIssue_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DetectedIssue_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_Token_resourceId_idx ON "DetectedIssue_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_Token_code_idx ON "DetectedIssue_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_Token_system_idx ON "DetectedIssue_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DetectedIssue_Token_value_idx ON "DetectedIssue_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DetectedIssue_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DetectedIssue_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Device" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "deviceName" TEXT[],
    "location" TEXT,
    "manufacturer" TEXT,
    "model" TEXT,
    "organization" TEXT,
    "patient" TEXT,
    "status" TEXT,
    "udiCarrier" TEXT[],
    "udiDi" TEXT[],
    "url" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_lastUpdated_idx ON "Device" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_compartments_idx ON "Device" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_projectId_idx ON "Device" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device__source_idx ON "Device" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device__tag_idx ON "Device" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device__profile_idx ON "Device" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device__security_idx ON "Device" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_deviceName_idx ON "Device" USING gin ("deviceName")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_location_idx ON "Device" ("location")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_manufacturer_idx ON "Device" ("manufacturer")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_model_idx ON "Device" ("model")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_organization_idx ON "Device" ("organization")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_patient_idx ON "Device" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_status_idx ON "Device" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_udiCarrier_idx ON "Device" USING gin ("udiCarrier")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_udiDi_idx ON "Device" USING gin ("udiDi")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_url_idx ON "Device" ("url")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Device_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_History_id_idx ON "Device_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_History_lastUpdated_idx ON "Device_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Device_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_Token_resourceId_idx ON "Device_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_Token_code_idx ON "Device_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_Token_system_idx ON "Device_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Device_Token_value_idx ON "Device_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Device_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Device_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "parent" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_lastUpdated_idx ON "DeviceDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_compartments_idx ON "DeviceDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_projectId_idx ON "DeviceDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition__source_idx ON "DeviceDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition__tag_idx ON "DeviceDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition__profile_idx ON "DeviceDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition__security_idx ON "DeviceDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_parent_idx ON "DeviceDefinition" ("parent")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_History_id_idx ON "DeviceDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_History_lastUpdated_idx ON "DeviceDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_Token_resourceId_idx ON "DeviceDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_Token_code_idx ON "DeviceDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_Token_system_idx ON "DeviceDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceDefinition_Token_value_idx ON "DeviceDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DeviceDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceMetric" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "category" TEXT,
    "parent" TEXT,
    "source" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_lastUpdated_idx ON "DeviceMetric" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_compartments_idx ON "DeviceMetric" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_projectId_idx ON "DeviceMetric" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric__source_idx ON "DeviceMetric" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric__tag_idx ON "DeviceMetric" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric__profile_idx ON "DeviceMetric" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric__security_idx ON "DeviceMetric" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_category_idx ON "DeviceMetric" ("category")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_parent_idx ON "DeviceMetric" ("parent")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_source_idx ON "DeviceMetric" ("source")');

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceMetric_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_History_id_idx ON "DeviceMetric_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_History_lastUpdated_idx ON "DeviceMetric_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceMetric_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_Token_resourceId_idx ON "DeviceMetric_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_Token_code_idx ON "DeviceMetric_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_Token_system_idx ON "DeviceMetric_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceMetric_Token_value_idx ON "DeviceMetric_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceMetric_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DeviceMetric_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "code" TEXT,
    "patient" TEXT,
    "encounter" TEXT,
    "authoredOn" TIMESTAMPTZ,
    "basedOn" TEXT[],
    "device" TEXT,
    "eventDate" TIMESTAMPTZ,
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "insurance" TEXT[],
    "intent" TEXT,
    "performer" TEXT,
    "priorRequest" TEXT[],
    "requester" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_lastUpdated_idx ON "DeviceRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_compartments_idx ON "DeviceRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_projectId_idx ON "DeviceRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest__source_idx ON "DeviceRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest__tag_idx ON "DeviceRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest__profile_idx ON "DeviceRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest__security_idx ON "DeviceRequest" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_code_idx ON "DeviceRequest" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_patient_idx ON "DeviceRequest" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_encounter_idx ON "DeviceRequest" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_authoredOn_idx ON "DeviceRequest" ("authoredOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_basedOn_idx ON "DeviceRequest" USING gin ("basedOn")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_device_idx ON "DeviceRequest" ("device")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_eventDate_idx ON "DeviceRequest" ("eventDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_instantiatesCanonical_idx ON "DeviceRequest" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_instantiatesUri_idx ON "DeviceRequest" USING gin ("instantiatesUri")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_insurance_idx ON "DeviceRequest" USING gin ("insurance")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_intent_idx ON "DeviceRequest" ("intent")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_performer_idx ON "DeviceRequest" ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_priorRequest_idx ON "DeviceRequest" USING gin ("priorRequest")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_requester_idx ON "DeviceRequest" ("requester")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_status_idx ON "DeviceRequest" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_subject_idx ON "DeviceRequest" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_History_id_idx ON "DeviceRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_History_lastUpdated_idx ON "DeviceRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_Token_resourceId_idx ON "DeviceRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_Token_code_idx ON "DeviceRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_Token_system_idx ON "DeviceRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceRequest_Token_value_idx ON "DeviceRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DeviceRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceUseStatement" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "device" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_lastUpdated_idx ON "DeviceUseStatement" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_compartments_idx ON "DeviceUseStatement" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_projectId_idx ON "DeviceUseStatement" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement__source_idx ON "DeviceUseStatement" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement__tag_idx ON "DeviceUseStatement" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement__profile_idx ON "DeviceUseStatement" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement__security_idx ON "DeviceUseStatement" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_patient_idx ON "DeviceUseStatement" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_device_idx ON "DeviceUseStatement" ("device")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_subject_idx ON "DeviceUseStatement" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceUseStatement_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_History_id_idx ON "DeviceUseStatement_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_History_lastUpdated_idx ON "DeviceUseStatement_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceUseStatement_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_Token_resourceId_idx ON "DeviceUseStatement_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_Token_code_idx ON "DeviceUseStatement_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_Token_system_idx ON "DeviceUseStatement_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DeviceUseStatement_Token_value_idx ON "DeviceUseStatement_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DeviceUseStatement_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DeviceUseStatement_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DiagnosticReport" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "encounter" TEXT,
    "basedOn" TEXT[],
    "issued" TIMESTAMPTZ,
    "media" TEXT[],
    "performer" TEXT[],
    "result" TEXT[],
    "resultsInterpreter" TEXT[],
    "specimen" TEXT[],
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_lastUpdated_idx ON "DiagnosticReport" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_compartments_idx ON "DiagnosticReport" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_projectId_idx ON "DiagnosticReport" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport__source_idx ON "DiagnosticReport" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport__tag_idx ON "DiagnosticReport" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport__profile_idx ON "DiagnosticReport" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport__security_idx ON "DiagnosticReport" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_date_idx ON "DiagnosticReport" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_patient_idx ON "DiagnosticReport" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_encounter_idx ON "DiagnosticReport" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_basedOn_idx ON "DiagnosticReport" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_issued_idx ON "DiagnosticReport" ("issued")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_media_idx ON "DiagnosticReport" USING gin ("media")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_performer_idx ON "DiagnosticReport" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_result_idx ON "DiagnosticReport" USING gin ("result")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_resultsInterpreter_idx ON "DiagnosticReport" USING gin ("resultsInterpreter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_specimen_idx ON "DiagnosticReport" USING gin ("specimen")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_status_idx ON "DiagnosticReport" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_subject_idx ON "DiagnosticReport" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DiagnosticReport_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_History_id_idx ON "DiagnosticReport_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_History_lastUpdated_idx ON "DiagnosticReport_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DiagnosticReport_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_Token_resourceId_idx ON "DiagnosticReport_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_Token_code_idx ON "DiagnosticReport_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_Token_system_idx ON "DiagnosticReport_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DiagnosticReport_Token_value_idx ON "DiagnosticReport_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DiagnosticReport_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DiagnosticReport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentManifest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "author" TEXT[],
    "created" TIMESTAMPTZ,
    "description" TEXT,
    "item" TEXT[],
    "recipient" TEXT[],
    "relatedRef" TEXT[],
    "source" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_lastUpdated_idx ON "DocumentManifest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_compartments_idx ON "DocumentManifest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_projectId_idx ON "DocumentManifest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest__source_idx ON "DocumentManifest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest__tag_idx ON "DocumentManifest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest__profile_idx ON "DocumentManifest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest__security_idx ON "DocumentManifest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_patient_idx ON "DocumentManifest" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_author_idx ON "DocumentManifest" USING gin ("author")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_created_idx ON "DocumentManifest" ("created")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_description_idx ON "DocumentManifest" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_item_idx ON "DocumentManifest" USING gin ("item")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_recipient_idx ON "DocumentManifest" USING gin ("recipient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_relatedRef_idx ON "DocumentManifest" USING gin ("relatedRef")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_source_idx ON "DocumentManifest" ("source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_status_idx ON "DocumentManifest" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_subject_idx ON "DocumentManifest" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentManifest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_History_id_idx ON "DocumentManifest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_History_lastUpdated_idx ON "DocumentManifest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentManifest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_Token_resourceId_idx ON "DocumentManifest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_Token_code_idx ON "DocumentManifest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_Token_system_idx ON "DocumentManifest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentManifest_Token_value_idx ON "DocumentManifest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentManifest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DocumentManifest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentReference" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "encounter" TEXT[],
    "authenticator" TEXT,
    "author" TEXT[],
    "contenttype" TEXT[],
    "custodian" TEXT,
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "language" TEXT[],
    "location" TEXT[],
    "period" TIMESTAMPTZ,
    "related" TEXT[],
    "relatesto" TEXT[],
    "relation" TEXT[],
    "status" TEXT,
    "subject" TEXT,
    "relationship" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_lastUpdated_idx ON "DocumentReference" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_compartments_idx ON "DocumentReference" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_projectId_idx ON "DocumentReference" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference__source_idx ON "DocumentReference" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference__tag_idx ON "DocumentReference" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference__profile_idx ON "DocumentReference" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference__security_idx ON "DocumentReference" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_patient_idx ON "DocumentReference" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_encounter_idx ON "DocumentReference" USING gin ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_authenticator_idx ON "DocumentReference" ("authenticator")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_author_idx ON "DocumentReference" USING gin ("author")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_contenttype_idx ON "DocumentReference" USING gin ("contenttype")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_custodian_idx ON "DocumentReference" ("custodian")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_date_idx ON "DocumentReference" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_description_idx ON "DocumentReference" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_language_idx ON "DocumentReference" USING gin ("language")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_location_idx ON "DocumentReference" USING gin ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_period_idx ON "DocumentReference" ("period")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_related_idx ON "DocumentReference" USING gin ("related")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_relatesto_idx ON "DocumentReference" USING gin ("relatesto")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_relation_idx ON "DocumentReference" USING gin ("relation")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_status_idx ON "DocumentReference" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_subject_idx ON "DocumentReference" ("subject")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_relationship_idx ON "DocumentReference" USING gin ("relationship")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentReference_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_History_id_idx ON "DocumentReference_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_History_lastUpdated_idx ON "DocumentReference_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentReference_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_Token_resourceId_idx ON "DocumentReference_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_Token_code_idx ON "DocumentReference_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_Token_system_idx ON "DocumentReference_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DocumentReference_Token_value_idx ON "DocumentReference_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DocumentReference_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DocumentReference_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EffectEvidenceSynthesis" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_lastUpdated_idx ON "EffectEvidenceSynthesis" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_compartments_idx ON "EffectEvidenceSynthesis" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_projectId_idx ON "EffectEvidenceSynthesis" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis__source_idx ON "EffectEvidenceSynthesis" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis__tag_idx ON "EffectEvidenceSynthesis" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis__profile_idx ON "EffectEvidenceSynthesis" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis__security_idx ON "EffectEvidenceSynthesis" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_context_idx ON "EffectEvidenceSynthesis" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_contextQuantity_idx ON "EffectEvidenceSynthesis" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_date_idx ON "EffectEvidenceSynthesis" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_description_idx ON "EffectEvidenceSynthesis" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_effective_idx ON "EffectEvidenceSynthesis" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_name_idx ON "EffectEvidenceSynthesis" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_publisher_idx ON "EffectEvidenceSynthesis" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_status_idx ON "EffectEvidenceSynthesis" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_title_idx ON "EffectEvidenceSynthesis" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_url_idx ON "EffectEvidenceSynthesis" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_version_idx ON "EffectEvidenceSynthesis" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_contextTypeQuantity_idx ON "EffectEvidenceSynthesis" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_contextTypeValue_idx ON "EffectEvidenceSynthesis" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EffectEvidenceSynthesis_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_History_id_idx ON "EffectEvidenceSynthesis_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_History_lastUpdated_idx ON "EffectEvidenceSynthesis_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EffectEvidenceSynthesis_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_Token_resourceId_idx ON "EffectEvidenceSynthesis_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_Token_code_idx ON "EffectEvidenceSynthesis_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_Token_system_idx ON "EffectEvidenceSynthesis_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EffectEvidenceSynthesis_Token_value_idx ON "EffectEvidenceSynthesis_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EffectEvidenceSynthesis_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "EffectEvidenceSynthesis_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Encounter" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "account" TEXT[],
    "appointment" TEXT[],
    "basedOn" TEXT[],
    "diagnosis" TEXT[],
    "episodeOfCare" TEXT[],
    "length" DOUBLE PRECISION,
    "location" TEXT[],
    "locationPeriod" TIMESTAMPTZ[],
    "partOf" TEXT,
    "participant" TEXT[],
    "practitioner" TEXT[],
    "reasonReference" TEXT[],
    "serviceProvider" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_lastUpdated_idx ON "Encounter" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_compartments_idx ON "Encounter" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_projectId_idx ON "Encounter" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter__source_idx ON "Encounter" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter__tag_idx ON "Encounter" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter__profile_idx ON "Encounter" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter__security_idx ON "Encounter" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_date_idx ON "Encounter" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_patient_idx ON "Encounter" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_account_idx ON "Encounter" USING gin ("account")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_appointment_idx ON "Encounter" USING gin ("appointment")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_basedOn_idx ON "Encounter" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_diagnosis_idx ON "Encounter" USING gin ("diagnosis")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_episodeOfCare_idx ON "Encounter" USING gin ("episodeOfCare")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_length_idx ON "Encounter" ("length")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_location_idx ON "Encounter" USING gin ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_locationPeriod_idx ON "Encounter" USING gin ("locationPeriod")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_partOf_idx ON "Encounter" ("partOf")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_participant_idx ON "Encounter" USING gin ("participant")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_practitioner_idx ON "Encounter" USING gin ("practitioner")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_reasonReference_idx ON "Encounter" USING gin ("reasonReference")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_serviceProvider_idx ON "Encounter" ("serviceProvider")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_status_idx ON "Encounter" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_subject_idx ON "Encounter" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Encounter_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_History_id_idx ON "Encounter_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_History_lastUpdated_idx ON "Encounter_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Encounter_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_Token_resourceId_idx ON "Encounter_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_Token_code_idx ON "Encounter_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_Token_system_idx ON "Encounter_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Encounter_Token_value_idx ON "Encounter_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Encounter_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Encounter_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Endpoint" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT,
    "organization" TEXT,
    "status" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_lastUpdated_idx ON "Endpoint" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_compartments_idx ON "Endpoint" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_projectId_idx ON "Endpoint" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint__source_idx ON "Endpoint" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint__tag_idx ON "Endpoint" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint__profile_idx ON "Endpoint" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint__security_idx ON "Endpoint" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_name_idx ON "Endpoint" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_organization_idx ON "Endpoint" ("organization")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_status_idx ON "Endpoint" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Endpoint_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_History_id_idx ON "Endpoint_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_History_lastUpdated_idx ON "Endpoint_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Endpoint_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_Token_resourceId_idx ON "Endpoint_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_Token_code_idx ON "Endpoint_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_Token_system_idx ON "Endpoint_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Endpoint_Token_value_idx ON "Endpoint_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Endpoint_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Endpoint_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_lastUpdated_idx ON "EnrollmentRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_compartments_idx ON "EnrollmentRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_projectId_idx ON "EnrollmentRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest__source_idx ON "EnrollmentRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest__tag_idx ON "EnrollmentRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest__profile_idx ON "EnrollmentRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest__security_idx ON "EnrollmentRequest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_patient_idx ON "EnrollmentRequest" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_status_idx ON "EnrollmentRequest" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_subject_idx ON "EnrollmentRequest" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_History_id_idx ON "EnrollmentRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_History_lastUpdated_idx ON "EnrollmentRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_Token_resourceId_idx ON "EnrollmentRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_Token_code_idx ON "EnrollmentRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_Token_system_idx ON "EnrollmentRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentRequest_Token_value_idx ON "EnrollmentRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "EnrollmentRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentResponse" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "request" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_lastUpdated_idx ON "EnrollmentResponse" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_compartments_idx ON "EnrollmentResponse" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_projectId_idx ON "EnrollmentResponse" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse__source_idx ON "EnrollmentResponse" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse__tag_idx ON "EnrollmentResponse" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse__profile_idx ON "EnrollmentResponse" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse__security_idx ON "EnrollmentResponse" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_request_idx ON "EnrollmentResponse" ("request")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_status_idx ON "EnrollmentResponse" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentResponse_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_History_id_idx ON "EnrollmentResponse_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_History_lastUpdated_idx ON "EnrollmentResponse_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentResponse_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_Token_resourceId_idx ON "EnrollmentResponse_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_Token_code_idx ON "EnrollmentResponse_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_Token_system_idx ON "EnrollmentResponse_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EnrollmentResponse_Token_value_idx ON "EnrollmentResponse_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EnrollmentResponse_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "EnrollmentResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EpisodeOfCare" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "careManager" TEXT,
    "condition" TEXT[],
    "incomingReferral" TEXT[],
    "organization" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_lastUpdated_idx ON "EpisodeOfCare" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_compartments_idx ON "EpisodeOfCare" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_projectId_idx ON "EpisodeOfCare" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare__source_idx ON "EpisodeOfCare" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare__tag_idx ON "EpisodeOfCare" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare__profile_idx ON "EpisodeOfCare" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare__security_idx ON "EpisodeOfCare" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_date_idx ON "EpisodeOfCare" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_patient_idx ON "EpisodeOfCare" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_careManager_idx ON "EpisodeOfCare" ("careManager")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_condition_idx ON "EpisodeOfCare" USING gin ("condition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_incomingReferral_idx ON "EpisodeOfCare" USING gin ("incomingReferral")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_organization_idx ON "EpisodeOfCare" ("organization")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_status_idx ON "EpisodeOfCare" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "EpisodeOfCare_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_History_id_idx ON "EpisodeOfCare_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_History_lastUpdated_idx ON "EpisodeOfCare_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EpisodeOfCare_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_Token_resourceId_idx ON "EpisodeOfCare_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_Token_code_idx ON "EpisodeOfCare_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_Token_system_idx ON "EpisodeOfCare_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EpisodeOfCare_Token_value_idx ON "EpisodeOfCare_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EpisodeOfCare_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "EpisodeOfCare_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EventDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_lastUpdated_idx ON "EventDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_compartments_idx ON "EventDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_projectId_idx ON "EventDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition__source_idx ON "EventDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition__tag_idx ON "EventDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition__profile_idx ON "EventDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition__security_idx ON "EventDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_composedOf_idx ON "EventDefinition" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_context_idx ON "EventDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_contextQuantity_idx ON "EventDefinition" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_date_idx ON "EventDefinition" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_dependsOn_idx ON "EventDefinition" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_derivedFrom_idx ON "EventDefinition" USING gin ("derivedFrom")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_description_idx ON "EventDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_effective_idx ON "EventDefinition" ("effective")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_name_idx ON "EventDefinition" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_predecessor_idx ON "EventDefinition" USING gin ("predecessor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_publisher_idx ON "EventDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_status_idx ON "EventDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_successor_idx ON "EventDefinition" USING gin ("successor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_title_idx ON "EventDefinition" ("title")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_url_idx ON "EventDefinition" ("url")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_version_idx ON "EventDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_contextTypeQuantity_idx ON "EventDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_contextTypeValue_idx ON "EventDefinition" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EventDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_History_id_idx ON "EventDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_History_lastUpdated_idx ON "EventDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EventDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_Token_resourceId_idx ON "EventDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_Token_code_idx ON "EventDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_Token_system_idx ON "EventDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EventDefinition_Token_value_idx ON "EventDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EventDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "EventDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Evidence" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_lastUpdated_idx ON "Evidence" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_compartments_idx ON "Evidence" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_projectId_idx ON "Evidence" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence__source_idx ON "Evidence" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence__tag_idx ON "Evidence" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence__profile_idx ON "Evidence" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence__security_idx ON "Evidence" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_composedOf_idx ON "Evidence" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_context_idx ON "Evidence" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_contextQuantity_idx ON "Evidence" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_date_idx ON "Evidence" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_dependsOn_idx ON "Evidence" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_derivedFrom_idx ON "Evidence" USING gin ("derivedFrom")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_description_idx ON "Evidence" ("description")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_effective_idx ON "Evidence" ("effective")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_name_idx ON "Evidence" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_predecessor_idx ON "Evidence" USING gin ("predecessor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_publisher_idx ON "Evidence" ("publisher")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_status_idx ON "Evidence" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_successor_idx ON "Evidence" USING gin ("successor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_title_idx ON "Evidence" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_url_idx ON "Evidence" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_version_idx ON "Evidence" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_contextTypeQuantity_idx ON "Evidence" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_contextTypeValue_idx ON "Evidence" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Evidence_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_History_id_idx ON "Evidence_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_History_lastUpdated_idx ON "Evidence_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Evidence_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_Token_resourceId_idx ON "Evidence_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_Token_code_idx ON "Evidence_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_Token_system_idx ON "Evidence_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Evidence_Token_value_idx ON "Evidence_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Evidence_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Evidence_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "EvidenceVariable" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_lastUpdated_idx ON "EvidenceVariable" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_compartments_idx ON "EvidenceVariable" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_projectId_idx ON "EvidenceVariable" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable__source_idx ON "EvidenceVariable" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable__tag_idx ON "EvidenceVariable" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable__profile_idx ON "EvidenceVariable" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable__security_idx ON "EvidenceVariable" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_composedOf_idx ON "EvidenceVariable" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_context_idx ON "EvidenceVariable" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_contextQuantity_idx ON "EvidenceVariable" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_date_idx ON "EvidenceVariable" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_dependsOn_idx ON "EvidenceVariable" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_derivedFrom_idx ON "EvidenceVariable" USING gin ("derivedFrom")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_description_idx ON "EvidenceVariable" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_effective_idx ON "EvidenceVariable" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_name_idx ON "EvidenceVariable" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_predecessor_idx ON "EvidenceVariable" USING gin ("predecessor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_publisher_idx ON "EvidenceVariable" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_status_idx ON "EvidenceVariable" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_successor_idx ON "EvidenceVariable" USING gin ("successor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_title_idx ON "EvidenceVariable" ("title")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_url_idx ON "EvidenceVariable" ("url")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_version_idx ON "EvidenceVariable" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_contextTypeQuantity_idx ON "EvidenceVariable" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_contextTypeValue_idx ON "EvidenceVariable" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EvidenceVariable_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_History_id_idx ON "EvidenceVariable_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_History_lastUpdated_idx ON "EvidenceVariable_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EvidenceVariable_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_Token_resourceId_idx ON "EvidenceVariable_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_Token_code_idx ON "EvidenceVariable_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_Token_system_idx ON "EvidenceVariable_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS EvidenceVariable_Token_value_idx ON "EvidenceVariable_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "EvidenceVariable_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "EvidenceVariable_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExampleScenario" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_lastUpdated_idx ON "ExampleScenario" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_compartments_idx ON "ExampleScenario" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_projectId_idx ON "ExampleScenario" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario__source_idx ON "ExampleScenario" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario__tag_idx ON "ExampleScenario" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario__profile_idx ON "ExampleScenario" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario__security_idx ON "ExampleScenario" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_context_idx ON "ExampleScenario" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_contextQuantity_idx ON "ExampleScenario" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_date_idx ON "ExampleScenario" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_name_idx ON "ExampleScenario" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_publisher_idx ON "ExampleScenario" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_status_idx ON "ExampleScenario" ("status")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_url_idx ON "ExampleScenario" ("url")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_version_idx ON "ExampleScenario" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_contextTypeQuantity_idx ON "ExampleScenario" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_contextTypeValue_idx ON "ExampleScenario" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExampleScenario_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_History_id_idx ON "ExampleScenario_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_History_lastUpdated_idx ON "ExampleScenario_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExampleScenario_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_Token_resourceId_idx ON "ExampleScenario_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_Token_code_idx ON "ExampleScenario_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_Token_system_idx ON "ExampleScenario_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExampleScenario_Token_value_idx ON "ExampleScenario_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExampleScenario_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ExampleScenario_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExplanationOfBenefit" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "careTeam" TEXT[],
    "claim" TEXT,
    "coverage" TEXT[],
    "created" TIMESTAMPTZ,
    "detailUdi" TEXT[],
    "disposition" TEXT,
    "encounter" TEXT[],
    "enterer" TEXT,
    "facility" TEXT,
    "itemUdi" TEXT[],
    "patient" TEXT,
    "payee" TEXT,
    "procedureUdi" TEXT[],
    "provider" TEXT,
    "status" TEXT,
    "subdetailUdi" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_lastUpdated_idx ON "ExplanationOfBenefit" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_compartments_idx ON "ExplanationOfBenefit" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_projectId_idx ON "ExplanationOfBenefit" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit__source_idx ON "ExplanationOfBenefit" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit__tag_idx ON "ExplanationOfBenefit" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit__profile_idx ON "ExplanationOfBenefit" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit__security_idx ON "ExplanationOfBenefit" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_careTeam_idx ON "ExplanationOfBenefit" USING gin ("careTeam")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_claim_idx ON "ExplanationOfBenefit" ("claim")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_coverage_idx ON "ExplanationOfBenefit" USING gin ("coverage")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_created_idx ON "ExplanationOfBenefit" ("created")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_detailUdi_idx ON "ExplanationOfBenefit" USING gin ("detailUdi")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_disposition_idx ON "ExplanationOfBenefit" ("disposition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_encounter_idx ON "ExplanationOfBenefit" USING gin ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_enterer_idx ON "ExplanationOfBenefit" ("enterer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_facility_idx ON "ExplanationOfBenefit" ("facility")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_itemUdi_idx ON "ExplanationOfBenefit" USING gin ("itemUdi")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_patient_idx ON "ExplanationOfBenefit" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_payee_idx ON "ExplanationOfBenefit" ("payee")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_procedureUdi_idx ON "ExplanationOfBenefit" USING gin ("procedureUdi")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_provider_idx ON "ExplanationOfBenefit" ("provider")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_status_idx ON "ExplanationOfBenefit" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_subdetailUdi_idx ON "ExplanationOfBenefit" USING gin ("subdetailUdi")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExplanationOfBenefit_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_History_id_idx ON "ExplanationOfBenefit_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_History_lastUpdated_idx ON "ExplanationOfBenefit_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExplanationOfBenefit_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_Token_resourceId_idx ON "ExplanationOfBenefit_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_Token_code_idx ON "ExplanationOfBenefit_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_Token_system_idx ON "ExplanationOfBenefit_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ExplanationOfBenefit_Token_value_idx ON "ExplanationOfBenefit_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ExplanationOfBenefit_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ExplanationOfBenefit_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "FamilyMemberHistory" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_lastUpdated_idx ON "FamilyMemberHistory" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_compartments_idx ON "FamilyMemberHistory" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_projectId_idx ON "FamilyMemberHistory" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory__source_idx ON "FamilyMemberHistory" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory__tag_idx ON "FamilyMemberHistory" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory__profile_idx ON "FamilyMemberHistory" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory__security_idx ON "FamilyMemberHistory" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_date_idx ON "FamilyMemberHistory" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_patient_idx ON "FamilyMemberHistory" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_instantiatesCanonical_idx ON "FamilyMemberHistory" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_instantiatesUri_idx ON "FamilyMemberHistory" USING gin ("instantiatesUri")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_status_idx ON "FamilyMemberHistory" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "FamilyMemberHistory_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_History_id_idx ON "FamilyMemberHistory_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_History_lastUpdated_idx ON "FamilyMemberHistory_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "FamilyMemberHistory_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_Token_resourceId_idx ON "FamilyMemberHistory_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_Token_code_idx ON "FamilyMemberHistory_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_Token_system_idx ON "FamilyMemberHistory_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS FamilyMemberHistory_Token_value_idx ON "FamilyMemberHistory_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "FamilyMemberHistory_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "FamilyMemberHistory_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Flag" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "encounter" TEXT,
    "author" TEXT,
    "subject" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_lastUpdated_idx ON "Flag" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_compartments_idx ON "Flag" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_projectId_idx ON "Flag" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag__source_idx ON "Flag" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag__tag_idx ON "Flag" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag__profile_idx ON "Flag" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag__security_idx ON "Flag" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_date_idx ON "Flag" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_patient_idx ON "Flag" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_encounter_idx ON "Flag" ("encounter")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_author_idx ON "Flag" ("author")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_subject_idx ON "Flag" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Flag_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_History_id_idx ON "Flag_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_History_lastUpdated_idx ON "Flag_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Flag_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_Token_resourceId_idx ON "Flag_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_Token_code_idx ON "Flag_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_Token_system_idx ON "Flag_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Flag_Token_value_idx ON "Flag_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Flag_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Flag_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Goal" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "lifecycleStatus" TEXT,
    "startDate" DATE,
    "subject" TEXT,
    "targetDate" DATE[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_lastUpdated_idx ON "Goal" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_compartments_idx ON "Goal" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_projectId_idx ON "Goal" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal__source_idx ON "Goal" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal__tag_idx ON "Goal" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal__profile_idx ON "Goal" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal__security_idx ON "Goal" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_patient_idx ON "Goal" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_lifecycleStatus_idx ON "Goal" ("lifecycleStatus")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_startDate_idx ON "Goal" ("startDate")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_subject_idx ON "Goal" ("subject")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_targetDate_idx ON "Goal" USING gin ("targetDate")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Goal_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_History_id_idx ON "Goal_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_History_lastUpdated_idx ON "Goal_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Goal_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_Token_resourceId_idx ON "Goal_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_Token_code_idx ON "Goal_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_Token_system_idx ON "Goal_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Goal_Token_value_idx ON "Goal_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Goal_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Goal_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "GraphDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "start" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_lastUpdated_idx ON "GraphDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_compartments_idx ON "GraphDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_projectId_idx ON "GraphDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition__source_idx ON "GraphDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition__tag_idx ON "GraphDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition__profile_idx ON "GraphDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition__security_idx ON "GraphDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_context_idx ON "GraphDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_contextQuantity_idx ON "GraphDefinition" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_date_idx ON "GraphDefinition" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_description_idx ON "GraphDefinition" ("description")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_name_idx ON "GraphDefinition" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_publisher_idx ON "GraphDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_status_idx ON "GraphDefinition" ("status")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_url_idx ON "GraphDefinition" ("url")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_version_idx ON "GraphDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_contextTypeQuantity_idx ON "GraphDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_contextTypeValue_idx ON "GraphDefinition" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_start_idx ON "GraphDefinition" ("start")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "GraphDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_History_id_idx ON "GraphDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_History_lastUpdated_idx ON "GraphDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "GraphDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_Token_resourceId_idx ON "GraphDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_Token_code_idx ON "GraphDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_Token_system_idx ON "GraphDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GraphDefinition_Token_value_idx ON "GraphDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "GraphDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "GraphDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Group" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "actual" BOOLEAN,
    "exclude" BOOLEAN[],
    "managingEntity" TEXT,
    "member" TEXT[],
    "type" TEXT,
    "value" TEXT[],
    "characteristicValue" TEXT[],
    "name" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_lastUpdated_idx ON "Group" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_compartments_idx ON "Group" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_projectId_idx ON "Group" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group__source_idx ON "Group" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group__tag_idx ON "Group" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group__profile_idx ON "Group" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group__security_idx ON "Group" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_actual_idx ON "Group" ("actual")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_exclude_idx ON "Group" USING gin ("exclude")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_managingEntity_idx ON "Group" ("managingEntity")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_member_idx ON "Group" USING gin ("member")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_type_idx ON "Group" ("type")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_value_idx ON "Group" USING gin ("value")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_characteristicValue_idx ON "Group" USING gin ("characteristicValue")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_name_idx ON "Group" ("name")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Group_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_History_id_idx ON "Group_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_History_lastUpdated_idx ON "Group_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Group_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_Token_resourceId_idx ON "Group_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_Token_code_idx ON "Group_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_Token_system_idx ON "Group_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Group_Token_value_idx ON "Group_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Group_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Group_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "GuidanceResponse" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_lastUpdated_idx ON "GuidanceResponse" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_compartments_idx ON "GuidanceResponse" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_projectId_idx ON "GuidanceResponse" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse__source_idx ON "GuidanceResponse" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse__tag_idx ON "GuidanceResponse" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse__profile_idx ON "GuidanceResponse" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse__security_idx ON "GuidanceResponse" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_patient_idx ON "GuidanceResponse" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_subject_idx ON "GuidanceResponse" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "GuidanceResponse_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_History_id_idx ON "GuidanceResponse_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_History_lastUpdated_idx ON "GuidanceResponse_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "GuidanceResponse_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_Token_resourceId_idx ON "GuidanceResponse_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_Token_code_idx ON "GuidanceResponse_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_Token_system_idx ON "GuidanceResponse_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS GuidanceResponse_Token_value_idx ON "GuidanceResponse_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "GuidanceResponse_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "GuidanceResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "HealthcareService" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "active" BOOLEAN,
    "coverageArea" TEXT[],
    "endpoint" TEXT[],
    "location" TEXT[],
    "name" TEXT,
    "organization" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_lastUpdated_idx ON "HealthcareService" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_compartments_idx ON "HealthcareService" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_projectId_idx ON "HealthcareService" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService__source_idx ON "HealthcareService" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService__tag_idx ON "HealthcareService" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService__profile_idx ON "HealthcareService" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService__security_idx ON "HealthcareService" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_active_idx ON "HealthcareService" ("active")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_coverageArea_idx ON "HealthcareService" USING gin ("coverageArea")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_endpoint_idx ON "HealthcareService" USING gin ("endpoint")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_location_idx ON "HealthcareService" USING gin ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_name_idx ON "HealthcareService" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_organization_idx ON "HealthcareService" ("organization")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "HealthcareService_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_History_id_idx ON "HealthcareService_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_History_lastUpdated_idx ON "HealthcareService_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "HealthcareService_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_Token_resourceId_idx ON "HealthcareService_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_Token_code_idx ON "HealthcareService_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_Token_system_idx ON "HealthcareService_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS HealthcareService_Token_value_idx ON "HealthcareService_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "HealthcareService_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "HealthcareService_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImagingStudy" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "basedon" TEXT[],
    "encounter" TEXT,
    "endpoint" TEXT[],
    "instance" TEXT[],
    "interpreter" TEXT[],
    "performer" TEXT[],
    "referrer" TEXT,
    "series" TEXT[],
    "started" TIMESTAMPTZ,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_lastUpdated_idx ON "ImagingStudy" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_compartments_idx ON "ImagingStudy" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_projectId_idx ON "ImagingStudy" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy__source_idx ON "ImagingStudy" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy__tag_idx ON "ImagingStudy" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy__profile_idx ON "ImagingStudy" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy__security_idx ON "ImagingStudy" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_patient_idx ON "ImagingStudy" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_basedon_idx ON "ImagingStudy" USING gin ("basedon")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_encounter_idx ON "ImagingStudy" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_endpoint_idx ON "ImagingStudy" USING gin ("endpoint")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_instance_idx ON "ImagingStudy" USING gin ("instance")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_interpreter_idx ON "ImagingStudy" USING gin ("interpreter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_performer_idx ON "ImagingStudy" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_referrer_idx ON "ImagingStudy" ("referrer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_series_idx ON "ImagingStudy" USING gin ("series")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_started_idx ON "ImagingStudy" ("started")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_status_idx ON "ImagingStudy" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_subject_idx ON "ImagingStudy" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ImagingStudy_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_History_id_idx ON "ImagingStudy_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_History_lastUpdated_idx ON "ImagingStudy_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImagingStudy_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_Token_resourceId_idx ON "ImagingStudy_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_Token_code_idx ON "ImagingStudy_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_Token_system_idx ON "ImagingStudy_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImagingStudy_Token_value_idx ON "ImagingStudy_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImagingStudy_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ImagingStudy_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Immunization" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "location" TEXT,
    "lotNumber" TEXT,
    "manufacturer" TEXT,
    "performer" TEXT[],
    "reaction" TEXT[],
    "reactionDate" TIMESTAMPTZ[],
    "reasonReference" TEXT[],
    "series" TEXT[],
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_lastUpdated_idx ON "Immunization" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_compartments_idx ON "Immunization" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_projectId_idx ON "Immunization" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization__source_idx ON "Immunization" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization__tag_idx ON "Immunization" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization__profile_idx ON "Immunization" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization__security_idx ON "Immunization" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_date_idx ON "Immunization" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_patient_idx ON "Immunization" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_location_idx ON "Immunization" ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_lotNumber_idx ON "Immunization" ("lotNumber")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_manufacturer_idx ON "Immunization" ("manufacturer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_performer_idx ON "Immunization" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_reaction_idx ON "Immunization" USING gin ("reaction")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_reactionDate_idx ON "Immunization" USING gin ("reactionDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_reasonReference_idx ON "Immunization" USING gin ("reasonReference")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_series_idx ON "Immunization" USING gin ("series")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_status_idx ON "Immunization" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Immunization_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_History_id_idx ON "Immunization_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_History_lastUpdated_idx ON "Immunization_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Immunization_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_Token_resourceId_idx ON "Immunization_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_Token_code_idx ON "Immunization_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_Token_system_idx ON "Immunization_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Immunization_Token_value_idx ON "Immunization_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Immunization_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Immunization_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationEvaluation" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "immunizationEvent" TEXT,
    "patient" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_lastUpdated_idx ON "ImmunizationEvaluation" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_compartments_idx ON "ImmunizationEvaluation" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_projectId_idx ON "ImmunizationEvaluation" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation__source_idx ON "ImmunizationEvaluation" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation__tag_idx ON "ImmunizationEvaluation" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation__profile_idx ON "ImmunizationEvaluation" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation__security_idx ON "ImmunizationEvaluation" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_date_idx ON "ImmunizationEvaluation" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_immunizationEvent_idx ON "ImmunizationEvaluation" ("immunizationEvent")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_patient_idx ON "ImmunizationEvaluation" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_status_idx ON "ImmunizationEvaluation" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationEvaluation_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_History_id_idx ON "ImmunizationEvaluation_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_History_lastUpdated_idx ON "ImmunizationEvaluation_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationEvaluation_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_Token_resourceId_idx ON "ImmunizationEvaluation_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_Token_code_idx ON "ImmunizationEvaluation_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_Token_system_idx ON "ImmunizationEvaluation_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationEvaluation_Token_value_idx ON "ImmunizationEvaluation_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationEvaluation_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ImmunizationEvaluation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationRecommendation" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "information" TEXT[],
    "patient" TEXT,
    "support" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_lastUpdated_idx ON "ImmunizationRecommendation" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_compartments_idx ON "ImmunizationRecommendation" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_projectId_idx ON "ImmunizationRecommendation" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation__source_idx ON "ImmunizationRecommendation" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation__tag_idx ON "ImmunizationRecommendation" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation__profile_idx ON "ImmunizationRecommendation" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation__security_idx ON "ImmunizationRecommendation" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_date_idx ON "ImmunizationRecommendation" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_information_idx ON "ImmunizationRecommendation" USING gin ("information")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_patient_idx ON "ImmunizationRecommendation" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_support_idx ON "ImmunizationRecommendation" USING gin ("support")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationRecommendation_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_History_id_idx ON "ImmunizationRecommendation_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_History_lastUpdated_idx ON "ImmunizationRecommendation_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationRecommendation_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_Token_resourceId_idx ON "ImmunizationRecommendation_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_Token_code_idx ON "ImmunizationRecommendation_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_Token_system_idx ON "ImmunizationRecommendation_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImmunizationRecommendation_Token_value_idx ON "ImmunizationRecommendation_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImmunizationRecommendation_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ImmunizationRecommendation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImplementationGuide" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "dependsOn" TEXT[],
    "experimental" BOOLEAN,
    "global" TEXT[],
    "resource" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_lastUpdated_idx ON "ImplementationGuide" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_compartments_idx ON "ImplementationGuide" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_projectId_idx ON "ImplementationGuide" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide__source_idx ON "ImplementationGuide" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide__tag_idx ON "ImplementationGuide" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide__profile_idx ON "ImplementationGuide" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide__security_idx ON "ImplementationGuide" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_context_idx ON "ImplementationGuide" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_contextQuantity_idx ON "ImplementationGuide" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_date_idx ON "ImplementationGuide" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_description_idx ON "ImplementationGuide" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_name_idx ON "ImplementationGuide" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_publisher_idx ON "ImplementationGuide" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_status_idx ON "ImplementationGuide" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_title_idx ON "ImplementationGuide" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_url_idx ON "ImplementationGuide" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_version_idx ON "ImplementationGuide" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_contextTypeQuantity_idx ON "ImplementationGuide" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_contextTypeValue_idx ON "ImplementationGuide" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_dependsOn_idx ON "ImplementationGuide" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_experimental_idx ON "ImplementationGuide" ("experimental")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_global_idx ON "ImplementationGuide" USING gin ("global")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_resource_idx ON "ImplementationGuide" USING gin ("resource")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImplementationGuide_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_History_id_idx ON "ImplementationGuide_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_History_lastUpdated_idx ON "ImplementationGuide_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImplementationGuide_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_Token_resourceId_idx ON "ImplementationGuide_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_Token_code_idx ON "ImplementationGuide_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_Token_system_idx ON "ImplementationGuide_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ImplementationGuide_Token_value_idx ON "ImplementationGuide_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ImplementationGuide_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ImplementationGuide_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "InsurancePlan" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "administeredBy" TEXT,
    "endpoint" TEXT[],
    "name" TEXT,
    "ownedBy" TEXT,
    "phonetic" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_lastUpdated_idx ON "InsurancePlan" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_compartments_idx ON "InsurancePlan" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_projectId_idx ON "InsurancePlan" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan__source_idx ON "InsurancePlan" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan__tag_idx ON "InsurancePlan" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan__profile_idx ON "InsurancePlan" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan__security_idx ON "InsurancePlan" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_administeredBy_idx ON "InsurancePlan" ("administeredBy")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_endpoint_idx ON "InsurancePlan" USING gin ("endpoint")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_name_idx ON "InsurancePlan" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_ownedBy_idx ON "InsurancePlan" ("ownedBy")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_phonetic_idx ON "InsurancePlan" ("phonetic")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_status_idx ON "InsurancePlan" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "InsurancePlan_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_History_id_idx ON "InsurancePlan_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_History_lastUpdated_idx ON "InsurancePlan_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "InsurancePlan_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_Token_resourceId_idx ON "InsurancePlan_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_Token_code_idx ON "InsurancePlan_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_Token_system_idx ON "InsurancePlan_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS InsurancePlan_Token_value_idx ON "InsurancePlan_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "InsurancePlan_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "InsurancePlan_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Invoice" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "account" TEXT,
    "date" TIMESTAMPTZ,
    "issuer" TEXT,
    "participant" TEXT[],
    "patient" TEXT,
    "recipient" TEXT,
    "status" TEXT,
    "subject" TEXT,
    "totalgross" DOUBLE PRECISION,
    "totalnet" DOUBLE PRECISION
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_lastUpdated_idx ON "Invoice" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_compartments_idx ON "Invoice" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_projectId_idx ON "Invoice" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice__source_idx ON "Invoice" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice__tag_idx ON "Invoice" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice__profile_idx ON "Invoice" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice__security_idx ON "Invoice" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_account_idx ON "Invoice" ("account")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_date_idx ON "Invoice" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_issuer_idx ON "Invoice" ("issuer")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_participant_idx ON "Invoice" USING gin ("participant")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_patient_idx ON "Invoice" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_recipient_idx ON "Invoice" ("recipient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_status_idx ON "Invoice" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_subject_idx ON "Invoice" ("subject")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_totalgross_idx ON "Invoice" ("totalgross")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_totalnet_idx ON "Invoice" ("totalnet")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Invoice_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_History_id_idx ON "Invoice_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_History_lastUpdated_idx ON "Invoice_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Invoice_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_Token_resourceId_idx ON "Invoice_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_Token_code_idx ON "Invoice_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_Token_system_idx ON "Invoice_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Invoice_Token_value_idx ON "Invoice_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Invoice_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Invoice_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Library" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "contentType" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_lastUpdated_idx ON "Library" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_compartments_idx ON "Library" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_projectId_idx ON "Library" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library__source_idx ON "Library" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library__tag_idx ON "Library" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library__profile_idx ON "Library" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library__security_idx ON "Library" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_composedOf_idx ON "Library" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_contentType_idx ON "Library" USING gin ("contentType")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_context_idx ON "Library" USING gin ("context")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_contextQuantity_idx ON "Library" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_date_idx ON "Library" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_dependsOn_idx ON "Library" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_derivedFrom_idx ON "Library" USING gin ("derivedFrom")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_description_idx ON "Library" ("description")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_effective_idx ON "Library" ("effective")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_name_idx ON "Library" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_predecessor_idx ON "Library" USING gin ("predecessor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_publisher_idx ON "Library" ("publisher")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_status_idx ON "Library" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_successor_idx ON "Library" USING gin ("successor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_title_idx ON "Library" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_url_idx ON "Library" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_version_idx ON "Library" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_contextTypeQuantity_idx ON "Library" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_contextTypeValue_idx ON "Library" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Library_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_History_id_idx ON "Library_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_History_lastUpdated_idx ON "Library_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Library_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_Token_resourceId_idx ON "Library_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_Token_code_idx ON "Library_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_Token_system_idx ON "Library_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Library_Token_value_idx ON "Library_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Library_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Library_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Linkage" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "author" TEXT,
    "item" TEXT[],
    "source" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_lastUpdated_idx ON "Linkage" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_compartments_idx ON "Linkage" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_projectId_idx ON "Linkage" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage__source_idx ON "Linkage" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage__tag_idx ON "Linkage" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage__profile_idx ON "Linkage" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage__security_idx ON "Linkage" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_author_idx ON "Linkage" ("author")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_item_idx ON "Linkage" USING gin ("item")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_source_idx ON "Linkage" USING gin ("source")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Linkage_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_History_id_idx ON "Linkage_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_History_lastUpdated_idx ON "Linkage_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Linkage_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_Token_resourceId_idx ON "Linkage_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_Token_code_idx ON "Linkage_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_Token_system_idx ON "Linkage_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Linkage_Token_value_idx ON "Linkage_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Linkage_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Linkage_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "List" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "encounter" TEXT,
    "item" TEXT[],
    "notes" TEXT[],
    "source" TEXT,
    "status" TEXT,
    "subject" TEXT,
    "title" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_lastUpdated_idx ON "List" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS List_compartments_idx ON "List" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_projectId_idx ON "List" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List__source_idx ON "List" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List__tag_idx ON "List" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List__profile_idx ON "List" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List__security_idx ON "List" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_date_idx ON "List" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_patient_idx ON "List" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_encounter_idx ON "List" ("encounter")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_item_idx ON "List" USING gin ("item")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_notes_idx ON "List" USING gin ("notes")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_source_idx ON "List" ("source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_status_idx ON "List" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_subject_idx ON "List" ("subject")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_title_idx ON "List" ("title")');

  await client.query(`CREATE TABLE IF NOT EXISTS "List_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_History_id_idx ON "List_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS List_History_lastUpdated_idx ON "List_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "List_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS List_Token_resourceId_idx ON "List_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_Token_code_idx ON "List_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_Token_system_idx ON "List_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS List_Token_value_idx ON "List_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "List_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "List_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Location" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "endpoint" TEXT[],
    "name" TEXT[],
    "near" TEXT,
    "organization" TEXT,
    "partof" TEXT,
    "status" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_lastUpdated_idx ON "Location" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_compartments_idx ON "Location" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_projectId_idx ON "Location" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location__source_idx ON "Location" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location__tag_idx ON "Location" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Location__profile_idx ON "Location" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location__security_idx ON "Location" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_endpoint_idx ON "Location" USING gin ("endpoint")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_name_idx ON "Location" USING gin ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_near_idx ON "Location" ("near")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_organization_idx ON "Location" ("organization")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_partof_idx ON "Location" ("partof")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_status_idx ON "Location" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Location_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_History_id_idx ON "Location_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_History_lastUpdated_idx ON "Location_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Location_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_Token_resourceId_idx ON "Location_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_Token_code_idx ON "Location_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_Token_system_idx ON "Location_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Location_Token_value_idx ON "Location_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Location_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Location_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Measure" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_lastUpdated_idx ON "Measure" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_compartments_idx ON "Measure" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_projectId_idx ON "Measure" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure__source_idx ON "Measure" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure__tag_idx ON "Measure" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure__profile_idx ON "Measure" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure__security_idx ON "Measure" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_composedOf_idx ON "Measure" USING gin ("composedOf")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_context_idx ON "Measure" USING gin ("context")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_contextQuantity_idx ON "Measure" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_date_idx ON "Measure" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_dependsOn_idx ON "Measure" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_derivedFrom_idx ON "Measure" USING gin ("derivedFrom")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_description_idx ON "Measure" ("description")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_effective_idx ON "Measure" ("effective")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_name_idx ON "Measure" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_predecessor_idx ON "Measure" USING gin ("predecessor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_publisher_idx ON "Measure" ("publisher")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_status_idx ON "Measure" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_successor_idx ON "Measure" USING gin ("successor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_title_idx ON "Measure" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_url_idx ON "Measure" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_version_idx ON "Measure" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_contextTypeQuantity_idx ON "Measure" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_contextTypeValue_idx ON "Measure" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Measure_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_History_id_idx ON "Measure_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_History_lastUpdated_idx ON "Measure_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Measure_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_Token_resourceId_idx ON "Measure_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_Token_code_idx ON "Measure_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_Token_system_idx ON "Measure_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Measure_Token_value_idx ON "Measure_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Measure_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Measure_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "MeasureReport" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "evaluatedResource" TEXT[],
    "measure" TEXT,
    "patient" TEXT,
    "period" TIMESTAMPTZ,
    "reporter" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_lastUpdated_idx ON "MeasureReport" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_compartments_idx ON "MeasureReport" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_projectId_idx ON "MeasureReport" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport__source_idx ON "MeasureReport" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport__tag_idx ON "MeasureReport" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport__profile_idx ON "MeasureReport" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport__security_idx ON "MeasureReport" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_date_idx ON "MeasureReport" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_evaluatedResource_idx ON "MeasureReport" USING gin ("evaluatedResource")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_measure_idx ON "MeasureReport" ("measure")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_patient_idx ON "MeasureReport" ("patient")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_period_idx ON "MeasureReport" ("period")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_reporter_idx ON "MeasureReport" ("reporter")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_status_idx ON "MeasureReport" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_subject_idx ON "MeasureReport" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MeasureReport_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_History_id_idx ON "MeasureReport_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_History_lastUpdated_idx ON "MeasureReport_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MeasureReport_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_Token_resourceId_idx ON "MeasureReport_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_Token_code_idx ON "MeasureReport_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_Token_system_idx ON "MeasureReport_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MeasureReport_Token_value_idx ON "MeasureReport_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MeasureReport_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MeasureReport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Media" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "basedOn" TEXT[],
    "created" TIMESTAMPTZ,
    "device" TEXT,
    "encounter" TEXT,
    "operator" TEXT,
    "patient" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_lastUpdated_idx ON "Media" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_compartments_idx ON "Media" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_projectId_idx ON "Media" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media__source_idx ON "Media" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media__tag_idx ON "Media" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media__profile_idx ON "Media" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media__security_idx ON "Media" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_basedOn_idx ON "Media" USING gin ("basedOn")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_created_idx ON "Media" ("created")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_device_idx ON "Media" ("device")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_encounter_idx ON "Media" ("encounter")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_operator_idx ON "Media" ("operator")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_patient_idx ON "Media" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_status_idx ON "Media" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_subject_idx ON "Media" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Media_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_History_id_idx ON "Media_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_History_lastUpdated_idx ON "Media_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Media_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_Token_resourceId_idx ON "Media_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_Token_code_idx ON "Media_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_Token_system_idx ON "Media_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Media_Token_value_idx ON "Media_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Media_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Media_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Medication" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "expirationDate" TIMESTAMPTZ,
    "ingredient" TEXT[],
    "ingredientCode" TEXT[],
    "lotNumber" TEXT,
    "manufacturer" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_lastUpdated_idx ON "Medication" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_compartments_idx ON "Medication" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_projectId_idx ON "Medication" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication__source_idx ON "Medication" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication__tag_idx ON "Medication" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication__profile_idx ON "Medication" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication__security_idx ON "Medication" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_expirationDate_idx ON "Medication" ("expirationDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_ingredient_idx ON "Medication" USING gin ("ingredient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_ingredientCode_idx ON "Medication" USING gin ("ingredientCode")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_lotNumber_idx ON "Medication" ("lotNumber")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_manufacturer_idx ON "Medication" ("manufacturer")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_status_idx ON "Medication" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Medication_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_History_id_idx ON "Medication_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_History_lastUpdated_idx ON "Medication_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Medication_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_Token_resourceId_idx ON "Medication_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_Token_code_idx ON "Medication_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_Token_system_idx ON "Medication_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Medication_Token_value_idx ON "Medication_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Medication_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Medication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationAdministration" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "code" TEXT,
    "patient" TEXT,
    "context" TEXT,
    "device" TEXT[],
    "effectiveTime" TIMESTAMPTZ,
    "medication" TEXT,
    "performer" TEXT[],
    "request" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_lastUpdated_idx ON "MedicationAdministration" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_compartments_idx ON "MedicationAdministration" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_projectId_idx ON "MedicationAdministration" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration__source_idx ON "MedicationAdministration" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration__tag_idx ON "MedicationAdministration" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration__profile_idx ON "MedicationAdministration" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration__security_idx ON "MedicationAdministration" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_code_idx ON "MedicationAdministration" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_patient_idx ON "MedicationAdministration" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_context_idx ON "MedicationAdministration" ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_device_idx ON "MedicationAdministration" USING gin ("device")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_effectiveTime_idx ON "MedicationAdministration" ("effectiveTime")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_medication_idx ON "MedicationAdministration" ("medication")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_performer_idx ON "MedicationAdministration" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_request_idx ON "MedicationAdministration" ("request")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_status_idx ON "MedicationAdministration" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_subject_idx ON "MedicationAdministration" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationAdministration_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_History_id_idx ON "MedicationAdministration_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_History_lastUpdated_idx ON "MedicationAdministration_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationAdministration_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_Token_resourceId_idx ON "MedicationAdministration_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_Token_code_idx ON "MedicationAdministration_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_Token_system_idx ON "MedicationAdministration_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationAdministration_Token_value_idx ON "MedicationAdministration_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationAdministration_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicationAdministration_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationDispense" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "code" TEXT,
    "patient" TEXT,
    "medication" TEXT,
    "status" TEXT,
    "context" TEXT,
    "destination" TEXT,
    "performer" TEXT[],
    "prescription" TEXT[],
    "receiver" TEXT[],
    "responsibleparty" TEXT[],
    "subject" TEXT,
    "whenhandedover" TIMESTAMPTZ,
    "whenprepared" TIMESTAMPTZ
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_lastUpdated_idx ON "MedicationDispense" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_compartments_idx ON "MedicationDispense" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_projectId_idx ON "MedicationDispense" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense__source_idx ON "MedicationDispense" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense__tag_idx ON "MedicationDispense" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense__profile_idx ON "MedicationDispense" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense__security_idx ON "MedicationDispense" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_code_idx ON "MedicationDispense" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_patient_idx ON "MedicationDispense" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_medication_idx ON "MedicationDispense" ("medication")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_status_idx ON "MedicationDispense" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_context_idx ON "MedicationDispense" ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_destination_idx ON "MedicationDispense" ("destination")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_performer_idx ON "MedicationDispense" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_prescription_idx ON "MedicationDispense" USING gin ("prescription")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_receiver_idx ON "MedicationDispense" USING gin ("receiver")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_responsibleparty_idx ON "MedicationDispense" USING gin ("responsibleparty")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_subject_idx ON "MedicationDispense" ("subject")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_whenhandedover_idx ON "MedicationDispense" ("whenhandedover")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_whenprepared_idx ON "MedicationDispense" ("whenprepared")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationDispense_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_History_id_idx ON "MedicationDispense_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_History_lastUpdated_idx ON "MedicationDispense_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationDispense_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_Token_resourceId_idx ON "MedicationDispense_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_Token_code_idx ON "MedicationDispense_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_Token_system_idx ON "MedicationDispense_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationDispense_Token_value_idx ON "MedicationDispense_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationDispense_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicationDispense_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationKnowledge" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "ingredient" TEXT[],
    "ingredientCode" TEXT[],
    "manufacturer" TEXT,
    "monitoringProgramName" TEXT[],
    "monograph" TEXT[],
    "sourceCost" TEXT[],
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_lastUpdated_idx ON "MedicationKnowledge" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_compartments_idx ON "MedicationKnowledge" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_projectId_idx ON "MedicationKnowledge" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge__source_idx ON "MedicationKnowledge" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge__tag_idx ON "MedicationKnowledge" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge__profile_idx ON "MedicationKnowledge" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge__security_idx ON "MedicationKnowledge" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_ingredient_idx ON "MedicationKnowledge" USING gin ("ingredient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_ingredientCode_idx ON "MedicationKnowledge" USING gin ("ingredientCode")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_manufacturer_idx ON "MedicationKnowledge" ("manufacturer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_monitoringProgramName_idx ON "MedicationKnowledge" USING gin ("monitoringProgramName")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_monograph_idx ON "MedicationKnowledge" USING gin ("monograph")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_sourceCost_idx ON "MedicationKnowledge" USING gin ("sourceCost")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_status_idx ON "MedicationKnowledge" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationKnowledge_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_History_id_idx ON "MedicationKnowledge_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_History_lastUpdated_idx ON "MedicationKnowledge_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationKnowledge_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_Token_resourceId_idx ON "MedicationKnowledge_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_Token_code_idx ON "MedicationKnowledge_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_Token_system_idx ON "MedicationKnowledge_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationKnowledge_Token_value_idx ON "MedicationKnowledge_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationKnowledge_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicationKnowledge_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "code" TEXT,
    "patient" TEXT,
    "medication" TEXT,
    "status" TEXT,
    "authoredon" TIMESTAMPTZ,
    "date" TIMESTAMPTZ[],
    "encounter" TEXT,
    "intendedDispenser" TEXT,
    "intendedPerformer" TEXT,
    "intent" TEXT,
    "priority" TEXT,
    "requester" TEXT,
    "subject" TEXT,
    "priorityOrder" INTEGER
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_lastUpdated_idx ON "MedicationRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_compartments_idx ON "MedicationRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_projectId_idx ON "MedicationRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest__source_idx ON "MedicationRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest__tag_idx ON "MedicationRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest__profile_idx ON "MedicationRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest__security_idx ON "MedicationRequest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_code_idx ON "MedicationRequest" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_patient_idx ON "MedicationRequest" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_medication_idx ON "MedicationRequest" ("medication")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_status_idx ON "MedicationRequest" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_authoredon_idx ON "MedicationRequest" ("authoredon")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_date_idx ON "MedicationRequest" USING gin ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_encounter_idx ON "MedicationRequest" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_intendedDispenser_idx ON "MedicationRequest" ("intendedDispenser")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_intendedPerformer_idx ON "MedicationRequest" ("intendedPerformer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_intent_idx ON "MedicationRequest" ("intent")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_priority_idx ON "MedicationRequest" ("priority")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_requester_idx ON "MedicationRequest" ("requester")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_subject_idx ON "MedicationRequest" ("subject")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_priorityOrder_idx ON "MedicationRequest" ("priorityOrder")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_History_id_idx ON "MedicationRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_History_lastUpdated_idx ON "MedicationRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_Token_resourceId_idx ON "MedicationRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_Token_code_idx ON "MedicationRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_Token_system_idx ON "MedicationRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationRequest_Token_value_idx ON "MedicationRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicationRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationStatement" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "code" TEXT,
    "patient" TEXT,
    "medication" TEXT,
    "status" TEXT,
    "context" TEXT,
    "effective" TIMESTAMPTZ,
    "partOf" TEXT[],
    "source" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_lastUpdated_idx ON "MedicationStatement" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_compartments_idx ON "MedicationStatement" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_projectId_idx ON "MedicationStatement" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement__source_idx ON "MedicationStatement" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement__tag_idx ON "MedicationStatement" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement__profile_idx ON "MedicationStatement" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement__security_idx ON "MedicationStatement" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_code_idx ON "MedicationStatement" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_patient_idx ON "MedicationStatement" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_medication_idx ON "MedicationStatement" ("medication")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_status_idx ON "MedicationStatement" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_context_idx ON "MedicationStatement" ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_effective_idx ON "MedicationStatement" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_partOf_idx ON "MedicationStatement" USING gin ("partOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_source_idx ON "MedicationStatement" ("source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_subject_idx ON "MedicationStatement" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationStatement_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_History_id_idx ON "MedicationStatement_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_History_lastUpdated_idx ON "MedicationStatement_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationStatement_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_Token_resourceId_idx ON "MedicationStatement_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_Token_code_idx ON "MedicationStatement_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_Token_system_idx ON "MedicationStatement_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicationStatement_Token_value_idx ON "MedicationStatement_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicationStatement_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicationStatement_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProduct" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_lastUpdated_idx ON "MedicinalProduct" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_compartments_idx ON "MedicinalProduct" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_projectId_idx ON "MedicinalProduct" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct__source_idx ON "MedicinalProduct" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct__tag_idx ON "MedicinalProduct" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct__profile_idx ON "MedicinalProduct" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct__security_idx ON "MedicinalProduct" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_name_idx ON "MedicinalProduct" USING gin ("name")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProduct_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_History_id_idx ON "MedicinalProduct_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_History_lastUpdated_idx ON "MedicinalProduct_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProduct_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_Token_resourceId_idx ON "MedicinalProduct_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_Token_code_idx ON "MedicinalProduct_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_Token_system_idx ON "MedicinalProduct_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProduct_Token_value_idx ON "MedicinalProduct_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProduct_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProduct_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductAuthorization" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "holder" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_lastUpdated_idx ON "MedicinalProductAuthorization" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_compartments_idx ON "MedicinalProductAuthorization" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_projectId_idx ON "MedicinalProductAuthorization" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization__source_idx ON "MedicinalProductAuthorization" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization__tag_idx ON "MedicinalProductAuthorization" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization__profile_idx ON "MedicinalProductAuthorization" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization__security_idx ON "MedicinalProductAuthorization" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_holder_idx ON "MedicinalProductAuthorization" ("holder")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_subject_idx ON "MedicinalProductAuthorization" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductAuthorization_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_History_id_idx ON "MedicinalProductAuthorization_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_History_lastUpdated_idx ON "MedicinalProductAuthorization_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductAuthorization_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_Token_resourceId_idx ON "MedicinalProductAuthorization_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_Token_code_idx ON "MedicinalProductAuthorization_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_Token_system_idx ON "MedicinalProductAuthorization_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductAuthorization_Token_value_idx ON "MedicinalProductAuthorization_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductAuthorization_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductAuthorization_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductContraindication" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "subject" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_lastUpdated_idx ON "MedicinalProductContraindication" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_compartments_idx ON "MedicinalProductContraindication" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_projectId_idx ON "MedicinalProductContraindication" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication__source_idx ON "MedicinalProductContraindication" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication__tag_idx ON "MedicinalProductContraindication" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication__profile_idx ON "MedicinalProductContraindication" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication__security_idx ON "MedicinalProductContraindication" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_subject_idx ON "MedicinalProductContraindication" USING gin ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductContraindication_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_History_id_idx ON "MedicinalProductContraindication_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_History_lastUpdated_idx ON "MedicinalProductContraindication_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductContraindication_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_Token_resourceId_idx ON "MedicinalProductContraindication_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_Token_code_idx ON "MedicinalProductContraindication_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_Token_system_idx ON "MedicinalProductContraindication_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductContraindication_Token_value_idx ON "MedicinalProductContraindication_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductContraindication_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductContraindication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIndication" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "subject" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_lastUpdated_idx ON "MedicinalProductIndication" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_compartments_idx ON "MedicinalProductIndication" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_projectId_idx ON "MedicinalProductIndication" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication__source_idx ON "MedicinalProductIndication" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication__tag_idx ON "MedicinalProductIndication" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication__profile_idx ON "MedicinalProductIndication" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication__security_idx ON "MedicinalProductIndication" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_subject_idx ON "MedicinalProductIndication" USING gin ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIndication_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_History_id_idx ON "MedicinalProductIndication_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_History_lastUpdated_idx ON "MedicinalProductIndication_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIndication_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_Token_resourceId_idx ON "MedicinalProductIndication_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_Token_code_idx ON "MedicinalProductIndication_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_Token_system_idx ON "MedicinalProductIndication_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIndication_Token_value_idx ON "MedicinalProductIndication_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIndication_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductIndication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIngredient" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_lastUpdated_idx ON "MedicinalProductIngredient" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_compartments_idx ON "MedicinalProductIngredient" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_projectId_idx ON "MedicinalProductIngredient" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient__source_idx ON "MedicinalProductIngredient" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient__tag_idx ON "MedicinalProductIngredient" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient__profile_idx ON "MedicinalProductIngredient" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient__security_idx ON "MedicinalProductIngredient" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIngredient_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_History_id_idx ON "MedicinalProductIngredient_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_History_lastUpdated_idx ON "MedicinalProductIngredient_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIngredient_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_Token_resourceId_idx ON "MedicinalProductIngredient_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_Token_code_idx ON "MedicinalProductIngredient_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_Token_system_idx ON "MedicinalProductIngredient_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductIngredient_Token_value_idx ON "MedicinalProductIngredient_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductIngredient_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductIngredient_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductInteraction" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "subject" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_lastUpdated_idx ON "MedicinalProductInteraction" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_compartments_idx ON "MedicinalProductInteraction" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_projectId_idx ON "MedicinalProductInteraction" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction__source_idx ON "MedicinalProductInteraction" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction__tag_idx ON "MedicinalProductInteraction" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction__profile_idx ON "MedicinalProductInteraction" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction__security_idx ON "MedicinalProductInteraction" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_subject_idx ON "MedicinalProductInteraction" USING gin ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductInteraction_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_History_id_idx ON "MedicinalProductInteraction_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_History_lastUpdated_idx ON "MedicinalProductInteraction_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductInteraction_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_Token_resourceId_idx ON "MedicinalProductInteraction_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_Token_code_idx ON "MedicinalProductInteraction_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_Token_system_idx ON "MedicinalProductInteraction_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductInteraction_Token_value_idx ON "MedicinalProductInteraction_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductInteraction_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductInteraction_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductManufactured" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_lastUpdated_idx ON "MedicinalProductManufactured" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_compartments_idx ON "MedicinalProductManufactured" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_projectId_idx ON "MedicinalProductManufactured" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured__source_idx ON "MedicinalProductManufactured" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured__tag_idx ON "MedicinalProductManufactured" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured__profile_idx ON "MedicinalProductManufactured" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured__security_idx ON "MedicinalProductManufactured" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductManufactured_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_History_id_idx ON "MedicinalProductManufactured_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_History_lastUpdated_idx ON "MedicinalProductManufactured_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductManufactured_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_Token_resourceId_idx ON "MedicinalProductManufactured_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_Token_code_idx ON "MedicinalProductManufactured_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_Token_system_idx ON "MedicinalProductManufactured_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductManufactured_Token_value_idx ON "MedicinalProductManufactured_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductManufactured_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductManufactured_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPackaged" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "subject" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_lastUpdated_idx ON "MedicinalProductPackaged" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_compartments_idx ON "MedicinalProductPackaged" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_projectId_idx ON "MedicinalProductPackaged" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged__source_idx ON "MedicinalProductPackaged" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged__tag_idx ON "MedicinalProductPackaged" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged__profile_idx ON "MedicinalProductPackaged" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged__security_idx ON "MedicinalProductPackaged" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_subject_idx ON "MedicinalProductPackaged" USING gin ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPackaged_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_History_id_idx ON "MedicinalProductPackaged_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_History_lastUpdated_idx ON "MedicinalProductPackaged_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPackaged_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_Token_resourceId_idx ON "MedicinalProductPackaged_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_Token_code_idx ON "MedicinalProductPackaged_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_Token_system_idx ON "MedicinalProductPackaged_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPackaged_Token_value_idx ON "MedicinalProductPackaged_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPackaged_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductPackaged_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPharmaceutical" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_lastUpdated_idx ON "MedicinalProductPharmaceutical" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_compartments_idx ON "MedicinalProductPharmaceutical" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_projectId_idx ON "MedicinalProductPharmaceutical" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical__source_idx ON "MedicinalProductPharmaceutical" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical__tag_idx ON "MedicinalProductPharmaceutical" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical__profile_idx ON "MedicinalProductPharmaceutical" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical__security_idx ON "MedicinalProductPharmaceutical" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPharmaceutical_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_History_id_idx ON "MedicinalProductPharmaceutical_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_History_lastUpdated_idx ON "MedicinalProductPharmaceutical_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPharmaceutical_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_Token_resourceId_idx ON "MedicinalProductPharmaceutical_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_Token_code_idx ON "MedicinalProductPharmaceutical_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_Token_system_idx ON "MedicinalProductPharmaceutical_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductPharmaceutical_Token_value_idx ON "MedicinalProductPharmaceutical_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductPharmaceutical_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductPharmaceutical_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductUndesirableEffect" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "subject" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_lastUpdated_idx ON "MedicinalProductUndesirableEffect" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_compartments_idx ON "MedicinalProductUndesirableEffect" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_projectId_idx ON "MedicinalProductUndesirableEffect" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect__source_idx ON "MedicinalProductUndesirableEffect" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect__tag_idx ON "MedicinalProductUndesirableEffect" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect__profile_idx ON "MedicinalProductUndesirableEffect" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect__security_idx ON "MedicinalProductUndesirableEffect" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_subject_idx ON "MedicinalProductUndesirableEffect" USING gin ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductUndesirableEffect_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_History_id_idx ON "MedicinalProductUndesirableEffect_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_History_lastUpdated_idx ON "MedicinalProductUndesirableEffect_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductUndesirableEffect_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_Token_resourceId_idx ON "MedicinalProductUndesirableEffect_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_Token_code_idx ON "MedicinalProductUndesirableEffect_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_Token_system_idx ON "MedicinalProductUndesirableEffect_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MedicinalProductUndesirableEffect_Token_value_idx ON "MedicinalProductUndesirableEffect_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MedicinalProductUndesirableEffect_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MedicinalProductUndesirableEffect_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "category" TEXT,
    "focus" TEXT[],
    "parent" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_lastUpdated_idx ON "MessageDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_compartments_idx ON "MessageDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_projectId_idx ON "MessageDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition__source_idx ON "MessageDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition__tag_idx ON "MessageDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition__profile_idx ON "MessageDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition__security_idx ON "MessageDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_context_idx ON "MessageDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_contextQuantity_idx ON "MessageDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_date_idx ON "MessageDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_description_idx ON "MessageDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_name_idx ON "MessageDefinition" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_publisher_idx ON "MessageDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_status_idx ON "MessageDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_title_idx ON "MessageDefinition" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_url_idx ON "MessageDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_version_idx ON "MessageDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_contextTypeQuantity_idx ON "MessageDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_contextTypeValue_idx ON "MessageDefinition" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_category_idx ON "MessageDefinition" ("category")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_focus_idx ON "MessageDefinition" USING gin ("focus")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_parent_idx ON "MessageDefinition" USING gin ("parent")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_History_id_idx ON "MessageDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_History_lastUpdated_idx ON "MessageDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_Token_resourceId_idx ON "MessageDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_Token_code_idx ON "MessageDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_Token_system_idx ON "MessageDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageDefinition_Token_value_idx ON "MessageDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MessageDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageHeader" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "author" TEXT,
    "code" TEXT,
    "destination" TEXT[],
    "destinationUri" TEXT[],
    "enterer" TEXT,
    "focus" TEXT[],
    "receiver" TEXT[],
    "responseId" TEXT,
    "responsible" TEXT,
    "sender" TEXT,
    "source" TEXT,
    "sourceUri" TEXT,
    "target" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_lastUpdated_idx ON "MessageHeader" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_compartments_idx ON "MessageHeader" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_projectId_idx ON "MessageHeader" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader__source_idx ON "MessageHeader" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader__tag_idx ON "MessageHeader" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader__profile_idx ON "MessageHeader" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader__security_idx ON "MessageHeader" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_author_idx ON "MessageHeader" ("author")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_code_idx ON "MessageHeader" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_destination_idx ON "MessageHeader" USING gin ("destination")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_destinationUri_idx ON "MessageHeader" USING gin ("destinationUri")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_enterer_idx ON "MessageHeader" ("enterer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_focus_idx ON "MessageHeader" USING gin ("focus")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_receiver_idx ON "MessageHeader" USING gin ("receiver")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_responseId_idx ON "MessageHeader" ("responseId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_responsible_idx ON "MessageHeader" ("responsible")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_sender_idx ON "MessageHeader" ("sender")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_source_idx ON "MessageHeader" ("source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_sourceUri_idx ON "MessageHeader" ("sourceUri")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_target_idx ON "MessageHeader" USING gin ("target")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageHeader_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_History_id_idx ON "MessageHeader_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_History_lastUpdated_idx ON "MessageHeader_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageHeader_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_Token_resourceId_idx ON "MessageHeader_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_Token_code_idx ON "MessageHeader_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_Token_system_idx ON "MessageHeader_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MessageHeader_Token_value_idx ON "MessageHeader_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MessageHeader_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MessageHeader_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MolecularSequence" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "type" TEXT,
    "variantEnd" DOUBLE PRECISION[],
    "variantStart" DOUBLE PRECISION[],
    "windowEnd" DOUBLE PRECISION,
    "windowStart" DOUBLE PRECISION,
    "chromosomeVariantCoordinate" TEXT[],
    "chromosomeWindowCoordinate" TEXT,
    "referenceseqidVariantCoordinate" TEXT[],
    "referenceseqidWindowCoordinate" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_lastUpdated_idx ON "MolecularSequence" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_compartments_idx ON "MolecularSequence" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_projectId_idx ON "MolecularSequence" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence__source_idx ON "MolecularSequence" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence__tag_idx ON "MolecularSequence" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence__profile_idx ON "MolecularSequence" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence__security_idx ON "MolecularSequence" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_patient_idx ON "MolecularSequence" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_type_idx ON "MolecularSequence" ("type")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_variantEnd_idx ON "MolecularSequence" USING gin ("variantEnd")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_variantStart_idx ON "MolecularSequence" USING gin ("variantStart")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_windowEnd_idx ON "MolecularSequence" ("windowEnd")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_windowStart_idx ON "MolecularSequence" ("windowStart")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_chromosomeVariantCoordinate_idx ON "MolecularSequence" USING gin ("chromosomeVariantCoordinate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_chromosomeWindowCoordinate_idx ON "MolecularSequence" ("chromosomeWindowCoordinate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_referenceseqidVariantCoordinate_idx ON "MolecularSequence" USING gin ("referenceseqidVariantCoordinate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_referenceseqidWindowCoordinate_idx ON "MolecularSequence" ("referenceseqidWindowCoordinate")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MolecularSequence_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_History_id_idx ON "MolecularSequence_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_History_lastUpdated_idx ON "MolecularSequence_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MolecularSequence_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_Token_resourceId_idx ON "MolecularSequence_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_Token_code_idx ON "MolecularSequence_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_Token_system_idx ON "MolecularSequence_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS MolecularSequence_Token_value_idx ON "MolecularSequence_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "MolecularSequence_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "MolecularSequence_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NamingSystem" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "contact" TEXT[],
    "idType" TEXT[],
    "kind" TEXT,
    "period" TIMESTAMPTZ[],
    "responsible" TEXT,
    "value" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_lastUpdated_idx ON "NamingSystem" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_compartments_idx ON "NamingSystem" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_projectId_idx ON "NamingSystem" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem__source_idx ON "NamingSystem" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem__tag_idx ON "NamingSystem" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem__profile_idx ON "NamingSystem" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem__security_idx ON "NamingSystem" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_context_idx ON "NamingSystem" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_contextQuantity_idx ON "NamingSystem" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_date_idx ON "NamingSystem" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_description_idx ON "NamingSystem" ("description")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_name_idx ON "NamingSystem" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_publisher_idx ON "NamingSystem" ("publisher")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_status_idx ON "NamingSystem" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_contextTypeQuantity_idx ON "NamingSystem" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_contextTypeValue_idx ON "NamingSystem" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_contact_idx ON "NamingSystem" USING gin ("contact")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_idType_idx ON "NamingSystem" USING gin ("idType")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_kind_idx ON "NamingSystem" ("kind")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_period_idx ON "NamingSystem" USING gin ("period")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_responsible_idx ON "NamingSystem" ("responsible")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_value_idx ON "NamingSystem" USING gin ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NamingSystem_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_History_id_idx ON "NamingSystem_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_History_lastUpdated_idx ON "NamingSystem_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NamingSystem_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_Token_resourceId_idx ON "NamingSystem_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_Token_code_idx ON "NamingSystem_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_Token_system_idx ON "NamingSystem_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NamingSystem_Token_value_idx ON "NamingSystem_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NamingSystem_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "NamingSystem_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NutritionOrder" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "encounter" TEXT,
    "datetime" TIMESTAMPTZ,
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "provider" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_lastUpdated_idx ON "NutritionOrder" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_compartments_idx ON "NutritionOrder" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_projectId_idx ON "NutritionOrder" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder__source_idx ON "NutritionOrder" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder__tag_idx ON "NutritionOrder" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder__profile_idx ON "NutritionOrder" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder__security_idx ON "NutritionOrder" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_patient_idx ON "NutritionOrder" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_encounter_idx ON "NutritionOrder" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_datetime_idx ON "NutritionOrder" ("datetime")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_instantiatesCanonical_idx ON "NutritionOrder" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_instantiatesUri_idx ON "NutritionOrder" USING gin ("instantiatesUri")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_provider_idx ON "NutritionOrder" ("provider")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_status_idx ON "NutritionOrder" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NutritionOrder_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_History_id_idx ON "NutritionOrder_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_History_lastUpdated_idx ON "NutritionOrder_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NutritionOrder_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_Token_resourceId_idx ON "NutritionOrder_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_Token_code_idx ON "NutritionOrder_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_Token_system_idx ON "NutritionOrder_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS NutritionOrder_Token_value_idx ON "NutritionOrder_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "NutritionOrder_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "NutritionOrder_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Observation" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "encounter" TEXT,
    "basedOn" TEXT[],
    "comboValueConcept" TEXT[],
    "comboValueQuantity" DOUBLE PRECISION[],
    "componentValueConcept" TEXT[],
    "componentValueQuantity" DOUBLE PRECISION[],
    "derivedFrom" TEXT[],
    "device" TEXT,
    "focus" TEXT[],
    "hasMember" TEXT[],
    "partOf" TEXT[],
    "performer" TEXT[],
    "specimen" TEXT,
    "status" TEXT,
    "subject" TEXT,
    "valueConcept" TEXT,
    "valueDate" TIMESTAMPTZ,
    "valueQuantity" DOUBLE PRECISION,
    "valueString" TEXT,
    "codeValueConcept" TEXT,
    "codeValueDate" TEXT,
    "codeValueQuantity" TEXT,
    "codeValueString" TEXT,
    "comboCodeValueConcept" TEXT[],
    "comboCodeValueQuantity" TEXT[],
    "componentCodeValueConcept" TEXT[],
    "componentCodeValueQuantity" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_lastUpdated_idx ON "Observation" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_compartments_idx ON "Observation" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_projectId_idx ON "Observation" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation__source_idx ON "Observation" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation__tag_idx ON "Observation" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation__profile_idx ON "Observation" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation__security_idx ON "Observation" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_date_idx ON "Observation" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_patient_idx ON "Observation" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_encounter_idx ON "Observation" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_basedOn_idx ON "Observation" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_comboValueConcept_idx ON "Observation" USING gin ("comboValueConcept")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_comboValueQuantity_idx ON "Observation" USING gin ("comboValueQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_componentValueConcept_idx ON "Observation" USING gin ("componentValueConcept")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_componentValueQuantity_idx ON "Observation" USING gin ("componentValueQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_derivedFrom_idx ON "Observation" USING gin ("derivedFrom")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_device_idx ON "Observation" ("device")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_focus_idx ON "Observation" USING gin ("focus")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_hasMember_idx ON "Observation" USING gin ("hasMember")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_partOf_idx ON "Observation" USING gin ("partOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_performer_idx ON "Observation" USING gin ("performer")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_specimen_idx ON "Observation" ("specimen")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_status_idx ON "Observation" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_subject_idx ON "Observation" ("subject")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_valueConcept_idx ON "Observation" ("valueConcept")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_valueDate_idx ON "Observation" ("valueDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_valueQuantity_idx ON "Observation" ("valueQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_valueString_idx ON "Observation" ("valueString")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_codeValueConcept_idx ON "Observation" ("codeValueConcept")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_codeValueDate_idx ON "Observation" ("codeValueDate")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_codeValueQuantity_idx ON "Observation" ("codeValueQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_codeValueString_idx ON "Observation" ("codeValueString")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_comboCodeValueConcept_idx ON "Observation" USING gin ("comboCodeValueConcept")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_comboCodeValueQuantity_idx ON "Observation" USING gin ("comboCodeValueQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_componentCodeValueConcept_idx ON "Observation" USING gin ("componentCodeValueConcept")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_componentCodeValueQuantity_idx ON "Observation" USING gin ("componentCodeValueQuantity")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Observation_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_History_id_idx ON "Observation_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_History_lastUpdated_idx ON "Observation_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Observation_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_Token_resourceId_idx ON "Observation_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_Token_code_idx ON "Observation_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_Token_system_idx ON "Observation_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Observation_Token_value_idx ON "Observation_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Observation_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Observation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ObservationDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "publisher" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_lastUpdated_idx ON "ObservationDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_compartments_idx ON "ObservationDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_projectId_idx ON "ObservationDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition__source_idx ON "ObservationDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition__tag_idx ON "ObservationDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition__profile_idx ON "ObservationDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition__security_idx ON "ObservationDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_publisher_idx ON "ObservationDefinition" ("publisher")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ObservationDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_History_id_idx ON "ObservationDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_History_lastUpdated_idx ON "ObservationDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ObservationDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_Token_resourceId_idx ON "ObservationDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_Token_code_idx ON "ObservationDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_Token_system_idx ON "ObservationDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ObservationDefinition_Token_value_idx ON "ObservationDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ObservationDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ObservationDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "base" TEXT,
    "code" TEXT,
    "inputProfile" TEXT,
    "instance" BOOLEAN,
    "kind" TEXT,
    "outputProfile" TEXT,
    "system" BOOLEAN,
    "type" BOOLEAN
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_lastUpdated_idx ON "OperationDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_compartments_idx ON "OperationDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_projectId_idx ON "OperationDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition__source_idx ON "OperationDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition__tag_idx ON "OperationDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition__profile_idx ON "OperationDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition__security_idx ON "OperationDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_context_idx ON "OperationDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_contextQuantity_idx ON "OperationDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_date_idx ON "OperationDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_description_idx ON "OperationDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_name_idx ON "OperationDefinition" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_publisher_idx ON "OperationDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_status_idx ON "OperationDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_title_idx ON "OperationDefinition" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_url_idx ON "OperationDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_version_idx ON "OperationDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_contextTypeQuantity_idx ON "OperationDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_contextTypeValue_idx ON "OperationDefinition" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_base_idx ON "OperationDefinition" ("base")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_code_idx ON "OperationDefinition" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_inputProfile_idx ON "OperationDefinition" ("inputProfile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_instance_idx ON "OperationDefinition" ("instance")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_kind_idx ON "OperationDefinition" ("kind")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_outputProfile_idx ON "OperationDefinition" ("outputProfile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_system_idx ON "OperationDefinition" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_type_idx ON "OperationDefinition" ("type")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_History_id_idx ON "OperationDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_History_lastUpdated_idx ON "OperationDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_Token_resourceId_idx ON "OperationDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_Token_code_idx ON "OperationDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_Token_system_idx ON "OperationDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationDefinition_Token_value_idx ON "OperationDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "OperationDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationOutcome" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_lastUpdated_idx ON "OperationOutcome" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_compartments_idx ON "OperationOutcome" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_projectId_idx ON "OperationOutcome" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome__source_idx ON "OperationOutcome" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome__tag_idx ON "OperationOutcome" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome__profile_idx ON "OperationOutcome" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome__security_idx ON "OperationOutcome" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationOutcome_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_History_id_idx ON "OperationOutcome_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_History_lastUpdated_idx ON "OperationOutcome_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationOutcome_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_Token_resourceId_idx ON "OperationOutcome_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_Token_code_idx ON "OperationOutcome_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_Token_system_idx ON "OperationOutcome_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OperationOutcome_Token_value_idx ON "OperationOutcome_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OperationOutcome_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "OperationOutcome_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Organization" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "active" BOOLEAN,
    "endpoint" TEXT[],
    "name" TEXT[],
    "partof" TEXT,
    "phonetic" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_lastUpdated_idx ON "Organization" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_compartments_idx ON "Organization" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_projectId_idx ON "Organization" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization__source_idx ON "Organization" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization__tag_idx ON "Organization" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization__profile_idx ON "Organization" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization__security_idx ON "Organization" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_active_idx ON "Organization" ("active")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_endpoint_idx ON "Organization" USING gin ("endpoint")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_name_idx ON "Organization" USING gin ("name")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_partof_idx ON "Organization" ("partof")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_phonetic_idx ON "Organization" ("phonetic")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Organization_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_History_id_idx ON "Organization_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_History_lastUpdated_idx ON "Organization_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Organization_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_Token_resourceId_idx ON "Organization_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_Token_code_idx ON "Organization_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_Token_system_idx ON "Organization_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Organization_Token_value_idx ON "Organization_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Organization_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Organization_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OrganizationAffiliation" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "active" BOOLEAN,
    "date" TIMESTAMPTZ,
    "endpoint" TEXT[],
    "location" TEXT[],
    "network" TEXT[],
    "participatingOrganization" TEXT,
    "primaryOrganization" TEXT,
    "service" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_lastUpdated_idx ON "OrganizationAffiliation" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_compartments_idx ON "OrganizationAffiliation" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_projectId_idx ON "OrganizationAffiliation" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation__source_idx ON "OrganizationAffiliation" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation__tag_idx ON "OrganizationAffiliation" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation__profile_idx ON "OrganizationAffiliation" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation__security_idx ON "OrganizationAffiliation" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_active_idx ON "OrganizationAffiliation" ("active")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_date_idx ON "OrganizationAffiliation" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_endpoint_idx ON "OrganizationAffiliation" USING gin ("endpoint")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_location_idx ON "OrganizationAffiliation" USING gin ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_network_idx ON "OrganizationAffiliation" USING gin ("network")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_participatingOrganization_idx ON "OrganizationAffiliation" ("participatingOrganization")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_primaryOrganization_idx ON "OrganizationAffiliation" ("primaryOrganization")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_service_idx ON "OrganizationAffiliation" USING gin ("service")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OrganizationAffiliation_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_History_id_idx ON "OrganizationAffiliation_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_History_lastUpdated_idx ON "OrganizationAffiliation_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OrganizationAffiliation_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_Token_resourceId_idx ON "OrganizationAffiliation_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_Token_code_idx ON "OrganizationAffiliation_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_Token_system_idx ON "OrganizationAffiliation_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS OrganizationAffiliation_Token_value_idx ON "OrganizationAffiliation_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "OrganizationAffiliation_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "OrganizationAffiliation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Parameters" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_lastUpdated_idx ON "Parameters" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_compartments_idx ON "Parameters" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_projectId_idx ON "Parameters" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters__source_idx ON "Parameters" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters__tag_idx ON "Parameters" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters__profile_idx ON "Parameters" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters__security_idx ON "Parameters" ("_security")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Parameters_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_History_id_idx ON "Parameters_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_History_lastUpdated_idx ON "Parameters_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Parameters_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_Token_resourceId_idx ON "Parameters_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_Token_code_idx ON "Parameters_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_Token_system_idx ON "Parameters_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Parameters_Token_value_idx ON "Parameters_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Parameters_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Parameters_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Patient" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "active" BOOLEAN,
    "birthdate" DATE,
    "deathDate" TIMESTAMPTZ,
    "deceased" BOOLEAN,
    "gender" TEXT,
    "generalPractitioner" TEXT[],
    "link" TEXT[],
    "organization" TEXT,
    "phonetic" TEXT[],
    "ethnicity" TEXT[],
    "genderIdentity" TEXT[],
    "race" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_lastUpdated_idx ON "Patient" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_compartments_idx ON "Patient" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_projectId_idx ON "Patient" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient__source_idx ON "Patient" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient__tag_idx ON "Patient" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient__profile_idx ON "Patient" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient__security_idx ON "Patient" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_active_idx ON "Patient" ("active")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_birthdate_idx ON "Patient" ("birthdate")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_deathDate_idx ON "Patient" ("deathDate")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_deceased_idx ON "Patient" ("deceased")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_gender_idx ON "Patient" ("gender")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_generalPractitioner_idx ON "Patient" USING gin ("generalPractitioner")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_link_idx ON "Patient" USING gin ("link")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_organization_idx ON "Patient" ("organization")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_phonetic_idx ON "Patient" USING gin ("phonetic")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_ethnicity_idx ON "Patient" USING gin ("ethnicity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_genderIdentity_idx ON "Patient" USING gin ("genderIdentity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_race_idx ON "Patient" USING gin ("race")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Patient_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_History_id_idx ON "Patient_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_History_lastUpdated_idx ON "Patient_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Patient_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_Token_resourceId_idx ON "Patient_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_Token_code_idx ON "Patient_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_Token_system_idx ON "Patient_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Patient_Token_value_idx ON "Patient_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Patient_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Patient_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentNotice" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "created" TIMESTAMPTZ,
    "provider" TEXT,
    "request" TEXT,
    "response" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_lastUpdated_idx ON "PaymentNotice" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_compartments_idx ON "PaymentNotice" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_projectId_idx ON "PaymentNotice" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice__source_idx ON "PaymentNotice" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice__tag_idx ON "PaymentNotice" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice__profile_idx ON "PaymentNotice" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice__security_idx ON "PaymentNotice" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_created_idx ON "PaymentNotice" ("created")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_provider_idx ON "PaymentNotice" ("provider")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_request_idx ON "PaymentNotice" ("request")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_response_idx ON "PaymentNotice" ("response")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_status_idx ON "PaymentNotice" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentNotice_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_History_id_idx ON "PaymentNotice_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_History_lastUpdated_idx ON "PaymentNotice_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentNotice_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_Token_resourceId_idx ON "PaymentNotice_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_Token_code_idx ON "PaymentNotice_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_Token_system_idx ON "PaymentNotice_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentNotice_Token_value_idx ON "PaymentNotice_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentNotice_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "PaymentNotice_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentReconciliation" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "created" TIMESTAMPTZ,
    "disposition" TEXT,
    "outcome" TEXT,
    "paymentIssuer" TEXT,
    "request" TEXT,
    "requestor" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_lastUpdated_idx ON "PaymentReconciliation" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_compartments_idx ON "PaymentReconciliation" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_projectId_idx ON "PaymentReconciliation" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation__source_idx ON "PaymentReconciliation" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation__tag_idx ON "PaymentReconciliation" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation__profile_idx ON "PaymentReconciliation" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation__security_idx ON "PaymentReconciliation" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_created_idx ON "PaymentReconciliation" ("created")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_disposition_idx ON "PaymentReconciliation" ("disposition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_outcome_idx ON "PaymentReconciliation" ("outcome")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_paymentIssuer_idx ON "PaymentReconciliation" ("paymentIssuer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_request_idx ON "PaymentReconciliation" ("request")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_requestor_idx ON "PaymentReconciliation" ("requestor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_status_idx ON "PaymentReconciliation" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentReconciliation_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_History_id_idx ON "PaymentReconciliation_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_History_lastUpdated_idx ON "PaymentReconciliation_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentReconciliation_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_Token_resourceId_idx ON "PaymentReconciliation_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_Token_code_idx ON "PaymentReconciliation_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_Token_system_idx ON "PaymentReconciliation_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PaymentReconciliation_Token_value_idx ON "PaymentReconciliation_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PaymentReconciliation_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "PaymentReconciliation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Person" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "birthdate" DATE,
    "gender" TEXT,
    "phonetic" TEXT[],
    "link" TEXT[],
    "organization" TEXT,
    "patient" TEXT[],
    "practitioner" TEXT[],
    "relatedperson" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_lastUpdated_idx ON "Person" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_compartments_idx ON "Person" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_projectId_idx ON "Person" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person__source_idx ON "Person" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person__tag_idx ON "Person" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person__profile_idx ON "Person" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person__security_idx ON "Person" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_birthdate_idx ON "Person" ("birthdate")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_gender_idx ON "Person" ("gender")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_phonetic_idx ON "Person" USING gin ("phonetic")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_link_idx ON "Person" USING gin ("link")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_organization_idx ON "Person" ("organization")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_patient_idx ON "Person" USING gin ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_practitioner_idx ON "Person" USING gin ("practitioner")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_relatedperson_idx ON "Person" USING gin ("relatedperson")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Person_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_History_id_idx ON "Person_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_History_lastUpdated_idx ON "Person_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Person_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_Token_resourceId_idx ON "Person_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_Token_code_idx ON "Person_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_Token_system_idx ON "Person_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Person_Token_value_idx ON "Person_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Person_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Person_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "PlanDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "definition" TEXT[],
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_lastUpdated_idx ON "PlanDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_compartments_idx ON "PlanDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_projectId_idx ON "PlanDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition__source_idx ON "PlanDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition__tag_idx ON "PlanDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition__profile_idx ON "PlanDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition__security_idx ON "PlanDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_composedOf_idx ON "PlanDefinition" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_context_idx ON "PlanDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_contextQuantity_idx ON "PlanDefinition" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_date_idx ON "PlanDefinition" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_definition_idx ON "PlanDefinition" USING gin ("definition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_dependsOn_idx ON "PlanDefinition" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_derivedFrom_idx ON "PlanDefinition" USING gin ("derivedFrom")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_description_idx ON "PlanDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_effective_idx ON "PlanDefinition" ("effective")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_name_idx ON "PlanDefinition" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_predecessor_idx ON "PlanDefinition" USING gin ("predecessor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_publisher_idx ON "PlanDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_status_idx ON "PlanDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_successor_idx ON "PlanDefinition" USING gin ("successor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_title_idx ON "PlanDefinition" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_url_idx ON "PlanDefinition" ("url")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_version_idx ON "PlanDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_contextTypeQuantity_idx ON "PlanDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_contextTypeValue_idx ON "PlanDefinition" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PlanDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_History_id_idx ON "PlanDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_History_lastUpdated_idx ON "PlanDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PlanDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_Token_resourceId_idx ON "PlanDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_Token_code_idx ON "PlanDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_Token_system_idx ON "PlanDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PlanDefinition_Token_value_idx ON "PlanDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PlanDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "PlanDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Practitioner" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "gender" TEXT,
    "phonetic" TEXT[],
    "active" BOOLEAN
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_lastUpdated_idx ON "Practitioner" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_compartments_idx ON "Practitioner" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_projectId_idx ON "Practitioner" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner__source_idx ON "Practitioner" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner__tag_idx ON "Practitioner" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner__profile_idx ON "Practitioner" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner__security_idx ON "Practitioner" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_gender_idx ON "Practitioner" ("gender")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_phonetic_idx ON "Practitioner" USING gin ("phonetic")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_active_idx ON "Practitioner" ("active")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Practitioner_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_History_id_idx ON "Practitioner_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_History_lastUpdated_idx ON "Practitioner_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Practitioner_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_Token_resourceId_idx ON "Practitioner_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_Token_code_idx ON "Practitioner_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_Token_system_idx ON "Practitioner_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Practitioner_Token_value_idx ON "Practitioner_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Practitioner_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Practitioner_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PractitionerRole" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "active" BOOLEAN,
    "date" TIMESTAMPTZ,
    "endpoint" TEXT[],
    "location" TEXT[],
    "organization" TEXT,
    "practitioner" TEXT,
    "service" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_lastUpdated_idx ON "PractitionerRole" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_compartments_idx ON "PractitionerRole" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_projectId_idx ON "PractitionerRole" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole__source_idx ON "PractitionerRole" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole__tag_idx ON "PractitionerRole" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole__profile_idx ON "PractitionerRole" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole__security_idx ON "PractitionerRole" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_active_idx ON "PractitionerRole" ("active")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_date_idx ON "PractitionerRole" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_endpoint_idx ON "PractitionerRole" USING gin ("endpoint")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_location_idx ON "PractitionerRole" USING gin ("location")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_organization_idx ON "PractitionerRole" ("organization")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_practitioner_idx ON "PractitionerRole" ("practitioner")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_service_idx ON "PractitionerRole" USING gin ("service")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PractitionerRole_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_History_id_idx ON "PractitionerRole_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_History_lastUpdated_idx ON "PractitionerRole_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PractitionerRole_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_Token_resourceId_idx ON "PractitionerRole_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_Token_code_idx ON "PractitionerRole_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_Token_system_idx ON "PractitionerRole_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PractitionerRole_Token_value_idx ON "PractitionerRole_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PractitionerRole_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "PractitionerRole_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Procedure" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "encounter" TEXT,
    "basedOn" TEXT[],
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "location" TEXT,
    "partOf" TEXT[],
    "performer" TEXT[],
    "reasonReference" TEXT[],
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_lastUpdated_idx ON "Procedure" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_compartments_idx ON "Procedure" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_projectId_idx ON "Procedure" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure__source_idx ON "Procedure" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure__tag_idx ON "Procedure" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure__profile_idx ON "Procedure" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure__security_idx ON "Procedure" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_date_idx ON "Procedure" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_patient_idx ON "Procedure" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_encounter_idx ON "Procedure" ("encounter")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_basedOn_idx ON "Procedure" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_instantiatesCanonical_idx ON "Procedure" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_instantiatesUri_idx ON "Procedure" USING gin ("instantiatesUri")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_location_idx ON "Procedure" ("location")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_partOf_idx ON "Procedure" USING gin ("partOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_performer_idx ON "Procedure" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_reasonReference_idx ON "Procedure" USING gin ("reasonReference")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_status_idx ON "Procedure" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_subject_idx ON "Procedure" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Procedure_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_History_id_idx ON "Procedure_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_History_lastUpdated_idx ON "Procedure_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Procedure_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_Token_resourceId_idx ON "Procedure_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_Token_code_idx ON "Procedure_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_Token_system_idx ON "Procedure_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Procedure_Token_value_idx ON "Procedure_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Procedure_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Procedure_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Provenance" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "agent" TEXT[],
    "entity" TEXT[],
    "location" TEXT,
    "patient" TEXT[],
    "recorded" TIMESTAMPTZ,
    "target" TEXT[],
    "when" TIMESTAMPTZ
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_lastUpdated_idx ON "Provenance" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_compartments_idx ON "Provenance" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_projectId_idx ON "Provenance" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance__source_idx ON "Provenance" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance__tag_idx ON "Provenance" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance__profile_idx ON "Provenance" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance__security_idx ON "Provenance" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_agent_idx ON "Provenance" USING gin ("agent")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_entity_idx ON "Provenance" USING gin ("entity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_location_idx ON "Provenance" ("location")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_patient_idx ON "Provenance" USING gin ("patient")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_recorded_idx ON "Provenance" ("recorded")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_target_idx ON "Provenance" USING gin ("target")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_when_idx ON "Provenance" ("when")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Provenance_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_History_id_idx ON "Provenance_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_History_lastUpdated_idx ON "Provenance_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Provenance_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_Token_resourceId_idx ON "Provenance_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_Token_code_idx ON "Provenance_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_Token_system_idx ON "Provenance_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Provenance_Token_value_idx ON "Provenance_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Provenance_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Provenance_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Questionnaire" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "definition" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "subjectType" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_lastUpdated_idx ON "Questionnaire" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_compartments_idx ON "Questionnaire" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_projectId_idx ON "Questionnaire" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire__source_idx ON "Questionnaire" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire__tag_idx ON "Questionnaire" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire__profile_idx ON "Questionnaire" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire__security_idx ON "Questionnaire" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_context_idx ON "Questionnaire" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_contextQuantity_idx ON "Questionnaire" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_date_idx ON "Questionnaire" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_definition_idx ON "Questionnaire" USING gin ("definition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_description_idx ON "Questionnaire" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_effective_idx ON "Questionnaire" ("effective")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_name_idx ON "Questionnaire" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_publisher_idx ON "Questionnaire" ("publisher")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_status_idx ON "Questionnaire" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_subjectType_idx ON "Questionnaire" USING gin ("subjectType")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_title_idx ON "Questionnaire" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_url_idx ON "Questionnaire" ("url")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_version_idx ON "Questionnaire" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_contextTypeQuantity_idx ON "Questionnaire" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_contextTypeValue_idx ON "Questionnaire" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Questionnaire_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_History_id_idx ON "Questionnaire_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_History_lastUpdated_idx ON "Questionnaire_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Questionnaire_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_Token_resourceId_idx ON "Questionnaire_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_Token_code_idx ON "Questionnaire_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_Token_system_idx ON "Questionnaire_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Questionnaire_Token_value_idx ON "Questionnaire_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Questionnaire_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Questionnaire_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "QuestionnaireResponse" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "author" TEXT,
    "authored" TIMESTAMPTZ,
    "basedOn" TEXT[],
    "encounter" TEXT,
    "partOf" TEXT[],
    "patient" TEXT,
    "questionnaire" TEXT,
    "source" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_lastUpdated_idx ON "QuestionnaireResponse" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_compartments_idx ON "QuestionnaireResponse" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_projectId_idx ON "QuestionnaireResponse" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse__source_idx ON "QuestionnaireResponse" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse__tag_idx ON "QuestionnaireResponse" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse__profile_idx ON "QuestionnaireResponse" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse__security_idx ON "QuestionnaireResponse" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_author_idx ON "QuestionnaireResponse" ("author")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_authored_idx ON "QuestionnaireResponse" ("authored")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_basedOn_idx ON "QuestionnaireResponse" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_encounter_idx ON "QuestionnaireResponse" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_partOf_idx ON "QuestionnaireResponse" USING gin ("partOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_patient_idx ON "QuestionnaireResponse" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_questionnaire_idx ON "QuestionnaireResponse" ("questionnaire")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_source_idx ON "QuestionnaireResponse" ("source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_status_idx ON "QuestionnaireResponse" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_subject_idx ON "QuestionnaireResponse" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "QuestionnaireResponse_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_History_id_idx ON "QuestionnaireResponse_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_History_lastUpdated_idx ON "QuestionnaireResponse_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "QuestionnaireResponse_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_Token_resourceId_idx ON "QuestionnaireResponse_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_Token_code_idx ON "QuestionnaireResponse_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_Token_system_idx ON "QuestionnaireResponse_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS QuestionnaireResponse_Token_value_idx ON "QuestionnaireResponse_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "QuestionnaireResponse_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "QuestionnaireResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RelatedPerson" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "birthdate" DATE,
    "gender" TEXT,
    "phonetic" TEXT[],
    "active" BOOLEAN,
    "patient" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_lastUpdated_idx ON "RelatedPerson" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_compartments_idx ON "RelatedPerson" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_projectId_idx ON "RelatedPerson" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson__source_idx ON "RelatedPerson" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson__tag_idx ON "RelatedPerson" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson__profile_idx ON "RelatedPerson" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson__security_idx ON "RelatedPerson" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_birthdate_idx ON "RelatedPerson" ("birthdate")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_gender_idx ON "RelatedPerson" ("gender")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_phonetic_idx ON "RelatedPerson" USING gin ("phonetic")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_active_idx ON "RelatedPerson" ("active")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_patient_idx ON "RelatedPerson" ("patient")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RelatedPerson_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_History_id_idx ON "RelatedPerson_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_History_lastUpdated_idx ON "RelatedPerson_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RelatedPerson_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_Token_resourceId_idx ON "RelatedPerson_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_Token_code_idx ON "RelatedPerson_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_Token_system_idx ON "RelatedPerson_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RelatedPerson_Token_value_idx ON "RelatedPerson_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RelatedPerson_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "RelatedPerson_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RequestGroup" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "author" TEXT,
    "authored" TIMESTAMPTZ,
    "encounter" TEXT,
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "intent" TEXT,
    "participant" TEXT[],
    "patient" TEXT,
    "priority" TEXT,
    "status" TEXT,
    "subject" TEXT,
    "priorityOrder" INTEGER
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_lastUpdated_idx ON "RequestGroup" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_compartments_idx ON "RequestGroup" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_projectId_idx ON "RequestGroup" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup__source_idx ON "RequestGroup" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup__tag_idx ON "RequestGroup" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup__profile_idx ON "RequestGroup" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup__security_idx ON "RequestGroup" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_author_idx ON "RequestGroup" ("author")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_authored_idx ON "RequestGroup" ("authored")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_encounter_idx ON "RequestGroup" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_instantiatesCanonical_idx ON "RequestGroup" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_instantiatesUri_idx ON "RequestGroup" USING gin ("instantiatesUri")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_intent_idx ON "RequestGroup" ("intent")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_participant_idx ON "RequestGroup" USING gin ("participant")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_patient_idx ON "RequestGroup" ("patient")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_priority_idx ON "RequestGroup" ("priority")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_status_idx ON "RequestGroup" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_subject_idx ON "RequestGroup" ("subject")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_priorityOrder_idx ON "RequestGroup" ("priorityOrder")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RequestGroup_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_History_id_idx ON "RequestGroup_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_History_lastUpdated_idx ON "RequestGroup_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RequestGroup_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_Token_resourceId_idx ON "RequestGroup_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_Token_code_idx ON "RequestGroup_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_Token_system_idx ON "RequestGroup_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RequestGroup_Token_value_idx ON "RequestGroup_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RequestGroup_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "RequestGroup_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_lastUpdated_idx ON "ResearchDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_compartments_idx ON "ResearchDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_projectId_idx ON "ResearchDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition__source_idx ON "ResearchDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition__tag_idx ON "ResearchDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition__profile_idx ON "ResearchDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition__security_idx ON "ResearchDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_composedOf_idx ON "ResearchDefinition" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_context_idx ON "ResearchDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_contextQuantity_idx ON "ResearchDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_date_idx ON "ResearchDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_dependsOn_idx ON "ResearchDefinition" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_derivedFrom_idx ON "ResearchDefinition" USING gin ("derivedFrom")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_description_idx ON "ResearchDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_effective_idx ON "ResearchDefinition" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_name_idx ON "ResearchDefinition" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_predecessor_idx ON "ResearchDefinition" USING gin ("predecessor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_publisher_idx ON "ResearchDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_status_idx ON "ResearchDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_successor_idx ON "ResearchDefinition" USING gin ("successor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_title_idx ON "ResearchDefinition" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_url_idx ON "ResearchDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_version_idx ON "ResearchDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_contextTypeQuantity_idx ON "ResearchDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_contextTypeValue_idx ON "ResearchDefinition" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_History_id_idx ON "ResearchDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_History_lastUpdated_idx ON "ResearchDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_Token_resourceId_idx ON "ResearchDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_Token_code_idx ON "ResearchDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_Token_system_idx ON "ResearchDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchDefinition_Token_value_idx ON "ResearchDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ResearchDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchElementDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "composedOf" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "dependsOn" TEXT[],
    "derivedFrom" TEXT[],
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "predecessor" TEXT[],
    "publisher" TEXT,
    "status" TEXT,
    "successor" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_lastUpdated_idx ON "ResearchElementDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_compartments_idx ON "ResearchElementDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_projectId_idx ON "ResearchElementDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition__source_idx ON "ResearchElementDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition__tag_idx ON "ResearchElementDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition__profile_idx ON "ResearchElementDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition__security_idx ON "ResearchElementDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_composedOf_idx ON "ResearchElementDefinition" USING gin ("composedOf")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_context_idx ON "ResearchElementDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_contextQuantity_idx ON "ResearchElementDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_date_idx ON "ResearchElementDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_dependsOn_idx ON "ResearchElementDefinition" USING gin ("dependsOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_derivedFrom_idx ON "ResearchElementDefinition" USING gin ("derivedFrom")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_description_idx ON "ResearchElementDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_effective_idx ON "ResearchElementDefinition" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_name_idx ON "ResearchElementDefinition" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_predecessor_idx ON "ResearchElementDefinition" USING gin ("predecessor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_publisher_idx ON "ResearchElementDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_status_idx ON "ResearchElementDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_successor_idx ON "ResearchElementDefinition" USING gin ("successor")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_title_idx ON "ResearchElementDefinition" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_url_idx ON "ResearchElementDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_version_idx ON "ResearchElementDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_contextTypeQuantity_idx ON "ResearchElementDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_contextTypeValue_idx ON "ResearchElementDefinition" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchElementDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_History_id_idx ON "ResearchElementDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_History_lastUpdated_idx ON "ResearchElementDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchElementDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_Token_resourceId_idx ON "ResearchElementDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_Token_code_idx ON "ResearchElementDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_Token_system_idx ON "ResearchElementDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchElementDefinition_Token_value_idx ON "ResearchElementDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchElementDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ResearchElementDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchStudy" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "partof" TEXT[],
    "principalinvestigator" TEXT,
    "protocol" TEXT[],
    "site" TEXT[],
    "sponsor" TEXT,
    "status" TEXT,
    "title" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_lastUpdated_idx ON "ResearchStudy" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_compartments_idx ON "ResearchStudy" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_projectId_idx ON "ResearchStudy" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy__source_idx ON "ResearchStudy" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy__tag_idx ON "ResearchStudy" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy__profile_idx ON "ResearchStudy" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy__security_idx ON "ResearchStudy" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_date_idx ON "ResearchStudy" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_partof_idx ON "ResearchStudy" USING gin ("partof")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_principalinvestigator_idx ON "ResearchStudy" ("principalinvestigator")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_protocol_idx ON "ResearchStudy" USING gin ("protocol")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_site_idx ON "ResearchStudy" USING gin ("site")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_sponsor_idx ON "ResearchStudy" ("sponsor")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_status_idx ON "ResearchStudy" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_title_idx ON "ResearchStudy" ("title")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchStudy_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_History_id_idx ON "ResearchStudy_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_History_lastUpdated_idx ON "ResearchStudy_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchStudy_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_Token_resourceId_idx ON "ResearchStudy_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_Token_code_idx ON "ResearchStudy_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_Token_system_idx ON "ResearchStudy_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchStudy_Token_value_idx ON "ResearchStudy_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchStudy_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ResearchStudy_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchSubject" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "individual" TEXT,
    "patient" TEXT,
    "status" TEXT,
    "study" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_lastUpdated_idx ON "ResearchSubject" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_compartments_idx ON "ResearchSubject" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_projectId_idx ON "ResearchSubject" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject__source_idx ON "ResearchSubject" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject__tag_idx ON "ResearchSubject" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject__profile_idx ON "ResearchSubject" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject__security_idx ON "ResearchSubject" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_date_idx ON "ResearchSubject" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_individual_idx ON "ResearchSubject" ("individual")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_patient_idx ON "ResearchSubject" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_status_idx ON "ResearchSubject" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_study_idx ON "ResearchSubject" ("study")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchSubject_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_History_id_idx ON "ResearchSubject_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_History_lastUpdated_idx ON "ResearchSubject_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchSubject_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_Token_resourceId_idx ON "ResearchSubject_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_Token_code_idx ON "ResearchSubject_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_Token_system_idx ON "ResearchSubject_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ResearchSubject_Token_value_idx ON "ResearchSubject_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ResearchSubject_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ResearchSubject_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskAssessment" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "patient" TEXT,
    "encounter" TEXT,
    "condition" TEXT,
    "performer" TEXT,
    "probability" DOUBLE PRECISION[],
    "subject" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_lastUpdated_idx ON "RiskAssessment" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_compartments_idx ON "RiskAssessment" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_projectId_idx ON "RiskAssessment" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment__source_idx ON "RiskAssessment" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment__tag_idx ON "RiskAssessment" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment__profile_idx ON "RiskAssessment" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment__security_idx ON "RiskAssessment" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_date_idx ON "RiskAssessment" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_patient_idx ON "RiskAssessment" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_encounter_idx ON "RiskAssessment" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_condition_idx ON "RiskAssessment" ("condition")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_performer_idx ON "RiskAssessment" ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_probability_idx ON "RiskAssessment" USING gin ("probability")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_subject_idx ON "RiskAssessment" ("subject")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskAssessment_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_History_id_idx ON "RiskAssessment_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_History_lastUpdated_idx ON "RiskAssessment_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskAssessment_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_Token_resourceId_idx ON "RiskAssessment_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_Token_code_idx ON "RiskAssessment_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_Token_system_idx ON "RiskAssessment_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskAssessment_Token_value_idx ON "RiskAssessment_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskAssessment_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "RiskAssessment_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskEvidenceSynthesis" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "effective" TIMESTAMPTZ,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_lastUpdated_idx ON "RiskEvidenceSynthesis" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_compartments_idx ON "RiskEvidenceSynthesis" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_projectId_idx ON "RiskEvidenceSynthesis" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis__source_idx ON "RiskEvidenceSynthesis" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis__tag_idx ON "RiskEvidenceSynthesis" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis__profile_idx ON "RiskEvidenceSynthesis" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis__security_idx ON "RiskEvidenceSynthesis" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_context_idx ON "RiskEvidenceSynthesis" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_contextQuantity_idx ON "RiskEvidenceSynthesis" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_date_idx ON "RiskEvidenceSynthesis" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_description_idx ON "RiskEvidenceSynthesis" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_effective_idx ON "RiskEvidenceSynthesis" ("effective")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_name_idx ON "RiskEvidenceSynthesis" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_publisher_idx ON "RiskEvidenceSynthesis" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_status_idx ON "RiskEvidenceSynthesis" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_title_idx ON "RiskEvidenceSynthesis" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_url_idx ON "RiskEvidenceSynthesis" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_version_idx ON "RiskEvidenceSynthesis" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_contextTypeQuantity_idx ON "RiskEvidenceSynthesis" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_contextTypeValue_idx ON "RiskEvidenceSynthesis" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskEvidenceSynthesis_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_History_id_idx ON "RiskEvidenceSynthesis_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_History_lastUpdated_idx ON "RiskEvidenceSynthesis_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskEvidenceSynthesis_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_Token_resourceId_idx ON "RiskEvidenceSynthesis_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_Token_code_idx ON "RiskEvidenceSynthesis_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_Token_system_idx ON "RiskEvidenceSynthesis_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS RiskEvidenceSynthesis_Token_value_idx ON "RiskEvidenceSynthesis_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "RiskEvidenceSynthesis_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "RiskEvidenceSynthesis_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Schedule" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "active" BOOLEAN,
    "actor" TEXT[],
    "date" TIMESTAMPTZ
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_lastUpdated_idx ON "Schedule" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_compartments_idx ON "Schedule" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_projectId_idx ON "Schedule" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule__source_idx ON "Schedule" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule__tag_idx ON "Schedule" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule__profile_idx ON "Schedule" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule__security_idx ON "Schedule" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_active_idx ON "Schedule" ("active")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_actor_idx ON "Schedule" USING gin ("actor")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_date_idx ON "Schedule" ("date")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Schedule_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_History_id_idx ON "Schedule_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_History_lastUpdated_idx ON "Schedule_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Schedule_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_Token_resourceId_idx ON "Schedule_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_Token_code_idx ON "Schedule_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_Token_system_idx ON "Schedule_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Schedule_Token_value_idx ON "Schedule_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Schedule_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Schedule_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "SearchParameter" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "base" TEXT[],
    "code" TEXT,
    "component" TEXT[],
    "derivedFrom" TEXT,
    "target" TEXT[],
    "type" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_lastUpdated_idx ON "SearchParameter" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_compartments_idx ON "SearchParameter" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_projectId_idx ON "SearchParameter" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter__source_idx ON "SearchParameter" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter__tag_idx ON "SearchParameter" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter__profile_idx ON "SearchParameter" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter__security_idx ON "SearchParameter" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_context_idx ON "SearchParameter" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_contextQuantity_idx ON "SearchParameter" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_date_idx ON "SearchParameter" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_description_idx ON "SearchParameter" ("description")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_name_idx ON "SearchParameter" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_publisher_idx ON "SearchParameter" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_status_idx ON "SearchParameter" ("status")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_url_idx ON "SearchParameter" ("url")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_version_idx ON "SearchParameter" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_contextTypeQuantity_idx ON "SearchParameter" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_contextTypeValue_idx ON "SearchParameter" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_base_idx ON "SearchParameter" USING gin ("base")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_code_idx ON "SearchParameter" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_component_idx ON "SearchParameter" USING gin ("component")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_derivedFrom_idx ON "SearchParameter" ("derivedFrom")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_target_idx ON "SearchParameter" USING gin ("target")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_type_idx ON "SearchParameter" ("type")');

  await client.query(`CREATE TABLE IF NOT EXISTS "SearchParameter_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_History_id_idx ON "SearchParameter_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_History_lastUpdated_idx ON "SearchParameter_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SearchParameter_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_Token_resourceId_idx ON "SearchParameter_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_Token_code_idx ON "SearchParameter_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_Token_system_idx ON "SearchParameter_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SearchParameter_Token_value_idx ON "SearchParameter_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SearchParameter_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SearchParameter_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ServiceRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "encounter" TEXT,
    "authored" TIMESTAMPTZ,
    "basedOn" TEXT[],
    "instantiatesCanonical" TEXT[],
    "instantiatesUri" TEXT[],
    "intent" TEXT,
    "occurrence" TIMESTAMPTZ,
    "orderDetail" TEXT[],
    "performer" TEXT[],
    "priority" TEXT,
    "replaces" TEXT[],
    "requester" TEXT,
    "specimen" TEXT[],
    "status" TEXT,
    "subject" TEXT,
    "priorityOrder" INTEGER
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_lastUpdated_idx ON "ServiceRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_compartments_idx ON "ServiceRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_projectId_idx ON "ServiceRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest__source_idx ON "ServiceRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest__tag_idx ON "ServiceRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest__profile_idx ON "ServiceRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest__security_idx ON "ServiceRequest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_patient_idx ON "ServiceRequest" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_encounter_idx ON "ServiceRequest" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_authored_idx ON "ServiceRequest" ("authored")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_basedOn_idx ON "ServiceRequest" USING gin ("basedOn")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_instantiatesCanonical_idx ON "ServiceRequest" USING gin ("instantiatesCanonical")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_instantiatesUri_idx ON "ServiceRequest" USING gin ("instantiatesUri")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_intent_idx ON "ServiceRequest" ("intent")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_occurrence_idx ON "ServiceRequest" ("occurrence")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_orderDetail_idx ON "ServiceRequest" USING gin ("orderDetail")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_performer_idx ON "ServiceRequest" USING gin ("performer")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_priority_idx ON "ServiceRequest" ("priority")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_replaces_idx ON "ServiceRequest" USING gin ("replaces")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_requester_idx ON "ServiceRequest" ("requester")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_specimen_idx ON "ServiceRequest" USING gin ("specimen")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_status_idx ON "ServiceRequest" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_subject_idx ON "ServiceRequest" ("subject")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_priorityOrder_idx ON "ServiceRequest" ("priorityOrder")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ServiceRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_History_id_idx ON "ServiceRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_History_lastUpdated_idx ON "ServiceRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ServiceRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_Token_resourceId_idx ON "ServiceRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_Token_code_idx ON "ServiceRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_Token_system_idx ON "ServiceRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ServiceRequest_Token_value_idx ON "ServiceRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ServiceRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ServiceRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Slot" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "schedule" TEXT,
    "start" TIMESTAMPTZ,
    "status" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_lastUpdated_idx ON "Slot" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_compartments_idx ON "Slot" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_projectId_idx ON "Slot" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot__source_idx ON "Slot" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot__tag_idx ON "Slot" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot__profile_idx ON "Slot" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot__security_idx ON "Slot" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_schedule_idx ON "Slot" ("schedule")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_start_idx ON "Slot" ("start")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_status_idx ON "Slot" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Slot_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_History_id_idx ON "Slot_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_History_lastUpdated_idx ON "Slot_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Slot_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_Token_resourceId_idx ON "Slot_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_Token_code_idx ON "Slot_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_Token_system_idx ON "Slot_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Slot_Token_value_idx ON "Slot_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Slot_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Slot_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Specimen" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "collected" TIMESTAMPTZ,
    "collector" TEXT,
    "parent" TEXT[],
    "patient" TEXT,
    "status" TEXT,
    "subject" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_lastUpdated_idx ON "Specimen" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_compartments_idx ON "Specimen" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_projectId_idx ON "Specimen" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen__source_idx ON "Specimen" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen__tag_idx ON "Specimen" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen__profile_idx ON "Specimen" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen__security_idx ON "Specimen" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_collected_idx ON "Specimen" ("collected")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_collector_idx ON "Specimen" ("collector")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_parent_idx ON "Specimen" USING gin ("parent")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_patient_idx ON "Specimen" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_status_idx ON "Specimen" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_subject_idx ON "Specimen" ("subject")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Specimen_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_History_id_idx ON "Specimen_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_History_lastUpdated_idx ON "Specimen_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Specimen_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_Token_resourceId_idx ON "Specimen_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_Token_code_idx ON "Specimen_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_Token_system_idx ON "Specimen_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Specimen_Token_value_idx ON "Specimen_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Specimen_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Specimen_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "SpecimenDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_lastUpdated_idx ON "SpecimenDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_compartments_idx ON "SpecimenDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_projectId_idx ON "SpecimenDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition__source_idx ON "SpecimenDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition__tag_idx ON "SpecimenDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition__profile_idx ON "SpecimenDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition__security_idx ON "SpecimenDefinition" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SpecimenDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_History_id_idx ON "SpecimenDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_History_lastUpdated_idx ON "SpecimenDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SpecimenDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_Token_resourceId_idx ON "SpecimenDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_Token_code_idx ON "SpecimenDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_Token_system_idx ON "SpecimenDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SpecimenDefinition_Token_value_idx ON "SpecimenDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SpecimenDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SpecimenDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureDefinition" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "abstract" BOOLEAN,
    "base" TEXT,
    "basePath" TEXT[],
    "derivation" TEXT,
    "experimental" BOOLEAN,
    "extContext" TEXT[],
    "kind" TEXT,
    "path" TEXT[],
    "type" TEXT,
    "valueset" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_lastUpdated_idx ON "StructureDefinition" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_compartments_idx ON "StructureDefinition" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_projectId_idx ON "StructureDefinition" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition__source_idx ON "StructureDefinition" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition__tag_idx ON "StructureDefinition" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition__profile_idx ON "StructureDefinition" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition__security_idx ON "StructureDefinition" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_context_idx ON "StructureDefinition" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_contextQuantity_idx ON "StructureDefinition" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_date_idx ON "StructureDefinition" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_description_idx ON "StructureDefinition" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_name_idx ON "StructureDefinition" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_publisher_idx ON "StructureDefinition" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_status_idx ON "StructureDefinition" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_title_idx ON "StructureDefinition" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_url_idx ON "StructureDefinition" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_version_idx ON "StructureDefinition" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_contextTypeQuantity_idx ON "StructureDefinition" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_contextTypeValue_idx ON "StructureDefinition" USING gin ("contextTypeValue")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_abstract_idx ON "StructureDefinition" ("abstract")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_base_idx ON "StructureDefinition" ("base")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_basePath_idx ON "StructureDefinition" USING gin ("basePath")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_derivation_idx ON "StructureDefinition" ("derivation")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_experimental_idx ON "StructureDefinition" ("experimental")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_extContext_idx ON "StructureDefinition" USING gin ("extContext")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_kind_idx ON "StructureDefinition" ("kind")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_path_idx ON "StructureDefinition" USING gin ("path")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_type_idx ON "StructureDefinition" ("type")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_valueset_idx ON "StructureDefinition" USING gin ("valueset")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureDefinition_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_History_id_idx ON "StructureDefinition_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_History_lastUpdated_idx ON "StructureDefinition_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureDefinition_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_Token_resourceId_idx ON "StructureDefinition_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_Token_code_idx ON "StructureDefinition_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_Token_system_idx ON "StructureDefinition_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureDefinition_Token_value_idx ON "StructureDefinition_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureDefinition_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "StructureDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureMap" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_lastUpdated_idx ON "StructureMap" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_compartments_idx ON "StructureMap" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_projectId_idx ON "StructureMap" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap__source_idx ON "StructureMap" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap__tag_idx ON "StructureMap" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap__profile_idx ON "StructureMap" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap__security_idx ON "StructureMap" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_context_idx ON "StructureMap" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_contextQuantity_idx ON "StructureMap" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_date_idx ON "StructureMap" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_description_idx ON "StructureMap" ("description")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_name_idx ON "StructureMap" ("name")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_publisher_idx ON "StructureMap" ("publisher")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_status_idx ON "StructureMap" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_title_idx ON "StructureMap" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_url_idx ON "StructureMap" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_version_idx ON "StructureMap" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_contextTypeQuantity_idx ON "StructureMap" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_contextTypeValue_idx ON "StructureMap" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureMap_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_History_id_idx ON "StructureMap_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_History_lastUpdated_idx ON "StructureMap_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureMap_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_Token_resourceId_idx ON "StructureMap_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_Token_code_idx ON "StructureMap_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_Token_system_idx ON "StructureMap_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS StructureMap_Token_value_idx ON "StructureMap_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "StructureMap_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "StructureMap_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Subscription" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "criteria" TEXT,
    "payload" TEXT,
    "status" TEXT,
    "type" TEXT,
    "url" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_lastUpdated_idx ON "Subscription" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_compartments_idx ON "Subscription" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_projectId_idx ON "Subscription" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription__source_idx ON "Subscription" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription__tag_idx ON "Subscription" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription__profile_idx ON "Subscription" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription__security_idx ON "Subscription" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_criteria_idx ON "Subscription" ("criteria")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_payload_idx ON "Subscription" ("payload")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_status_idx ON "Subscription" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_type_idx ON "Subscription" ("type")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_url_idx ON "Subscription" ("url")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Subscription_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_History_id_idx ON "Subscription_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_History_lastUpdated_idx ON "Subscription_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Subscription_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_Token_resourceId_idx ON "Subscription_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_Token_code_idx ON "Subscription_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_Token_system_idx ON "Subscription_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Subscription_Token_value_idx ON "Subscription_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Subscription_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "Subscription_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubscriptionStatus" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_lastUpdated_idx ON "SubscriptionStatus" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_compartments_idx ON "SubscriptionStatus" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_projectId_idx ON "SubscriptionStatus" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus__source_idx ON "SubscriptionStatus" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus__tag_idx ON "SubscriptionStatus" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus__profile_idx ON "SubscriptionStatus" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus__security_idx ON "SubscriptionStatus" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubscriptionStatus_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_History_id_idx ON "SubscriptionStatus_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_History_lastUpdated_idx ON "SubscriptionStatus_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubscriptionStatus_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_Token_resourceId_idx ON "SubscriptionStatus_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_Token_code_idx ON "SubscriptionStatus_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_Token_system_idx ON "SubscriptionStatus_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubscriptionStatus_Token_value_idx ON "SubscriptionStatus_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubscriptionStatus_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SubscriptionStatus_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Substance" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "expiry" TIMESTAMPTZ[],
    "quantity" DOUBLE PRECISION[],
    "status" TEXT,
    "substanceReference" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_lastUpdated_idx ON "Substance" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_compartments_idx ON "Substance" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_projectId_idx ON "Substance" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance__source_idx ON "Substance" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance__tag_idx ON "Substance" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance__profile_idx ON "Substance" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance__security_idx ON "Substance" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_expiry_idx ON "Substance" USING gin ("expiry")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_quantity_idx ON "Substance" USING gin ("quantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_status_idx ON "Substance" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_substanceReference_idx ON "Substance" USING gin ("substanceReference")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Substance_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_History_id_idx ON "Substance_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_History_lastUpdated_idx ON "Substance_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Substance_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_Token_resourceId_idx ON "Substance_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_Token_code_idx ON "Substance_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_Token_system_idx ON "Substance_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Substance_Token_value_idx ON "Substance_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Substance_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Substance_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceNucleicAcid" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_lastUpdated_idx ON "SubstanceNucleicAcid" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_compartments_idx ON "SubstanceNucleicAcid" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_projectId_idx ON "SubstanceNucleicAcid" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid__source_idx ON "SubstanceNucleicAcid" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid__tag_idx ON "SubstanceNucleicAcid" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid__profile_idx ON "SubstanceNucleicAcid" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid__security_idx ON "SubstanceNucleicAcid" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceNucleicAcid_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_History_id_idx ON "SubstanceNucleicAcid_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_History_lastUpdated_idx ON "SubstanceNucleicAcid_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceNucleicAcid_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_Token_resourceId_idx ON "SubstanceNucleicAcid_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_Token_code_idx ON "SubstanceNucleicAcid_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_Token_system_idx ON "SubstanceNucleicAcid_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceNucleicAcid_Token_value_idx ON "SubstanceNucleicAcid_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceNucleicAcid_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SubstanceNucleicAcid_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstancePolymer" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_lastUpdated_idx ON "SubstancePolymer" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_compartments_idx ON "SubstancePolymer" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_projectId_idx ON "SubstancePolymer" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer__source_idx ON "SubstancePolymer" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer__tag_idx ON "SubstancePolymer" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer__profile_idx ON "SubstancePolymer" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer__security_idx ON "SubstancePolymer" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstancePolymer_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_History_id_idx ON "SubstancePolymer_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_History_lastUpdated_idx ON "SubstancePolymer_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstancePolymer_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_Token_resourceId_idx ON "SubstancePolymer_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_Token_code_idx ON "SubstancePolymer_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_Token_system_idx ON "SubstancePolymer_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstancePolymer_Token_value_idx ON "SubstancePolymer_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstancePolymer_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SubstancePolymer_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceProtein" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_lastUpdated_idx ON "SubstanceProtein" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_compartments_idx ON "SubstanceProtein" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_projectId_idx ON "SubstanceProtein" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein__source_idx ON "SubstanceProtein" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein__tag_idx ON "SubstanceProtein" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein__profile_idx ON "SubstanceProtein" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein__security_idx ON "SubstanceProtein" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceProtein_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_History_id_idx ON "SubstanceProtein_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_History_lastUpdated_idx ON "SubstanceProtein_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceProtein_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_Token_resourceId_idx ON "SubstanceProtein_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_Token_code_idx ON "SubstanceProtein_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_Token_system_idx ON "SubstanceProtein_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceProtein_Token_value_idx ON "SubstanceProtein_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceProtein_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SubstanceProtein_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceReferenceInformation" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_lastUpdated_idx ON "SubstanceReferenceInformation" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_compartments_idx ON "SubstanceReferenceInformation" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_projectId_idx ON "SubstanceReferenceInformation" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation__source_idx ON "SubstanceReferenceInformation" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation__tag_idx ON "SubstanceReferenceInformation" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation__profile_idx ON "SubstanceReferenceInformation" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation__security_idx ON "SubstanceReferenceInformation" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceReferenceInformation_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_History_id_idx ON "SubstanceReferenceInformation_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_History_lastUpdated_idx ON "SubstanceReferenceInformation_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceReferenceInformation_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_Token_resourceId_idx ON "SubstanceReferenceInformation_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_Token_code_idx ON "SubstanceReferenceInformation_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_Token_system_idx ON "SubstanceReferenceInformation_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceReferenceInformation_Token_value_idx ON "SubstanceReferenceInformation_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceReferenceInformation_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SubstanceReferenceInformation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSourceMaterial" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_lastUpdated_idx ON "SubstanceSourceMaterial" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_compartments_idx ON "SubstanceSourceMaterial" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_projectId_idx ON "SubstanceSourceMaterial" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial__source_idx ON "SubstanceSourceMaterial" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial__tag_idx ON "SubstanceSourceMaterial" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial__profile_idx ON "SubstanceSourceMaterial" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial__security_idx ON "SubstanceSourceMaterial" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSourceMaterial_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_History_id_idx ON "SubstanceSourceMaterial_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_History_lastUpdated_idx ON "SubstanceSourceMaterial_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSourceMaterial_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_Token_resourceId_idx ON "SubstanceSourceMaterial_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_Token_code_idx ON "SubstanceSourceMaterial_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_Token_system_idx ON "SubstanceSourceMaterial_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSourceMaterial_Token_value_idx ON "SubstanceSourceMaterial_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSourceMaterial_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SubstanceSourceMaterial_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSpecification" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_lastUpdated_idx ON "SubstanceSpecification" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_compartments_idx ON "SubstanceSpecification" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_projectId_idx ON "SubstanceSpecification" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification__source_idx ON "SubstanceSpecification" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification__tag_idx ON "SubstanceSpecification" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification__profile_idx ON "SubstanceSpecification" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification__security_idx ON "SubstanceSpecification" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSpecification_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_History_id_idx ON "SubstanceSpecification_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_History_lastUpdated_idx ON "SubstanceSpecification_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSpecification_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_Token_resourceId_idx ON "SubstanceSpecification_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_Token_code_idx ON "SubstanceSpecification_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_Token_system_idx ON "SubstanceSpecification_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SubstanceSpecification_Token_value_idx ON "SubstanceSpecification_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SubstanceSpecification_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SubstanceSpecification_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyDelivery" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "receiver" TEXT[],
    "status" TEXT,
    "supplier" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_lastUpdated_idx ON "SupplyDelivery" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_compartments_idx ON "SupplyDelivery" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_projectId_idx ON "SupplyDelivery" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery__source_idx ON "SupplyDelivery" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery__tag_idx ON "SupplyDelivery" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery__profile_idx ON "SupplyDelivery" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery__security_idx ON "SupplyDelivery" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_patient_idx ON "SupplyDelivery" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_receiver_idx ON "SupplyDelivery" USING gin ("receiver")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_status_idx ON "SupplyDelivery" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_supplier_idx ON "SupplyDelivery" ("supplier")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyDelivery_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_History_id_idx ON "SupplyDelivery_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_History_lastUpdated_idx ON "SupplyDelivery_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyDelivery_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_Token_resourceId_idx ON "SupplyDelivery_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_Token_code_idx ON "SupplyDelivery_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_Token_system_idx ON "SupplyDelivery_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyDelivery_Token_value_idx ON "SupplyDelivery_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyDelivery_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SupplyDelivery_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "date" TIMESTAMPTZ,
    "requester" TEXT,
    "status" TEXT,
    "subject" TEXT,
    "supplier" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_lastUpdated_idx ON "SupplyRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_compartments_idx ON "SupplyRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_projectId_idx ON "SupplyRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest__source_idx ON "SupplyRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest__tag_idx ON "SupplyRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest__profile_idx ON "SupplyRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest__security_idx ON "SupplyRequest" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_date_idx ON "SupplyRequest" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_requester_idx ON "SupplyRequest" ("requester")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_status_idx ON "SupplyRequest" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_subject_idx ON "SupplyRequest" ("subject")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_supplier_idx ON "SupplyRequest" USING gin ("supplier")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_History_id_idx ON "SupplyRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_History_lastUpdated_idx ON "SupplyRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_Token_resourceId_idx ON "SupplyRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_Token_code_idx ON "SupplyRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_Token_system_idx ON "SupplyRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SupplyRequest_Token_value_idx ON "SupplyRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SupplyRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SupplyRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Task" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "authoredOn" TIMESTAMPTZ,
    "basedOn" TEXT[],
    "encounter" TEXT,
    "focus" TEXT,
    "intent" TEXT,
    "modified" TIMESTAMPTZ,
    "owner" TEXT,
    "partOf" TEXT[],
    "patient" TEXT,
    "period" TIMESTAMPTZ,
    "priority" TEXT,
    "requester" TEXT,
    "status" TEXT,
    "subject" TEXT,
    "dueDate" TIMESTAMPTZ,
    "priorityOrder" INTEGER
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_lastUpdated_idx ON "Task" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_compartments_idx ON "Task" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_projectId_idx ON "Task" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task__source_idx ON "Task" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task__tag_idx ON "Task" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task__profile_idx ON "Task" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task__security_idx ON "Task" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_authoredOn_idx ON "Task" ("authoredOn")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_basedOn_idx ON "Task" USING gin ("basedOn")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_encounter_idx ON "Task" ("encounter")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_focus_idx ON "Task" ("focus")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_intent_idx ON "Task" ("intent")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_modified_idx ON "Task" ("modified")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_owner_idx ON "Task" ("owner")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_partOf_idx ON "Task" USING gin ("partOf")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_patient_idx ON "Task" ("patient")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_period_idx ON "Task" ("period")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_priority_idx ON "Task" ("priority")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_requester_idx ON "Task" ("requester")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_status_idx ON "Task" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_subject_idx ON "Task" ("subject")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_dueDate_idx ON "Task" ("dueDate")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_priorityOrder_idx ON "Task" ("priorityOrder")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Task_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_History_id_idx ON "Task_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_History_lastUpdated_idx ON "Task_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Task_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_Token_resourceId_idx ON "Task_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_Token_code_idx ON "Task_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_Token_system_idx ON "Task_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Task_Token_value_idx ON "Task_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Task_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Task_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "TerminologyCapabilities" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_lastUpdated_idx ON "TerminologyCapabilities" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_compartments_idx ON "TerminologyCapabilities" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_projectId_idx ON "TerminologyCapabilities" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities__source_idx ON "TerminologyCapabilities" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities__tag_idx ON "TerminologyCapabilities" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities__profile_idx ON "TerminologyCapabilities" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities__security_idx ON "TerminologyCapabilities" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_context_idx ON "TerminologyCapabilities" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_contextQuantity_idx ON "TerminologyCapabilities" USING gin ("contextQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_date_idx ON "TerminologyCapabilities" ("date")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_description_idx ON "TerminologyCapabilities" ("description")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_name_idx ON "TerminologyCapabilities" ("name")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_publisher_idx ON "TerminologyCapabilities" ("publisher")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_status_idx ON "TerminologyCapabilities" ("status")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_title_idx ON "TerminologyCapabilities" ("title")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_url_idx ON "TerminologyCapabilities" ("url")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_version_idx ON "TerminologyCapabilities" ("version")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_contextTypeQuantity_idx ON "TerminologyCapabilities" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_contextTypeValue_idx ON "TerminologyCapabilities" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TerminologyCapabilities_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_History_id_idx ON "TerminologyCapabilities_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_History_lastUpdated_idx ON "TerminologyCapabilities_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TerminologyCapabilities_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_Token_resourceId_idx ON "TerminologyCapabilities_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_Token_code_idx ON "TerminologyCapabilities_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_Token_system_idx ON "TerminologyCapabilities_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TerminologyCapabilities_Token_value_idx ON "TerminologyCapabilities_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TerminologyCapabilities_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "TerminologyCapabilities_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestReport" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "issued" TIMESTAMPTZ,
    "participant" TEXT[],
    "result" TEXT,
    "tester" TEXT,
    "testscript" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_lastUpdated_idx ON "TestReport" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_compartments_idx ON "TestReport" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_projectId_idx ON "TestReport" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport__source_idx ON "TestReport" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport__tag_idx ON "TestReport" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport__profile_idx ON "TestReport" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport__security_idx ON "TestReport" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_issued_idx ON "TestReport" ("issued")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_participant_idx ON "TestReport" USING gin ("participant")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_result_idx ON "TestReport" ("result")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_tester_idx ON "TestReport" ("tester")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_testscript_idx ON "TestReport" ("testscript")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestReport_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_History_id_idx ON "TestReport_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_History_lastUpdated_idx ON "TestReport_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestReport_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_Token_resourceId_idx ON "TestReport_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_Token_code_idx ON "TestReport_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_Token_system_idx ON "TestReport_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestReport_Token_value_idx ON "TestReport_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestReport_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "TestReport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestScript" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "testscriptCapability" TEXT[],
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_lastUpdated_idx ON "TestScript" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_compartments_idx ON "TestScript" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_projectId_idx ON "TestScript" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript__source_idx ON "TestScript" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript__tag_idx ON "TestScript" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript__profile_idx ON "TestScript" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript__security_idx ON "TestScript" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_context_idx ON "TestScript" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_contextQuantity_idx ON "TestScript" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_date_idx ON "TestScript" ("date")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_description_idx ON "TestScript" ("description")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_name_idx ON "TestScript" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_publisher_idx ON "TestScript" ("publisher")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_status_idx ON "TestScript" ("status")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_testscriptCapability_idx ON "TestScript" USING gin ("testscriptCapability")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_title_idx ON "TestScript" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_url_idx ON "TestScript" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_version_idx ON "TestScript" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_contextTypeQuantity_idx ON "TestScript" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_contextTypeValue_idx ON "TestScript" USING gin ("contextTypeValue")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestScript_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_History_id_idx ON "TestScript_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_History_lastUpdated_idx ON "TestScript_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestScript_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_Token_resourceId_idx ON "TestScript_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_Token_code_idx ON "TestScript_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_Token_system_idx ON "TestScript_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS TestScript_Token_value_idx ON "TestScript_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "TestScript_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "TestScript_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ValueSet" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "context" TEXT[],
    "contextQuantity" DOUBLE PRECISION[],
    "date" TIMESTAMPTZ,
    "description" TEXT,
    "name" TEXT,
    "publisher" TEXT,
    "status" TEXT,
    "title" TEXT,
    "url" TEXT,
    "version" TEXT,
    "contextTypeQuantity" TEXT[],
    "contextTypeValue" TEXT[],
    "code" TEXT[],
    "expansion" TEXT,
    "reference" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_lastUpdated_idx ON "ValueSet" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_compartments_idx ON "ValueSet" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_projectId_idx ON "ValueSet" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet__source_idx ON "ValueSet" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet__tag_idx ON "ValueSet" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet__profile_idx ON "ValueSet" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet__security_idx ON "ValueSet" ("_security")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_context_idx ON "ValueSet" USING gin ("context")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_contextQuantity_idx ON "ValueSet" USING gin ("contextQuantity")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_date_idx ON "ValueSet" ("date")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_description_idx ON "ValueSet" ("description")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_name_idx ON "ValueSet" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_publisher_idx ON "ValueSet" ("publisher")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_status_idx ON "ValueSet" ("status")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_title_idx ON "ValueSet" ("title")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_url_idx ON "ValueSet" ("url")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_version_idx ON "ValueSet" ("version")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_contextTypeQuantity_idx ON "ValueSet" USING gin ("contextTypeQuantity")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_contextTypeValue_idx ON "ValueSet" USING gin ("contextTypeValue")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_code_idx ON "ValueSet" USING gin ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_expansion_idx ON "ValueSet" ("expansion")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_reference_idx ON "ValueSet" USING gin ("reference")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ValueSet_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_History_id_idx ON "ValueSet_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_History_lastUpdated_idx ON "ValueSet_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ValueSet_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_Token_resourceId_idx ON "ValueSet_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_Token_code_idx ON "ValueSet_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_Token_system_idx ON "ValueSet_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSet_Token_value_idx ON "ValueSet_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ValueSet_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "ValueSet_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "VerificationResult" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "target" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_lastUpdated_idx ON "VerificationResult" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_compartments_idx ON "VerificationResult" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_projectId_idx ON "VerificationResult" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult__source_idx ON "VerificationResult" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult__tag_idx ON "VerificationResult" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult__profile_idx ON "VerificationResult" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult__security_idx ON "VerificationResult" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_target_idx ON "VerificationResult" USING gin ("target")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "VerificationResult_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_History_id_idx ON "VerificationResult_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_History_lastUpdated_idx ON "VerificationResult_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "VerificationResult_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_Token_resourceId_idx ON "VerificationResult_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_Token_code_idx ON "VerificationResult_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_Token_system_idx ON "VerificationResult_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VerificationResult_Token_value_idx ON "VerificationResult_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "VerificationResult_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "VerificationResult_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "VisionPrescription" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "patient" TEXT,
    "encounter" TEXT,
    "datewritten" TIMESTAMPTZ,
    "prescriber" TEXT,
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_lastUpdated_idx ON "VisionPrescription" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_compartments_idx ON "VisionPrescription" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_projectId_idx ON "VisionPrescription" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription__source_idx ON "VisionPrescription" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription__tag_idx ON "VisionPrescription" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription__profile_idx ON "VisionPrescription" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription__security_idx ON "VisionPrescription" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_patient_idx ON "VisionPrescription" ("patient")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_encounter_idx ON "VisionPrescription" ("encounter")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_datewritten_idx ON "VisionPrescription" ("datewritten")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_prescriber_idx ON "VisionPrescription" ("prescriber")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_status_idx ON "VisionPrescription" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "VisionPrescription_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_History_id_idx ON "VisionPrescription_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_History_lastUpdated_idx ON "VisionPrescription_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "VisionPrescription_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_Token_resourceId_idx ON "VisionPrescription_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_Token_code_idx ON "VisionPrescription_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_Token_system_idx ON "VisionPrescription_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS VisionPrescription_Token_value_idx ON "VisionPrescription_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "VisionPrescription_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "VisionPrescription_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Project" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT,
    "owner" TEXT,
    "googleClientId" TEXT[],
    "recaptchaSiteKey" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_lastUpdated_idx ON "Project" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_compartments_idx ON "Project" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_projectId_idx ON "Project" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project__source_idx ON "Project" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project__tag_idx ON "Project" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Project__profile_idx ON "Project" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project__security_idx ON "Project" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_name_idx ON "Project" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_owner_idx ON "Project" ("owner")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_googleClientId_idx ON "Project" USING gin ("googleClientId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_recaptchaSiteKey_idx ON "Project" USING gin ("recaptchaSiteKey")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Project_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_History_id_idx ON "Project_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_History_lastUpdated_idx ON "Project_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Project_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_Token_resourceId_idx ON "Project_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_Token_code_idx ON "Project_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_Token_system_idx ON "Project_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Project_Token_value_idx ON "Project_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Project_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Project_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ClientApplication" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_lastUpdated_idx ON "ClientApplication" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_compartments_idx ON "ClientApplication" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_projectId_idx ON "ClientApplication" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication__source_idx ON "ClientApplication" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication__tag_idx ON "ClientApplication" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication__profile_idx ON "ClientApplication" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication__security_idx ON "ClientApplication" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_name_idx ON "ClientApplication" ("name")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClientApplication_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_History_id_idx ON "ClientApplication_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_History_lastUpdated_idx ON "ClientApplication_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClientApplication_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_Token_resourceId_idx ON "ClientApplication_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_Token_code_idx ON "ClientApplication_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_Token_system_idx ON "ClientApplication_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ClientApplication_Token_value_idx ON "ClientApplication_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ClientApplication_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ClientApplication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "User" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "email" TEXT,
    "externalId" TEXT,
    "project" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_lastUpdated_idx ON "User" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS User_compartments_idx ON "User" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_projectId_idx ON "User" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User__source_idx ON "User" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User__tag_idx ON "User" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User__profile_idx ON "User" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User__security_idx ON "User" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_email_idx ON "User" ("email")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_externalId_idx ON "User" ("externalId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_project_idx ON "User" ("project")');
  await client.query('CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS User_email_idx ON "User" ("email")');

  await client.query(`CREATE TABLE IF NOT EXISTS "User_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_History_id_idx ON "User_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS User_History_lastUpdated_idx ON "User_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "User_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS User_Token_resourceId_idx ON "User_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_Token_code_idx ON "User_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_Token_system_idx ON "User_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS User_Token_value_idx ON "User_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "User_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "User_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ProjectMembership" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "project" TEXT,
    "user" TEXT,
    "profile" TEXT,
    "profileType" TEXT,
    "userName" TEXT,
    "externalId" TEXT,
    "accessPolicy" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_lastUpdated_idx ON "ProjectMembership" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_compartments_idx ON "ProjectMembership" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_projectId_idx ON "ProjectMembership" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership__source_idx ON "ProjectMembership" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership__tag_idx ON "ProjectMembership" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership__profile_idx ON "ProjectMembership" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership__security_idx ON "ProjectMembership" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_project_idx ON "ProjectMembership" ("project")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_user_idx ON "ProjectMembership" ("user")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_profile_idx ON "ProjectMembership" ("profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_profileType_idx ON "ProjectMembership" ("profileType")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_userName_idx ON "ProjectMembership" ("userName")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_externalId_idx ON "ProjectMembership" ("externalId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_accessPolicy_idx ON "ProjectMembership" USING gin ("accessPolicy")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ProjectMembership_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_History_id_idx ON "ProjectMembership_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_History_lastUpdated_idx ON "ProjectMembership_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ProjectMembership_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_Token_resourceId_idx ON "ProjectMembership_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_Token_code_idx ON "ProjectMembership_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_Token_system_idx ON "ProjectMembership_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ProjectMembership_Token_value_idx ON "ProjectMembership_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "ProjectMembership_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "ProjectMembership_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Bot" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_lastUpdated_idx ON "Bot" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_compartments_idx ON "Bot" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_projectId_idx ON "Bot" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot__source_idx ON "Bot" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot__tag_idx ON "Bot" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot__profile_idx ON "Bot" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot__security_idx ON "Bot" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_name_idx ON "Bot" ("name")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Bot_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_History_id_idx ON "Bot_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_History_lastUpdated_idx ON "Bot_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Bot_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_Token_resourceId_idx ON "Bot_Token" ("resourceId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_Token_code_idx ON "Bot_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_Token_system_idx ON "Bot_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Bot_Token_value_idx ON "Bot_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Bot_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Bot_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Login" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "user" TEXT,
    "code" TEXT,
    "cookie" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_lastUpdated_idx ON "Login" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_compartments_idx ON "Login" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_projectId_idx ON "Login" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login__source_idx ON "Login" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login__tag_idx ON "Login" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login__profile_idx ON "Login" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login__security_idx ON "Login" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_user_idx ON "Login" ("user")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_code_idx ON "Login" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_cookie_idx ON "Login" ("cookie")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Login_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_History_id_idx ON "Login_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_History_lastUpdated_idx ON "Login_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Login_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_Token_resourceId_idx ON "Login_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_Token_code_idx ON "Login_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_Token_system_idx ON "Login_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Login_Token_value_idx ON "Login_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Login_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Login_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "PasswordChangeRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "user" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_lastUpdated_idx ON "PasswordChangeRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_compartments_idx ON "PasswordChangeRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_projectId_idx ON "PasswordChangeRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest__source_idx ON "PasswordChangeRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest__tag_idx ON "PasswordChangeRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest__profile_idx ON "PasswordChangeRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest__security_idx ON "PasswordChangeRequest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_user_idx ON "PasswordChangeRequest" ("user")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PasswordChangeRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_History_id_idx ON "PasswordChangeRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_History_lastUpdated_idx ON "PasswordChangeRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PasswordChangeRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_Token_resourceId_idx ON "PasswordChangeRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_Token_code_idx ON "PasswordChangeRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_Token_system_idx ON "PasswordChangeRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS PasswordChangeRequest_Token_value_idx ON "PasswordChangeRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "PasswordChangeRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "PasswordChangeRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserSecurityRequest" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "user" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_lastUpdated_idx ON "UserSecurityRequest" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_compartments_idx ON "UserSecurityRequest" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_projectId_idx ON "UserSecurityRequest" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest__source_idx ON "UserSecurityRequest" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest__tag_idx ON "UserSecurityRequest" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest__profile_idx ON "UserSecurityRequest" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest__security_idx ON "UserSecurityRequest" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_user_idx ON "UserSecurityRequest" ("user")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserSecurityRequest_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_History_id_idx ON "UserSecurityRequest_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_History_lastUpdated_idx ON "UserSecurityRequest_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserSecurityRequest_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_Token_resourceId_idx ON "UserSecurityRequest_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_Token_code_idx ON "UserSecurityRequest_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_Token_system_idx ON "UserSecurityRequest_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserSecurityRequest_Token_value_idx ON "UserSecurityRequest_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserSecurityRequest_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "UserSecurityRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "JsonWebKey" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "active" BOOLEAN
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_lastUpdated_idx ON "JsonWebKey" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_compartments_idx ON "JsonWebKey" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_projectId_idx ON "JsonWebKey" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey__source_idx ON "JsonWebKey" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey__tag_idx ON "JsonWebKey" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey__profile_idx ON "JsonWebKey" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey__security_idx ON "JsonWebKey" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_active_idx ON "JsonWebKey" ("active")');

  await client.query(`CREATE TABLE IF NOT EXISTS "JsonWebKey_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_History_id_idx ON "JsonWebKey_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_History_lastUpdated_idx ON "JsonWebKey_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "JsonWebKey_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_Token_resourceId_idx ON "JsonWebKey_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_Token_code_idx ON "JsonWebKey_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_Token_system_idx ON "JsonWebKey_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS JsonWebKey_Token_value_idx ON "JsonWebKey_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "JsonWebKey_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "JsonWebKey_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AccessPolicy" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_lastUpdated_idx ON "AccessPolicy" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_compartments_idx ON "AccessPolicy" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_projectId_idx ON "AccessPolicy" ("projectId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy__source_idx ON "AccessPolicy" ("_source")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy__tag_idx ON "AccessPolicy" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy__profile_idx ON "AccessPolicy" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy__security_idx ON "AccessPolicy" ("_security")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_name_idx ON "AccessPolicy" ("name")');

  await client.query(`CREATE TABLE IF NOT EXISTS "AccessPolicy_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_History_id_idx ON "AccessPolicy_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_History_lastUpdated_idx ON "AccessPolicy_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AccessPolicy_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_Token_resourceId_idx ON "AccessPolicy_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_Token_code_idx ON "AccessPolicy_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_Token_system_idx ON "AccessPolicy_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AccessPolicy_Token_value_idx ON "AccessPolicy_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AccessPolicy_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "AccessPolicy_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserConfiguration" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_lastUpdated_idx ON "UserConfiguration" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_compartments_idx ON "UserConfiguration" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_projectId_idx ON "UserConfiguration" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration__source_idx ON "UserConfiguration" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration__tag_idx ON "UserConfiguration" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration__profile_idx ON "UserConfiguration" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration__security_idx ON "UserConfiguration" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_name_idx ON "UserConfiguration" ("name")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserConfiguration_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_History_id_idx ON "UserConfiguration_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_History_lastUpdated_idx ON "UserConfiguration_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserConfiguration_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_Token_resourceId_idx ON "UserConfiguration_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_Token_code_idx ON "UserConfiguration_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_Token_system_idx ON "UserConfiguration_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS UserConfiguration_Token_value_idx ON "UserConfiguration_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "UserConfiguration_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "UserConfiguration_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BulkDataExport" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "status" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_lastUpdated_idx ON "BulkDataExport" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_compartments_idx ON "BulkDataExport" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_projectId_idx ON "BulkDataExport" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport__source_idx ON "BulkDataExport" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport__tag_idx ON "BulkDataExport" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport__profile_idx ON "BulkDataExport" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport__security_idx ON "BulkDataExport" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_status_idx ON "BulkDataExport" ("status")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BulkDataExport_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_History_id_idx ON "BulkDataExport_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_History_lastUpdated_idx ON "BulkDataExport_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BulkDataExport_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_Token_resourceId_idx ON "BulkDataExport_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_Token_code_idx ON "BulkDataExport_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_Token_system_idx ON "BulkDataExport_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS BulkDataExport_Token_value_idx ON "BulkDataExport_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "BulkDataExport_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "BulkDataExport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SmartAppLaunch" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_lastUpdated_idx ON "SmartAppLaunch" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_compartments_idx ON "SmartAppLaunch" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_projectId_idx ON "SmartAppLaunch" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch__source_idx ON "SmartAppLaunch" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch__tag_idx ON "SmartAppLaunch" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch__profile_idx ON "SmartAppLaunch" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch__security_idx ON "SmartAppLaunch" ("_security")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SmartAppLaunch_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_History_id_idx ON "SmartAppLaunch_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_History_lastUpdated_idx ON "SmartAppLaunch_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SmartAppLaunch_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_Token_resourceId_idx ON "SmartAppLaunch_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_Token_code_idx ON "SmartAppLaunch_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_Token_system_idx ON "SmartAppLaunch_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS SmartAppLaunch_Token_value_idx ON "SmartAppLaunch_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "SmartAppLaunch_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "SmartAppLaunch_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DomainConfiguration" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "domain" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_lastUpdated_idx ON "DomainConfiguration" ("lastUpdated")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_compartments_idx ON "DomainConfiguration" USING gin ("compartments")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_projectId_idx ON "DomainConfiguration" ("projectId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration__source_idx ON "DomainConfiguration" ("_source")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration__tag_idx ON "DomainConfiguration" USING gin ("_tag")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration__profile_idx ON "DomainConfiguration" USING gin ("_profile")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration__security_idx ON "DomainConfiguration" ("_security")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_domain_idx ON "DomainConfiguration" ("domain")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DomainConfiguration_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_History_id_idx ON "DomainConfiguration_History" ("id")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_History_lastUpdated_idx ON "DomainConfiguration_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DomainConfiguration_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_Token_resourceId_idx ON "DomainConfiguration_Token" ("resourceId")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_Token_code_idx ON "DomainConfiguration_Token" ("code")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_Token_system_idx ON "DomainConfiguration_Token" ("system")'
  );
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS DomainConfiguration_Token_value_idx ON "DomainConfiguration_Token" ("value")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "DomainConfiguration_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query(
    'ALTER TABLE IF EXISTS "DomainConfiguration_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AsyncJob" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[]
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_lastUpdated_idx ON "AsyncJob" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_compartments_idx ON "AsyncJob" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_projectId_idx ON "AsyncJob" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob__source_idx ON "AsyncJob" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob__tag_idx ON "AsyncJob" USING gin ("_tag")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob__profile_idx ON "AsyncJob" USING gin ("_profile")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob__security_idx ON "AsyncJob" ("_security")');

  await client.query(`CREATE TABLE IF NOT EXISTS "AsyncJob_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_History_id_idx ON "AsyncJob_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_History_lastUpdated_idx ON "AsyncJob_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "AsyncJob_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_Token_resourceId_idx ON "AsyncJob_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_Token_code_idx ON "AsyncJob_Token" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_Token_system_idx ON "AsyncJob_Token" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS AsyncJob_Token_value_idx ON "AsyncJob_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "AsyncJob_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "AsyncJob_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Agent" (
    "id" UUID NOT NULL PRIMARY KEY,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL,
    "deleted" BOOLEAN NOT NULL DEFAULT FALSE,
    "compartments" UUID[] NOT NULL,
    "projectId" UUID,
    "_source" TEXT,
    "_tag" TEXT[],
    "_profile" TEXT[],
    "_security" TEXT[],
    "name" TEXT,
    "status" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_lastUpdated_idx ON "Agent" ("lastUpdated")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_compartments_idx ON "Agent" USING gin ("compartments")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_projectId_idx ON "Agent" ("projectId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent__source_idx ON "Agent" ("_source")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent__tag_idx ON "Agent" USING gin ("_tag")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent__profile_idx ON "Agent" USING gin ("_profile")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent__security_idx ON "Agent" ("_security")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_name_idx ON "Agent" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_status_idx ON "Agent" ("status")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Agent_History" (
    "versionId" UUID NOT NULL PRIMARY KEY,
    "id" UUID NOT NULL,
    "content" TEXT NOT NULL,
    "lastUpdated" TIMESTAMPTZ NOT NULL
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_History_id_idx ON "Agent_History" ("id")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_History_lastUpdated_idx ON "Agent_History" ("lastUpdated")'
  );

  await client.query(`CREATE TABLE IF NOT EXISTS "Agent_Token" (
    "resourceId" UUID NOT NULL,
    "code" TEXT NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_Token_resourceId_idx ON "Agent_Token" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_Token_code_idx ON "Agent_Token" ("code")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_Token_system_idx ON "Agent_Token" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Agent_Token_value_idx ON "Agent_Token" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Agent_References" (
    "resourceId" UUID NOT NULL,
    "targetId" UUID NOT NULL,
    "code" TEXT NOT NULL
  )`);

  await client.query('ALTER TABLE IF EXISTS "Agent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Address" (
    "resourceId" UUID NOT NULL,
    "address" TEXT,
    "city" TEXT,
    "country" TEXT,
    "postalCode" TEXT,
    "state" TEXT,
    "use" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Address_resourceId_idx ON "Address" ("resourceId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Address_address_idx ON "Address" ("address")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Address_city_idx ON "Address" ("city")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Address_country_idx ON "Address" ("country")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Address_postalCode_idx ON "Address" ("postalCode")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Address_state_idx ON "Address" ("state")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Address_use_idx ON "Address" ("use")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ContactPoint" (
    "resourceId" UUID NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ContactPoint_resourceId_idx ON "ContactPoint" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ContactPoint_system_idx ON "ContactPoint" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ContactPoint_value_idx ON "ContactPoint" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "Identifier" (
    "resourceId" UUID NOT NULL,
    "system" TEXT,
    "value" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS Identifier_resourceId_idx ON "Identifier" ("resourceId")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Identifier_system_idx ON "Identifier" ("system")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS Identifier_value_idx ON "Identifier" ("value")');

  await client.query(`CREATE TABLE IF NOT EXISTS "HumanName" (
    "resourceId" UUID NOT NULL,
    "name" TEXT,
    "given" TEXT,
    "family" TEXT
  )`);

  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS HumanName_resourceId_idx ON "HumanName" ("resourceId")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS HumanName_name_idx ON "HumanName" ("name")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS HumanName_given_idx ON "HumanName" ("given")');
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS HumanName_family_idx ON "HumanName" ("family")');

  await client.query(`CREATE TABLE IF NOT EXISTS "ValueSetElement" (
    "resourceId" UUID NOT NULL,
    "system" TEXT,
    "code" TEXT,
    "display" TEXT
  )`);

  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSetElement_system_idx ON "ValueSetElement" ("system")'
  );
  await client.query('CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSetElement_code_idx ON "ValueSetElement" ("code")');
  await client.query(
    'CREATE INDEX CONCURRENTLY IF NOT EXISTS ValueSetElement_display_idx ON "ValueSetElement" ("display")'
  );
}
