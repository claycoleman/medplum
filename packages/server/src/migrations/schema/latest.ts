/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { PoolClient } from 'pg';

export async function run(client: PoolClient): Promise<void> {
  await client.query('SET statement_timeout = 0;');
  await client.query('SET lock_timeout = 0;');
  await client.query('SET idle_in_transaction_session_timeout = 0;');
  await client.query("SET client_encoding = 'UTF8';");
  await client.query('SET standard_conforming_strings = on;');
  await client.query("SELECT pg_catalog.set_config('search_path', '', false);");
  await client.query('SET check_function_bodies = false;');
  await client.query('SET xmloption = content;');
  await client.query('SET client_min_messages = warning;');
  await client.query('SET row_security = off;');
  await client.query('CREATE EXTENSION IF NOT EXISTS btree_gin WITH SCHEMA public;');
  await client.query("SET default_tablespace = '';");
  await client.query('SET default_table_access_method = heap;');
  await client.query(
    'CREATE TABLE public."AccessPolicy" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, name text, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."AccessPolicy_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AccessPolicy_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AccessPolicy_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Account" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, name text, owner text, patient text[], period timestamp with time zone, status text, subject text[], type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Account_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Account_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Account_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ActivityDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ActivityDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ActivityDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ActivityDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Address" ( "resourceId" uuid NOT NULL, address text, city text, country text, "postalCode" text, state text, use text );'
  );
  await client.query(
    'CREATE TABLE public."AdverseEvent" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, actuality text, category text[], date timestamp with time zone, event text, location text, recorder text, resultingcondition text[], seriousness text, severity text, study text[], subject text, substance text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."AdverseEvent_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AdverseEvent_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AdverseEvent_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Agent" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, "projectId" uuid, compartments uuid[] NOT NULL, _profile text[], _security text[], _source text, _tag text[], name text, status text );'
  );
  await client.query(
    'CREATE TABLE public."Agent_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Agent_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Agent_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."AllergyIntolerance" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, asserter text, category text[], "clinicalStatus" text, code text[], criticality text, date timestamp with time zone, "lastDate" timestamp with time zone, manifestation text[], onset timestamp with time zone[], patient text, recorder text, route text[], severity text[], type text, "verificationStatus" text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."AllergyIntolerance_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AllergyIntolerance_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AllergyIntolerance_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Appointment" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, actor text[], "appointmentType" text, "basedOn" text[], date timestamp with time zone, location text[], "partStatus" text[], patient text[], practitioner text[], "reasonCode" text[], "reasonReference" text[], "serviceCategory" text[], "serviceType" text[], slot text[], specialty text[], status text, "supportingInfo" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."AppointmentResponse" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, actor text, appointment text, location text, "partStatus" text, patient text, practitioner text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."AppointmentResponse_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AppointmentResponse_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AppointmentResponse_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Appointment_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Appointment_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Appointment_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."AsyncJob" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, status text, "user" text, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."AsyncJob_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AsyncJob_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AsyncJob_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."AuditEvent" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, action text, address text[], agent text[], "agentName" text[], "agentRole" text[], altid text[], date timestamp with time zone, entity text[], "entityName" text[], "entityRole" text[], "entityType" text[], outcome text, patient text[], policy text[], site text, source text, subtype text[], type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."AuditEvent_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AuditEvent_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."AuditEvent_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Basic" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, author text, code text, created date, patient text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Basic_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Basic_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Basic_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Binary" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Binary_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Binary_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Binary_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."BiologicallyDerivedProduct" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."BiologicallyDerivedProduct_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."BiologicallyDerivedProduct_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."BiologicallyDerivedProduct_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."BodyStructure" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, location text, morphology text, patient text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."BodyStructure_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."BodyStructure_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."BodyStructure_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Bot" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, name text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Bot_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Bot_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Bot_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."BulkDataExport" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, status text, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."BulkDataExport_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."BulkDataExport_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."BulkDataExport_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Bundle" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, composition text, message text, "timestamp" timestamp with time zone, type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Bundle_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Bundle_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Bundle_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."CapabilityStatement" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, fhirversion text, format text[], guide text[], jurisdiction text[], mode text[], name text, publisher text, resource text[], "resourceProfile" text[], "securityService" text[], software text, status text, "supportedProfile" text[], title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CapabilityStatement_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CapabilityStatement_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CapabilityStatement_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."CarePlan" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, "activityCode" text[], "activityDate" timestamp with time zone[], "activityReference" text[], "basedOn" text[], "careTeam" text[], category text[], condition text[], encounter text, goal text[], "instantiatesCanonical" text[], "instantiatesUri" text[], intent text, "partOf" text[], performer text[], replaces text[], status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CarePlan_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CarePlan_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CarePlan_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."CareTeam" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, category text[], encounter text, participant text[], status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, name text );'
  );
  await client.query(
    'CREATE TABLE public."CareTeam_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CareTeam_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CareTeam_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."CatalogEntry" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CatalogEntry_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CatalogEntry_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CatalogEntry_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItem" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, account text[], code text, context text, "enteredDate" timestamp with time zone, enterer text, "factorOverride" double precision, occurrence timestamp with time zone, patient text, "performerActor" text[], "performerFunction" text[], "performingOrganization" text, "priceOverride" double precision, quantity double precision, "requestingOrganization" text, service text[], subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItemDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, effective timestamp with time zone, jurisdiction text[], publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItemDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItemDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItemDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItem_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItem_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ChargeItem_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Claim" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "careTeam" text[], created timestamp with time zone, "detailUdi" text[], encounter text[], enterer text, facility text, insurer text, "itemUdi" text[], patient text, payee text, priority text, "procedureUdi" text[], provider text, status text, "subdetailUdi" text[], use text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ClaimResponse" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, created timestamp with time zone, disposition text, insurer text, outcome text, patient text, "paymentDate" date, request text, requestor text, status text, use text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ClaimResponse_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ClaimResponse_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ClaimResponse_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Claim_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Claim_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Claim_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ClientApplication" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, name text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ClientApplication_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ClientApplication_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ClientApplication_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ClinicalImpression" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, assessor text, encounter text, "findingCode" text[], "findingRef" text[], investigation text[], previous text, problem text[], status text, subject text, "supportingInfo" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ClinicalImpression_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ClinicalImpression_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ClinicalImpression_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."CodeSystem" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], code text[], "contentMode" text, language text[], supplements text, system text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CodeSystem_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CodeSystem_Property" ( id bigint NOT NULL, system uuid NOT NULL, code text NOT NULL, type text NOT NULL, uri text, description text );'
  );
  await client.query(
    'CREATE SEQUENCE public."CodeSystem_Property_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;'
  );
  await client.query('ALTER SEQUENCE public."CodeSystem_Property_id_seq" OWNED BY public."CodeSystem_Property".id;');
  await client.query(
    'CREATE TABLE public."CodeSystem_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CodeSystem_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Coding" ( id bigint NOT NULL, system uuid NOT NULL, code text NOT NULL, display text );'
  );
  await client.query(
    'CREATE TABLE public."Coding_Property" ( coding bigint NOT NULL, property bigint NOT NULL, target bigint, value text );'
  );
  await client.query(
    'CREATE SEQUENCE public."Coding_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;'
  );
  await client.query('ALTER SEQUENCE public."Coding_id_seq" OWNED BY public."Coding".id;');
  await client.query(
    'CREATE TABLE public."Communication" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "basedOn" text[], category text[], encounter text, "instantiatesCanonical" text[], "instantiatesUri" text[], medium text[], "partOf" text[], patient text, received timestamp with time zone, recipient text[], sender text, sent timestamp with time zone, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CommunicationRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, authored timestamp with time zone, "basedOn" text[], category text[], encounter text, "groupIdentifier" text, medium text[], occurrence timestamp with time zone, patient text, priority text, recipient text[], replaces text[], requester text, sender text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, "priorityOrder" integer );'
  );
  await client.query(
    'CREATE TABLE public."CommunicationRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CommunicationRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CommunicationRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Communication_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Communication_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Communication_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."CompartmentDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, name text, publisher text, status text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], code text, resource text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CompartmentDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CompartmentDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CompartmentDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Composition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, type text, attester text[], author text[], category text[], confidentiality text, context text[], encounter text, entry text[], period timestamp with time zone[], "relatedId" text[], "relatedRef" text[], section text[], status text, subject text, title text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Composition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Composition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Composition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ConceptMap" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], dependson text[], other text[], product text[], source text, "sourceCode" text[], "sourceSystem" text[], "sourceUri" text, target text, "targetCode" text[], "targetSystem" text[], "targetUri" text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ConceptMap_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ConceptMap_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ConceptMap_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Condition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, patient text, "abatementAge" double precision, "abatementDate" timestamp with time zone, "abatementString" text, asserter text, "bodySite" text[], category text[], "clinicalStatus" text, encounter text, evidence text[], "evidenceDetail" text[], "onsetAge" double precision, "onsetDate" timestamp with time zone, "onsetInfo" text, "recordedDate" timestamp with time zone, severity text, stage text[], subject text, "verificationStatus" text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, "assertedDate" timestamp with time zone );'
  );
  await client.query(
    'CREATE TABLE public."Condition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Condition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Condition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Consent" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, action text[], actor text[], category text[], consentor text[], data text[], organization text[], period timestamp with time zone, purpose text[], scope text, "securityLabel" text[], "sourceReference" text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Consent_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Consent_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Consent_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ContactPoint" ( id uuid NOT NULL, "resourceId" uuid NOT NULL, index integer NOT NULL, content text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Contract" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, authority text[], domain text[], instantiates text, issued timestamp with time zone, patient text[], signer text[], status text, subject text[], url text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Contract_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Contract_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Contract_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Coverage" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, beneficiary text, "classType" text[], "classValue" text[], dependent text, patient text, payor text[], "policyHolder" text, status text, subscriber text, type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, created timestamp with time zone, enterer text, facility text, patient text, provider text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityResponse" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, created timestamp with time zone, disposition text, insurer text, outcome text, patient text, request text, requestor text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityResponse_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityResponse_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."CoverageEligibilityResponse_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Coverage_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Coverage_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Coverage_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DatabaseMigration" ( id integer NOT NULL, version integer NOT NULL, "dataVersion" integer NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DetectedIssue" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, author text, code text, identified timestamp with time zone, implicated text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, status text );'
  );
  await client.query(
    'CREATE TABLE public."DetectedIssue_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DetectedIssue_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DetectedIssue_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Device" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "deviceName" text[], location text, manufacturer text, model text, organization text, patient text, status text, type text, "udiCarrier" text[], "udiDi" text[], url text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DeviceDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, parent text, type text, deleted boolean DEFAULT false NOT NULL, classification text[], _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DeviceDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DeviceMetric" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, category text, parent text, source text, type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DeviceMetric_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceMetric_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceMetric_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DeviceRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, patient text, encounter text, "authoredOn" timestamp with time zone, "basedOn" text[], device text, "eventDate" timestamp with time zone, "groupIdentifier" text, "instantiatesCanonical" text[], "instantiatesUri" text[], insurance text[], intent text, performer text, "priorRequest" text[], requester text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DeviceRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DeviceUseStatement" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, device text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DeviceUseStatement_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceUseStatement_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DeviceUseStatement_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Device_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Device_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Device_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DiagnosticReport" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, date timestamp with time zone, patient text, encounter text, "basedOn" text[], category text[], conclusion text[], issued timestamp with time zone, media text[], performer text[], result text[], "resultsInterpreter" text[], specimen text[], status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DiagnosticReport_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DiagnosticReport_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DiagnosticReport_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DocumentManifest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, type text, author text[], created timestamp with time zone, description text, item text[], recipient text[], "relatedId" text[], "relatedRef" text[], source text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DocumentManifest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DocumentManifest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DocumentManifest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DocumentReference" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, type text, encounter text[], authenticator text, author text[], category text[], contenttype text[], custodian text, date timestamp with time zone, description text, event text[], facility text, format text[], language text[], location text[], period timestamp with time zone, related text[], relatesto text[], relation text[], "securityLabel" text[], setting text, status text, subject text, relationship text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DocumentReference_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DocumentReference_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DocumentReference_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."DomainConfiguration" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, domain text, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."DomainConfiguration_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DomainConfiguration_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."DomainConfiguration_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."EffectEvidenceSynthesis" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, effective timestamp with time zone, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."EffectEvidenceSynthesis_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EffectEvidenceSynthesis_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EffectEvidenceSynthesis_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Encounter" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, type text[], account text[], appointment text[], "basedOn" text[], class text, diagnosis text[], "episodeOfCare" text[], length double precision, location text[], "locationPeriod" timestamp with time zone[], "partOf" text, participant text[], "participantType" text[], practitioner text[], "reasonCode" text[], "reasonReference" text[], "serviceProvider" text, "specialArrangement" text[], status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Encounter_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Encounter_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Encounter_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Endpoint" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "connectionType" text, name text, organization text, "payloadType" text[], status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Endpoint_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Endpoint_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Endpoint_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentResponse" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, request text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentResponse_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentResponse_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EnrollmentResponse_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."EpisodeOfCare" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, type text[], "careManager" text, condition text[], "incomingReferral" text[], organization text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."EpisodeOfCare_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EpisodeOfCare_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EpisodeOfCare_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."EventDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."EventDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EventDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EventDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Evidence" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."EvidenceVariable" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."EvidenceVariable_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EvidenceVariable_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."EvidenceVariable_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Evidence_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Evidence_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Evidence_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ExampleScenario" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, jurisdiction text[], name text, publisher text, status text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ExampleScenario_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ExampleScenario_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ExampleScenario_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ExplanationOfBenefit" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "careTeam" text[], claim text, coverage text[], created timestamp with time zone, "detailUdi" text[], disposition text, encounter text[], enterer text, facility text, "itemUdi" text[], patient text, payee text, "procedureUdi" text[], provider text, status text, "subdetailUdi" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ExplanationOfBenefit_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ExplanationOfBenefit_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ExplanationOfBenefit_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."FamilyMemberHistory" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text[], date timestamp with time zone, patient text, "instantiatesCanonical" text[], "instantiatesUri" text[], relationship text, sex text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."FamilyMemberHistory_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."FamilyMemberHistory_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."FamilyMemberHistory_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Flag" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, encounter text, author text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Flag_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Flag_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Flag_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Goal" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, "achievementStatus" text, category text[], "lifecycleStatus" text, "startDate" date, subject text, "targetDate" date[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Goal_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Goal_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Goal_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."GraphDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], start text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."GraphDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."GraphDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."GraphDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Group" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, actual boolean, characteristic text[], code text, exclude boolean[], "managingEntity" text, member text[], type text, value text[], "characteristicValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, name text );'
  );
  await client.query(
    'CREATE TABLE public."Group_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Group_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Group_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."GuidanceResponse" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, request text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."GuidanceResponse_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."GuidanceResponse_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."GuidanceResponse_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."HealthcareService" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, active boolean, characteristic text[], "coverageArea" text[], endpoint text[], location text[], name text, organization text, program text[], "serviceCategory" text[], "serviceType" text[], specialty text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."HealthcareService_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."HealthcareService_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."HealthcareService_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."HumanName" ( "resourceId" uuid NOT NULL, name text, given text, family text );'
  );
  await client.query(
    'CREATE TABLE public."Identifier" ( id uuid NOT NULL, "resourceId" uuid NOT NULL, index integer NOT NULL, content text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ImagingStudy" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, basedon text[], bodysite text[], "dicomClass" text[], encounter text, endpoint text[], instance text[], interpreter text[], modality text[], performer text[], reason text[], referrer text, series text[], started timestamp with time zone, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ImagingStudy_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImagingStudy_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImagingStudy_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Immunization" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, location text, "lotNumber" text, manufacturer text, performer text[], reaction text[], "reactionDate" timestamp with time zone[], "reasonCode" text[], "reasonReference" text[], series text[], status text, "statusReason" text, "targetDisease" text[], "vaccineCode" text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationEvaluation" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, "doseStatus" text, "immunizationEvent" text, patient text, status text, "targetDisease" text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationEvaluation_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationEvaluation_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationEvaluation_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationRecommendation" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, information text[], patient text, status text[], support text[], "targetDisease" text[], "vaccineType" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationRecommendation_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationRecommendation_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImmunizationRecommendation_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Immunization_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Immunization_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Immunization_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ImplementationGuide" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], "dependsOn" text[], experimental boolean, global text[], resource text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ImplementationGuide_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImplementationGuide_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ImplementationGuide_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."InsurancePlan" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "administeredBy" text, endpoint text[], name text, "ownedBy" text, phonetic text, status text, type text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."InsurancePlan_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."InsurancePlan_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."InsurancePlan_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Invoice" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, account text, date timestamp with time zone, issuer text, participant text[], "participantRole" text[], patient text, recipient text, status text, subject text, totalgross double precision, totalnet double precision, type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Invoice_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Invoice_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Invoice_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."JsonWebKey" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, active boolean, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."JsonWebKey_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."JsonWebKey_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."JsonWebKey_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Library" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], "contentType" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], type text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Library_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Library_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Library_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Linkage" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, author text, item text[], source text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Linkage_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Linkage_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Linkage_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."List" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, date timestamp with time zone, patient text, encounter text, "emptyReason" text, item text[], notes text[], source text, status text, subject text, title text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."List_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."List_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."List_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Location" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, endpoint text[], name text[], near text, "operationalStatus" text, organization text, partof text, status text, type text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Location_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Location_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Location_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Login" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, cookie text, deleted boolean DEFAULT false NOT NULL, "user" text, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Login_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Login_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Login_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Measure" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MeasureReport" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, "evaluatedResource" text[], measure text, patient text, period timestamp with time zone, reporter text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, period_range tstzrange );'
  );
  await client.query(
    'CREATE TABLE public."MeasureReport_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MeasureReport_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MeasureReport_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Measure_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Measure_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Measure_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Media" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "basedOn" text[], created timestamp with time zone, device text, encounter text, modality text, operator text, patient text, site text, status text, subject text, type text, view text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Media_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Media_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Media_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Medication" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, "expirationDate" timestamp with time zone, form text, ingredient text[], "ingredientCode" text[], "lotNumber" text, manufacturer text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicationAdministration" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, patient text, context text, device text[], "effectiveTime" timestamp with time zone, medication text, performer text[], "reasonGiven" text[], "reasonNotGiven" text[], request text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicationAdministration_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationAdministration_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationAdministration_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicationDispense" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, patient text, medication text, status text, context text, destination text, performer text[], prescription text[], receiver text[], responsibleparty text[], subject text, type text, whenhandedover timestamp with time zone, whenprepared timestamp with time zone, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicationDispense_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationDispense_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationDispense_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicationKnowledge" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, classification text[], "classificationType" text[], code text, doseform text, ingredient text[], "ingredientCode" text[], manufacturer text, "monitoringProgramName" text[], "monitoringProgramType" text[], monograph text[], "monographType" text[], "sourceCost" text[], status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicationKnowledge_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationKnowledge_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationKnowledge_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicationRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, patient text, medication text, status text, authoredon timestamp with time zone, category text[], date timestamp with time zone[], encounter text, "intendedDispenser" text, "intendedPerformer" text, "intendedPerformertype" text, intent text, priority text, requester text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, "priorityOrder" integer );'
  );
  await client.query(
    'CREATE TABLE public."MedicationRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicationStatement" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, patient text, medication text, status text, category text, context text, effective timestamp with time zone, "partOf" text[], source text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicationStatement_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationStatement_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicationStatement_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Medication_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Medication_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Medication_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProduct" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, name text[], "nameLanguage" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductAuthorization" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, country text[], holder text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductAuthorization_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductAuthorization_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductAuthorization_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductContraindication" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, subject text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductContraindication_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductContraindication_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductContraindication_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIndication" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, subject text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIndication_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIndication_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIndication_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIngredient" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIngredient_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIngredient_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductIngredient_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductInteraction" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, subject text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductInteraction_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductInteraction_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductInteraction_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductManufactured" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductManufactured_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductManufactured_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductManufactured_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPackaged" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, subject text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPackaged_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPackaged_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPackaged_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPharmaceutical" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, route text[], "targetSpecies" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPharmaceutical_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPharmaceutical_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductPharmaceutical_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductUndesirableEffect" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, subject text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductUndesirableEffect_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductUndesirableEffect_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProductUndesirableEffect_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProduct_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProduct_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MedicinalProduct_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MessageDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], category text, event text, focus text[], parent text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MessageDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MessageDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MessageDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MessageHeader" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, author text, code text, destination text[], "destinationUri" text[], enterer text, event text, focus text[], receiver text[], "responseId" text, responsible text, sender text, source text, "sourceUri" text, target text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MessageHeader_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MessageHeader_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MessageHeader_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."MolecularSequence" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, chromosome text, patient text, referenceseqid text, type text, "variantEnd" double precision[], "variantStart" double precision[], "windowEnd" double precision, "windowStart" double precision, "chromosomeVariantCoordinate" text[], "chromosomeWindowCoordinate" text, "referenceseqidVariantCoordinate" text[], "referenceseqidWindowCoordinate" text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."MolecularSequence_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MolecularSequence_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."MolecularSequence_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."NamingSystem" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, "contextTypeQuantity" text[], "contextTypeValue" text[], contact text[], "idType" text[], kind text, period timestamp with time zone[], responsible text, telecom text[], type text, value text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."NamingSystem_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."NamingSystem_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."NamingSystem_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."NutritionOrder" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, encounter text, additive text, datetime timestamp with time zone, formula text, "instantiatesCanonical" text[], "instantiatesUri" text[], oraldiet text[], provider text, status text, supplement text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."NutritionOrder_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."NutritionOrder_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."NutritionOrder_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Observation" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, date timestamp with time zone, patient text, encounter text, "basedOn" text[], category text[], "comboCode" text[], "comboDataAbsentReason" text[], "comboValueConcept" text[], "comboValueQuantity" double precision[], "componentCode" text[], "componentDataAbsentReason" text[], "componentValueConcept" text[], "componentValueQuantity" double precision[], "dataAbsentReason" text, "derivedFrom" text[], device text, focus text[], "hasMember" text[], method text, "partOf" text[], performer text[], specimen text, status text, subject text, "valueConcept" text, "valueDate" timestamp with time zone, "valueQuantity" double precision, "valueString" text, "codeValueConcept" text, "codeValueDate" text, "codeValueQuantity" text, "codeValueString" text, "comboCodeValueConcept" text[], "comboCodeValueQuantity" text[], "componentCodeValueConcept" text[], "componentCodeValueQuantity" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ObservationDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, code text, publisher text, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ObservationDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ObservationDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ObservationDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Observation_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Observation_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Observation_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."OperationDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], base text, code text, "inputProfile" text, instance boolean, kind text, "outputProfile" text, system boolean, type boolean, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."OperationDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."OperationDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."OperationDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."OperationOutcome" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."OperationOutcome_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."OperationOutcome_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."OperationOutcome_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Organization" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, active boolean, endpoint text[], name text[], partof text, phonetic text, type text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."OrganizationAffiliation" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, active boolean, date timestamp with time zone, endpoint text[], location text[], network text[], "participatingOrganization" text, "primaryOrganization" text, role text[], service text[], specialty text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."OrganizationAffiliation_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."OrganizationAffiliation_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."OrganizationAffiliation_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Organization_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Organization_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Organization_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Parameters" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Parameters_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Parameters_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Parameters_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."PasswordChangeRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "user" text, "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."PasswordChangeRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PasswordChangeRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PasswordChangeRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Patient" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, active boolean, birthdate date, "deathDate" timestamp with time zone, deceased boolean, gender text, "generalPractitioner" text[], language text[], link text[], organization text, phonetic text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, ethnicity text[], "genderIdentity" text[], race text[] );'
  );
  await client.query(
    'CREATE TABLE public."Patient_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Patient_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Patient_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."PaymentNotice" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, created timestamp with time zone, "paymentStatus" text, provider text, request text, response text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."PaymentNotice_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PaymentNotice_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PaymentNotice_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."PaymentReconciliation" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, created timestamp with time zone, disposition text, outcome text, "paymentIssuer" text, request text, requestor text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."PaymentReconciliation_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PaymentReconciliation_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PaymentReconciliation_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Person" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, birthdate date, gender text, phonetic text[], link text[], organization text, patient text[], practitioner text[], relatedperson text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Person_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Person_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Person_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."PlanDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, definition text[], "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], type text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."PlanDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PlanDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PlanDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Practitioner" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, gender text, phonetic text[], active boolean, communication text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."PractitionerRole" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, active boolean, date timestamp with time zone, endpoint text[], location text[], organization text, practitioner text, role text[], service text[], specialty text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."PractitionerRole_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PractitionerRole_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."PractitionerRole_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Practitioner_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Practitioner_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Practitioner_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Procedure" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, date timestamp with time zone, patient text, encounter text, "basedOn" text[], category text, "instantiatesCanonical" text[], "instantiatesUri" text[], location text, "partOf" text[], performer text[], "reasonCode" text[], "reasonReference" text[], status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Procedure_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Procedure_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Procedure_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Project" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, name text, deleted boolean DEFAULT false NOT NULL, owner text, "googleClientId" text[], "recaptchaSiteKey" text[], _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ProjectMembership" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, project text, "user" text, deleted boolean DEFAULT false NOT NULL, profile text DEFAULT \'\'::text, _profile text[], _security text[], _source text, _tag text[], "profileType" text, "externalId" text, "projectId" uuid, "accessPolicy" text[], "userName" text );'
  );
  await client.query(
    'CREATE TABLE public."ProjectMembership_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ProjectMembership_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ProjectMembership_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Project_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Project_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Project_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Provenance" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, agent text[], "agentRole" text[], "agentType" text[], entity text[], location text, patient text[], recorded timestamp with time zone, "signatureType" text[], target text[], "when" timestamp with time zone, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Provenance_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Provenance_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Provenance_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Questionnaire" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, definition text[], description text, effective timestamp with time zone, jurisdiction text[], name text, publisher text, status text, "subjectType" text[], title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."QuestionnaireResponse" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, author text, authored timestamp with time zone, "basedOn" text[], encounter text, "partOf" text[], patient text, questionnaire text, source text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."QuestionnaireResponse_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."QuestionnaireResponse_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."QuestionnaireResponse_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Questionnaire_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Questionnaire_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Questionnaire_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."RelatedPerson" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, birthdate date, gender text, phonetic text[], active boolean, patient text, relationship text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."RelatedPerson_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RelatedPerson_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RelatedPerson_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."RequestGroup" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, author text, authored timestamp with time zone, code text, encounter text, "groupIdentifier" text, "instantiatesCanonical" text[], "instantiatesUri" text[], intent text, participant text[], patient text, priority text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, "priorityOrder" integer );'
  );
  await client.query(
    'CREATE TABLE public."RequestGroup_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RequestGroup_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RequestGroup_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ResearchDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ResearchDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ResearchElementDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "composedOf" text[], context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, "dependsOn" text[], "derivedFrom" text[], description text, effective timestamp with time zone, jurisdiction text[], name text, predecessor text[], publisher text, status text, successor text[], title text, topic text[], url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ResearchElementDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchElementDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchElementDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ResearchStudy" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, category text[], date timestamp with time zone, focus text[], keyword text[], location text[], partof text[], principalinvestigator text, protocol text[], site text[], sponsor text, status text, title text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ResearchStudy_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchStudy_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchStudy_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ResearchSubject" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, individual text, patient text, status text, study text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ResearchSubject_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchSubject_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ResearchSubject_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."RiskAssessment" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, patient text, encounter text, condition text, method text, performer text, probability double precision[], risk text[], subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."RiskAssessment_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RiskAssessment_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RiskAssessment_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."RiskEvidenceSynthesis" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, effective timestamp with time zone, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."RiskEvidenceSynthesis_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RiskEvidenceSynthesis_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."RiskEvidenceSynthesis_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Schedule" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, active boolean, actor text[], date timestamp with time zone, "serviceCategory" text[], "serviceType" text[], specialty text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Schedule_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Schedule_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Schedule_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SearchParameter" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], base text[], code text, component text[], "derivedFrom" text, target text[], type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SearchParameter_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SearchParameter_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SearchParameter_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ServiceRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text, patient text, encounter text, authored timestamp with time zone, "basedOn" text[], "bodySite" text[], category text[], "instantiatesCanonical" text[], "instantiatesUri" text[], intent text, occurrence timestamp with time zone, performer text[], "performerType" text, priority text, replaces text[], requester text, requisition text, specimen text[], status text, subject text, deleted boolean DEFAULT false NOT NULL, "orderDetail" text[] DEFAULT \'{}\'::text[], _profile text[], _security text[], _source text, _tag text[], "projectId" uuid, "priorityOrder" integer );'
  );
  await client.query(
    'CREATE TABLE public."ServiceRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ServiceRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ServiceRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Slot" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "appointmentType" text, schedule text, "serviceCategory" text[], "serviceType" text[], specialty text[], start timestamp with time zone, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."Slot_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Slot_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Slot_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SmartAppLaunch" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SmartAppLaunch_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SmartAppLaunch_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SmartAppLaunch_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Specimen" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, accession text, bodysite text, collected timestamp with time zone, collector text, container text[], "containerId" text[], parent text[], patient text, status text, subject text, type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SpecimenDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, container text[], type text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SpecimenDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SpecimenDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SpecimenDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Specimen_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Specimen_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Specimen_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."StructureDefinition" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], abstract boolean, base text, "basePath" text[], derivation text, experimental boolean, "extContext" text[], keyword text[], kind text, path text[], type text, valueset text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."StructureDefinition_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."StructureDefinition_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."StructureDefinition_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."StructureMap" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."StructureMap_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."StructureMap_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."StructureMap_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Subscription" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, contact text[], criteria text, payload text, status text, type text, url text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubscriptionStatus" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, _source text, _tag text[], _profile text[], "projectId" uuid, _security text[] );'
  );
  await client.query(
    'CREATE TABLE public."SubscriptionStatus_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubscriptionStatus_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubscriptionStatus_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Subscription_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Subscription_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Subscription_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Substance" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, category text[], code text[], "containerIdentifier" text[], expiry timestamp with time zone[], quantity double precision[], status text, "substanceReference" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceNucleicAcid" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceNucleicAcid_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceNucleicAcid_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceNucleicAcid_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SubstancePolymer" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubstancePolymer_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstancePolymer_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstancePolymer_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceProtein" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceProtein_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceProtein_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceProtein_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceReferenceInformation" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceReferenceInformation_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceReferenceInformation_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceReferenceInformation_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSourceMaterial" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSourceMaterial_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSourceMaterial_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSourceMaterial_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSpecification" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, code text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSpecification_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSpecification_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SubstanceSpecification_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Substance_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Substance_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Substance_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SupplyDelivery" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, receiver text[], status text, supplier text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SupplyDelivery_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SupplyDelivery_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SupplyDelivery_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."SupplyRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, date timestamp with time zone, category text, requester text, status text, subject text, supplier text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."SupplyRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SupplyRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."SupplyRequest_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."Task" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, "authoredOn" timestamp with time zone, "basedOn" text[], "businessStatus" text, code text, encounter text, focus text, "groupIdentifier" text, intent text, modified timestamp with time zone, owner text, "partOf" text[], patient text, performer text[], period timestamp with time zone, priority text, requester text, status text, subject text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "dueDate" timestamp with time zone, "projectId" uuid, "priorityOrder" integer );'
  );
  await client.query(
    'CREATE TABLE public."Task_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Task_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."Task_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."TerminologyCapabilities" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."TerminologyCapabilities_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."TerminologyCapabilities_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."TerminologyCapabilities_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."TestReport" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, issued timestamp with time zone, participant text[], result text, tester text, testscript text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."TestReport_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."TestReport_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."TestReport_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."TestScript" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, "testscriptCapability" text[], title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."TestScript_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."TestScript_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."TestScript_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."User" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, email text, deleted boolean DEFAULT false NOT NULL, project text, _profile text[], _security text[], _source text, _tag text[], "externalId" text, "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."UserConfiguration" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, name text DEFAULT \'\'::text, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."UserConfiguration_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."UserConfiguration_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."UserConfiguration_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."UserSecurityRequest" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, deleted boolean DEFAULT false NOT NULL, compartments uuid[] NOT NULL, "projectId" uuid, _source text, _tag text[], _profile text[], _security text[], "user" text );'
  );
  await client.query(
    'CREATE TABLE public."UserSecurityRequest_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."UserSecurityRequest_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."UserSecurityRequest_Token" ( "resourceId" uuid NOT NULL, index integer, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."User_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."User_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."User_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."ValueSet" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, context text[], "contextQuantity" double precision[], "contextType" text[], date timestamp with time zone, description text, jurisdiction text[], name text, publisher text, status text, title text, url text, version text, "contextTypeQuantity" text[], "contextTypeValue" text[], code text[], expansion text, reference text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."ValueSetElement" ( system text, code text, display text, "valueSet" text, "resourceId" uuid, index integer );'
  );
  await client.query(
    'CREATE TABLE public."ValueSet_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query('CREATE TABLE public."ValueSet_Membership" ( "valueSet" uuid NOT NULL, coding bigint NOT NULL );');
  await client.query(
    'CREATE TABLE public."ValueSet_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."ValueSet_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."VerificationResult" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, target text[], deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."VerificationResult_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."VerificationResult_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."VerificationResult_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'CREATE TABLE public."VisionPrescription" ( id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL, compartments uuid[] NOT NULL, patient text, encounter text, datewritten timestamp with time zone, prescriber text, status text, deleted boolean DEFAULT false NOT NULL, _profile text[], _security text[], _source text, _tag text[], "projectId" uuid );'
  );
  await client.query(
    'CREATE TABLE public."VisionPrescription_History" ( "versionId" uuid NOT NULL, id uuid NOT NULL, content text NOT NULL, "lastUpdated" timestamp with time zone NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."VisionPrescription_References" ( "resourceId" uuid NOT NULL, "targetId" uuid NOT NULL, code text NOT NULL );'
  );
  await client.query(
    'CREATE TABLE public."VisionPrescription_Token" ( "resourceId" uuid NOT NULL, code text NOT NULL, system text, value text );'
  );
  await client.query(
    'ALTER TABLE ONLY public."CodeSystem_Property" ALTER COLUMN id SET DEFAULT nextval(\'public."CodeSystem_Property_id_seq"\'::regclass);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Coding" ALTER COLUMN id SET DEFAULT nextval(\'public."Coding_id_seq"\'::regclass);'
  );
  await client.query('SELECT pg_catalog.setval(\'public."CodeSystem_Property_id_seq"\', 325, true);');
  await client.query('SELECT pg_catalog.setval(\'public."Coding_id_seq"\', 20787, true);');
  await client.query(
    'ALTER TABLE ONLY public."AccessPolicy_History" ADD CONSTRAINT "AccessPolicy_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."AccessPolicy_References" ADD CONSTRAINT "AccessPolicy_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."AccessPolicy" ADD CONSTRAINT "AccessPolicy_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Account_History" ADD CONSTRAINT "Account_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Account_References" ADD CONSTRAINT "Account_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Account" ADD CONSTRAINT "Account_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ActivityDefinition_History" ADD CONSTRAINT "ActivityDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ActivityDefinition_References" ADD CONSTRAINT "ActivityDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ActivityDefinition" ADD CONSTRAINT "ActivityDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."AdverseEvent_History" ADD CONSTRAINT "AdverseEvent_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."AdverseEvent_References" ADD CONSTRAINT "AdverseEvent_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."AdverseEvent" ADD CONSTRAINT "AdverseEvent_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Agent_History" ADD CONSTRAINT "Agent_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Agent_References" ADD CONSTRAINT "Agent_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Agent" ADD CONSTRAINT "Agent_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."AllergyIntolerance_History" ADD CONSTRAINT "AllergyIntolerance_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."AllergyIntolerance_References" ADD CONSTRAINT "AllergyIntolerance_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."AllergyIntolerance" ADD CONSTRAINT "AllergyIntolerance_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."AppointmentResponse_History" ADD CONSTRAINT "AppointmentResponse_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."AppointmentResponse_References" ADD CONSTRAINT "AppointmentResponse_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."AppointmentResponse" ADD CONSTRAINT "AppointmentResponse_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Appointment_History" ADD CONSTRAINT "Appointment_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Appointment_References" ADD CONSTRAINT "Appointment_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Appointment" ADD CONSTRAINT "Appointment_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."AsyncJob_History" ADD CONSTRAINT "AsyncJob_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."AsyncJob_References" ADD CONSTRAINT "AsyncJob_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."AsyncJob" ADD CONSTRAINT "AsyncJob_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."AuditEvent_History" ADD CONSTRAINT "AuditEvent_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."AuditEvent_References" ADD CONSTRAINT "AuditEvent_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."AuditEvent" ADD CONSTRAINT "AuditEvent_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Basic_History" ADD CONSTRAINT "Basic_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Basic_References" ADD CONSTRAINT "Basic_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Basic" ADD CONSTRAINT "Basic_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Binary_History" ADD CONSTRAINT "Binary_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Binary_References" ADD CONSTRAINT "Binary_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Binary" ADD CONSTRAINT "Binary_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."BiologicallyDerivedProduct_History" ADD CONSTRAINT "BiologicallyDerivedProduct_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."BiologicallyDerivedProduct_References" ADD CONSTRAINT "BiologicallyDerivedProduct_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."BiologicallyDerivedProduct" ADD CONSTRAINT "BiologicallyDerivedProduct_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."BodyStructure_History" ADD CONSTRAINT "BodyStructure_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."BodyStructure_References" ADD CONSTRAINT "BodyStructure_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."BodyStructure" ADD CONSTRAINT "BodyStructure_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Bot_History" ADD CONSTRAINT "Bot_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Bot_References" ADD CONSTRAINT "Bot_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Bot" ADD CONSTRAINT "Bot_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."BulkDataExport_History" ADD CONSTRAINT "BulkDataExport_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."BulkDataExport_References" ADD CONSTRAINT "BulkDataExport_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."BulkDataExport" ADD CONSTRAINT "BulkDataExport_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Bundle_History" ADD CONSTRAINT "Bundle_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Bundle_References" ADD CONSTRAINT "Bundle_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Bundle" ADD CONSTRAINT "Bundle_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."CapabilityStatement_History" ADD CONSTRAINT "CapabilityStatement_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CapabilityStatement_References" ADD CONSTRAINT "CapabilityStatement_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CapabilityStatement" ADD CONSTRAINT "CapabilityStatement_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CarePlan_History" ADD CONSTRAINT "CarePlan_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CarePlan_References" ADD CONSTRAINT "CarePlan_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."CarePlan" ADD CONSTRAINT "CarePlan_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."CareTeam_History" ADD CONSTRAINT "CareTeam_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CareTeam_References" ADD CONSTRAINT "CareTeam_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."CareTeam" ADD CONSTRAINT "CareTeam_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."CatalogEntry_History" ADD CONSTRAINT "CatalogEntry_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CatalogEntry_References" ADD CONSTRAINT "CatalogEntry_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."CatalogEntry" ADD CONSTRAINT "CatalogEntry_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ChargeItemDefinition_History" ADD CONSTRAINT "ChargeItemDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ChargeItemDefinition_References" ADD CONSTRAINT "ChargeItemDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ChargeItemDefinition" ADD CONSTRAINT "ChargeItemDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ChargeItem_History" ADD CONSTRAINT "ChargeItem_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ChargeItem_References" ADD CONSTRAINT "ChargeItem_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."ChargeItem" ADD CONSTRAINT "ChargeItem_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ClaimResponse_History" ADD CONSTRAINT "ClaimResponse_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ClaimResponse_References" ADD CONSTRAINT "ClaimResponse_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."ClaimResponse" ADD CONSTRAINT "ClaimResponse_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Claim_History" ADD CONSTRAINT "Claim_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Claim_References" ADD CONSTRAINT "Claim_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Claim" ADD CONSTRAINT "Claim_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ClientApplication_History" ADD CONSTRAINT "ClientApplication_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ClientApplication_References" ADD CONSTRAINT "ClientApplication_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ClientApplication" ADD CONSTRAINT "ClientApplication_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ClinicalImpression_History" ADD CONSTRAINT "ClinicalImpression_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ClinicalImpression_References" ADD CONSTRAINT "ClinicalImpression_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ClinicalImpression" ADD CONSTRAINT "ClinicalImpression_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CodeSystem_History" ADD CONSTRAINT "CodeSystem_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CodeSystem_Property" ADD CONSTRAINT "CodeSystem_Property_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CodeSystem_References" ADD CONSTRAINT "CodeSystem_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."CodeSystem" ADD CONSTRAINT "CodeSystem_pkey" PRIMARY KEY (id);');
  await client.query('ALTER TABLE ONLY public."Coding" ADD CONSTRAINT "Coding_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."CommunicationRequest_History" ADD CONSTRAINT "CommunicationRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CommunicationRequest_References" ADD CONSTRAINT "CommunicationRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CommunicationRequest" ADD CONSTRAINT "CommunicationRequest_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Communication_History" ADD CONSTRAINT "Communication_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Communication_References" ADD CONSTRAINT "Communication_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Communication" ADD CONSTRAINT "Communication_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."CompartmentDefinition_History" ADD CONSTRAINT "CompartmentDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CompartmentDefinition_References" ADD CONSTRAINT "CompartmentDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CompartmentDefinition" ADD CONSTRAINT "CompartmentDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Composition_History" ADD CONSTRAINT "Composition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Composition_References" ADD CONSTRAINT "Composition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Composition" ADD CONSTRAINT "Composition_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ConceptMap_History" ADD CONSTRAINT "ConceptMap_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ConceptMap_References" ADD CONSTRAINT "ConceptMap_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."ConceptMap" ADD CONSTRAINT "ConceptMap_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Condition_History" ADD CONSTRAINT "Condition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Condition_References" ADD CONSTRAINT "Condition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Condition" ADD CONSTRAINT "Condition_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Consent_History" ADD CONSTRAINT "Consent_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Consent_References" ADD CONSTRAINT "Consent_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Consent" ADD CONSTRAINT "Consent_pkey" PRIMARY KEY (id);');
  await client.query('ALTER TABLE ONLY public."ContactPoint" ADD CONSTRAINT "ContactPoint_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Contract_History" ADD CONSTRAINT "Contract_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Contract_References" ADD CONSTRAINT "Contract_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Contract" ADD CONSTRAINT "Contract_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."CoverageEligibilityRequest_History" ADD CONSTRAINT "CoverageEligibilityRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CoverageEligibilityRequest_References" ADD CONSTRAINT "CoverageEligibilityRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CoverageEligibilityRequest" ADD CONSTRAINT "CoverageEligibilityRequest_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CoverageEligibilityResponse_History" ADD CONSTRAINT "CoverageEligibilityResponse_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."CoverageEligibilityResponse_References" ADD CONSTRAINT "CoverageEligibilityResponse_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."CoverageEligibilityResponse" ADD CONSTRAINT "CoverageEligibilityResponse_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Coverage_History" ADD CONSTRAINT "Coverage_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Coverage_References" ADD CONSTRAINT "Coverage_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Coverage" ADD CONSTRAINT "Coverage_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."DatabaseMigration" ADD CONSTRAINT "DatabaseMigration_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DetectedIssue_History" ADD CONSTRAINT "DetectedIssue_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DetectedIssue_References" ADD CONSTRAINT "DetectedIssue_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."DetectedIssue" ADD CONSTRAINT "DetectedIssue_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."DeviceDefinition_History" ADD CONSTRAINT "DeviceDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DeviceDefinition_References" ADD CONSTRAINT "DeviceDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DeviceDefinition" ADD CONSTRAINT "DeviceDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DeviceMetric_History" ADD CONSTRAINT "DeviceMetric_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DeviceMetric_References" ADD CONSTRAINT "DeviceMetric_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."DeviceMetric" ADD CONSTRAINT "DeviceMetric_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."DeviceRequest_History" ADD CONSTRAINT "DeviceRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DeviceRequest_References" ADD CONSTRAINT "DeviceRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."DeviceRequest" ADD CONSTRAINT "DeviceRequest_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."DeviceUseStatement_History" ADD CONSTRAINT "DeviceUseStatement_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DeviceUseStatement_References" ADD CONSTRAINT "DeviceUseStatement_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DeviceUseStatement" ADD CONSTRAINT "DeviceUseStatement_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Device_History" ADD CONSTRAINT "Device_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Device_References" ADD CONSTRAINT "Device_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Device" ADD CONSTRAINT "Device_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."DiagnosticReport_History" ADD CONSTRAINT "DiagnosticReport_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DiagnosticReport_References" ADD CONSTRAINT "DiagnosticReport_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DiagnosticReport" ADD CONSTRAINT "DiagnosticReport_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DocumentManifest_History" ADD CONSTRAINT "DocumentManifest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DocumentManifest_References" ADD CONSTRAINT "DocumentManifest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DocumentManifest" ADD CONSTRAINT "DocumentManifest_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DocumentReference_History" ADD CONSTRAINT "DocumentReference_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DocumentReference_References" ADD CONSTRAINT "DocumentReference_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DocumentReference" ADD CONSTRAINT "DocumentReference_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DomainConfiguration_History" ADD CONSTRAINT "DomainConfiguration_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."DomainConfiguration_References" ADD CONSTRAINT "DomainConfiguration_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."DomainConfiguration" ADD CONSTRAINT "DomainConfiguration_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EffectEvidenceSynthesis_History" ADD CONSTRAINT "EffectEvidenceSynthesis_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."EffectEvidenceSynthesis_References" ADD CONSTRAINT "EffectEvidenceSynthesis_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EffectEvidenceSynthesis" ADD CONSTRAINT "EffectEvidenceSynthesis_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Encounter_History" ADD CONSTRAINT "Encounter_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Encounter_References" ADD CONSTRAINT "Encounter_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Encounter" ADD CONSTRAINT "Encounter_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Endpoint_History" ADD CONSTRAINT "Endpoint_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Endpoint_References" ADD CONSTRAINT "Endpoint_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Endpoint" ADD CONSTRAINT "Endpoint_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."EnrollmentRequest_History" ADD CONSTRAINT "EnrollmentRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."EnrollmentRequest_References" ADD CONSTRAINT "EnrollmentRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EnrollmentRequest" ADD CONSTRAINT "EnrollmentRequest_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EnrollmentResponse_History" ADD CONSTRAINT "EnrollmentResponse_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."EnrollmentResponse_References" ADD CONSTRAINT "EnrollmentResponse_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EnrollmentResponse" ADD CONSTRAINT "EnrollmentResponse_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EpisodeOfCare_History" ADD CONSTRAINT "EpisodeOfCare_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."EpisodeOfCare_References" ADD CONSTRAINT "EpisodeOfCare_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."EpisodeOfCare" ADD CONSTRAINT "EpisodeOfCare_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."EventDefinition_History" ADD CONSTRAINT "EventDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."EventDefinition_References" ADD CONSTRAINT "EventDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EventDefinition" ADD CONSTRAINT "EventDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EvidenceVariable_History" ADD CONSTRAINT "EvidenceVariable_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."EvidenceVariable_References" ADD CONSTRAINT "EvidenceVariable_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."EvidenceVariable" ADD CONSTRAINT "EvidenceVariable_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Evidence_History" ADD CONSTRAINT "Evidence_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Evidence_References" ADD CONSTRAINT "Evidence_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Evidence" ADD CONSTRAINT "Evidence_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ExampleScenario_History" ADD CONSTRAINT "ExampleScenario_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ExampleScenario_References" ADD CONSTRAINT "ExampleScenario_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ExampleScenario" ADD CONSTRAINT "ExampleScenario_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ExplanationOfBenefit_History" ADD CONSTRAINT "ExplanationOfBenefit_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ExplanationOfBenefit_References" ADD CONSTRAINT "ExplanationOfBenefit_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ExplanationOfBenefit" ADD CONSTRAINT "ExplanationOfBenefit_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."FamilyMemberHistory_History" ADD CONSTRAINT "FamilyMemberHistory_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."FamilyMemberHistory_References" ADD CONSTRAINT "FamilyMemberHistory_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."FamilyMemberHistory" ADD CONSTRAINT "FamilyMemberHistory_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Flag_History" ADD CONSTRAINT "Flag_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Flag_References" ADD CONSTRAINT "Flag_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Flag" ADD CONSTRAINT "Flag_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Goal_History" ADD CONSTRAINT "Goal_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Goal_References" ADD CONSTRAINT "Goal_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Goal" ADD CONSTRAINT "Goal_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."GraphDefinition_History" ADD CONSTRAINT "GraphDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."GraphDefinition_References" ADD CONSTRAINT "GraphDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."GraphDefinition" ADD CONSTRAINT "GraphDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Group_History" ADD CONSTRAINT "Group_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Group_References" ADD CONSTRAINT "Group_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Group" ADD CONSTRAINT "Group_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."GuidanceResponse_History" ADD CONSTRAINT "GuidanceResponse_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."GuidanceResponse_References" ADD CONSTRAINT "GuidanceResponse_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."GuidanceResponse" ADD CONSTRAINT "GuidanceResponse_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."HealthcareService_History" ADD CONSTRAINT "HealthcareService_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."HealthcareService_References" ADD CONSTRAINT "HealthcareService_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."HealthcareService" ADD CONSTRAINT "HealthcareService_pkey" PRIMARY KEY (id);'
  );
  await client.query('ALTER TABLE ONLY public."Identifier" ADD CONSTRAINT "Identifier_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ImagingStudy_History" ADD CONSTRAINT "ImagingStudy_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImagingStudy_References" ADD CONSTRAINT "ImagingStudy_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."ImagingStudy" ADD CONSTRAINT "ImagingStudy_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ImmunizationEvaluation_History" ADD CONSTRAINT "ImmunizationEvaluation_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImmunizationEvaluation_References" ADD CONSTRAINT "ImmunizationEvaluation_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImmunizationEvaluation" ADD CONSTRAINT "ImmunizationEvaluation_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImmunizationRecommendation_History" ADD CONSTRAINT "ImmunizationRecommendation_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImmunizationRecommendation_References" ADD CONSTRAINT "ImmunizationRecommendation_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImmunizationRecommendation" ADD CONSTRAINT "ImmunizationRecommendation_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Immunization_History" ADD CONSTRAINT "Immunization_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Immunization_References" ADD CONSTRAINT "Immunization_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Immunization" ADD CONSTRAINT "Immunization_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ImplementationGuide_History" ADD CONSTRAINT "ImplementationGuide_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImplementationGuide_References" ADD CONSTRAINT "ImplementationGuide_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ImplementationGuide" ADD CONSTRAINT "ImplementationGuide_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."InsurancePlan_History" ADD CONSTRAINT "InsurancePlan_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."InsurancePlan_References" ADD CONSTRAINT "InsurancePlan_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."InsurancePlan" ADD CONSTRAINT "InsurancePlan_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Invoice_History" ADD CONSTRAINT "Invoice_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Invoice_References" ADD CONSTRAINT "Invoice_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Invoice" ADD CONSTRAINT "Invoice_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."JsonWebKey_History" ADD CONSTRAINT "JsonWebKey_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."JsonWebKey_References" ADD CONSTRAINT "JsonWebKey_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."JsonWebKey" ADD CONSTRAINT "JsonWebKey_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Library_History" ADD CONSTRAINT "Library_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Library_References" ADD CONSTRAINT "Library_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Library" ADD CONSTRAINT "Library_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Linkage_History" ADD CONSTRAINT "Linkage_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Linkage_References" ADD CONSTRAINT "Linkage_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Linkage" ADD CONSTRAINT "Linkage_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."List_History" ADD CONSTRAINT "List_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."List_References" ADD CONSTRAINT "List_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."List" ADD CONSTRAINT "List_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Location_History" ADD CONSTRAINT "Location_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Location_References" ADD CONSTRAINT "Location_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Location" ADD CONSTRAINT "Location_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Login_History" ADD CONSTRAINT "Login_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Login_References" ADD CONSTRAINT "Login_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Login" ADD CONSTRAINT "Login_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."MeasureReport_History" ADD CONSTRAINT "MeasureReport_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MeasureReport_References" ADD CONSTRAINT "MeasureReport_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."MeasureReport" ADD CONSTRAINT "MeasureReport_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Measure_History" ADD CONSTRAINT "Measure_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Measure_References" ADD CONSTRAINT "Measure_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Measure" ADD CONSTRAINT "Measure_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Media_History" ADD CONSTRAINT "Media_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Media_References" ADD CONSTRAINT "Media_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Media" ADD CONSTRAINT "Media_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."MedicationAdministration_History" ADD CONSTRAINT "MedicationAdministration_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationAdministration_References" ADD CONSTRAINT "MedicationAdministration_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationAdministration" ADD CONSTRAINT "MedicationAdministration_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationDispense_History" ADD CONSTRAINT "MedicationDispense_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationDispense_References" ADD CONSTRAINT "MedicationDispense_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationDispense" ADD CONSTRAINT "MedicationDispense_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationKnowledge_History" ADD CONSTRAINT "MedicationKnowledge_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationKnowledge_References" ADD CONSTRAINT "MedicationKnowledge_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationKnowledge" ADD CONSTRAINT "MedicationKnowledge_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationRequest_History" ADD CONSTRAINT "MedicationRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationRequest_References" ADD CONSTRAINT "MedicationRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationRequest" ADD CONSTRAINT "MedicationRequest_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationStatement_History" ADD CONSTRAINT "MedicationStatement_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationStatement_References" ADD CONSTRAINT "MedicationStatement_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicationStatement" ADD CONSTRAINT "MedicationStatement_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Medication_History" ADD CONSTRAINT "Medication_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Medication_References" ADD CONSTRAINT "Medication_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Medication" ADD CONSTRAINT "Medication_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductAuthorization_History" ADD CONSTRAINT "MedicinalProductAuthorization_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductAuthorization_References" ADD CONSTRAINT "MedicinalProductAuthorization_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductAuthorization" ADD CONSTRAINT "MedicinalProductAuthorization_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductContraindication_History" ADD CONSTRAINT "MedicinalProductContraindication_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductContraindication_References" ADD CONSTRAINT "MedicinalProductContraindication_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductContraindication" ADD CONSTRAINT "MedicinalProductContraindication_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductIndication_History" ADD CONSTRAINT "MedicinalProductIndication_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductIndication_References" ADD CONSTRAINT "MedicinalProductIndication_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductIndication" ADD CONSTRAINT "MedicinalProductIndication_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductIngredient_History" ADD CONSTRAINT "MedicinalProductIngredient_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductIngredient_References" ADD CONSTRAINT "MedicinalProductIngredient_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductIngredient" ADD CONSTRAINT "MedicinalProductIngredient_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductInteraction_History" ADD CONSTRAINT "MedicinalProductInteraction_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductInteraction_References" ADD CONSTRAINT "MedicinalProductInteraction_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductInteraction" ADD CONSTRAINT "MedicinalProductInteraction_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductManufactured_History" ADD CONSTRAINT "MedicinalProductManufactured_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductManufactured_References" ADD CONSTRAINT "MedicinalProductManufactured_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductManufactured" ADD CONSTRAINT "MedicinalProductManufactured_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductPackaged_History" ADD CONSTRAINT "MedicinalProductPackaged_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductPackaged_References" ADD CONSTRAINT "MedicinalProductPackaged_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductPackaged" ADD CONSTRAINT "MedicinalProductPackaged_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductPharmaceutical_History" ADD CONSTRAINT "MedicinalProductPharmaceutical_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductPharmaceutical_References" ADD CONSTRAINT "MedicinalProductPharmaceutical_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductPharmaceutical" ADD CONSTRAINT "MedicinalProductPharmaceutical_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductUndesirableEffect_History" ADD CONSTRAINT "MedicinalProductUndesirableEffect_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductUndesirableEffect_References" ADD CONSTRAINT "MedicinalProductUndesirableEffect_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProductUndesirableEffect" ADD CONSTRAINT "MedicinalProductUndesirableEffect_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProduct_History" ADD CONSTRAINT "MedicinalProduct_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProduct_References" ADD CONSTRAINT "MedicinalProduct_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MedicinalProduct" ADD CONSTRAINT "MedicinalProduct_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MessageDefinition_History" ADD CONSTRAINT "MessageDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MessageDefinition_References" ADD CONSTRAINT "MessageDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MessageDefinition" ADD CONSTRAINT "MessageDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MessageHeader_History" ADD CONSTRAINT "MessageHeader_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MessageHeader_References" ADD CONSTRAINT "MessageHeader_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."MessageHeader" ADD CONSTRAINT "MessageHeader_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."MolecularSequence_History" ADD CONSTRAINT "MolecularSequence_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."MolecularSequence_References" ADD CONSTRAINT "MolecularSequence_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."MolecularSequence" ADD CONSTRAINT "MolecularSequence_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."NamingSystem_History" ADD CONSTRAINT "NamingSystem_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."NamingSystem_References" ADD CONSTRAINT "NamingSystem_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."NamingSystem" ADD CONSTRAINT "NamingSystem_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."NutritionOrder_History" ADD CONSTRAINT "NutritionOrder_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."NutritionOrder_References" ADD CONSTRAINT "NutritionOrder_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."NutritionOrder" ADD CONSTRAINT "NutritionOrder_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ObservationDefinition_History" ADD CONSTRAINT "ObservationDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ObservationDefinition_References" ADD CONSTRAINT "ObservationDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ObservationDefinition" ADD CONSTRAINT "ObservationDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Observation_History" ADD CONSTRAINT "Observation_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Observation_References" ADD CONSTRAINT "Observation_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Observation" ADD CONSTRAINT "Observation_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."OperationDefinition_History" ADD CONSTRAINT "OperationDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."OperationDefinition_References" ADD CONSTRAINT "OperationDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."OperationDefinition" ADD CONSTRAINT "OperationDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."OperationOutcome_History" ADD CONSTRAINT "OperationOutcome_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."OperationOutcome_References" ADD CONSTRAINT "OperationOutcome_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."OperationOutcome" ADD CONSTRAINT "OperationOutcome_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."OrganizationAffiliation_History" ADD CONSTRAINT "OrganizationAffiliation_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."OrganizationAffiliation_References" ADD CONSTRAINT "OrganizationAffiliation_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."OrganizationAffiliation" ADD CONSTRAINT "OrganizationAffiliation_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Organization_History" ADD CONSTRAINT "Organization_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Organization_References" ADD CONSTRAINT "Organization_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Organization" ADD CONSTRAINT "Organization_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Parameters_History" ADD CONSTRAINT "Parameters_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Parameters_References" ADD CONSTRAINT "Parameters_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Parameters" ADD CONSTRAINT "Parameters_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."PasswordChangeRequest_History" ADD CONSTRAINT "PasswordChangeRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."PasswordChangeRequest_References" ADD CONSTRAINT "PasswordChangeRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."PasswordChangeRequest" ADD CONSTRAINT "PasswordChangeRequest_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Patient_History" ADD CONSTRAINT "Patient_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Patient_References" ADD CONSTRAINT "Patient_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Patient" ADD CONSTRAINT "Patient_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."PaymentNotice_History" ADD CONSTRAINT "PaymentNotice_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."PaymentNotice_References" ADD CONSTRAINT "PaymentNotice_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."PaymentNotice" ADD CONSTRAINT "PaymentNotice_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."PaymentReconciliation_History" ADD CONSTRAINT "PaymentReconciliation_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."PaymentReconciliation_References" ADD CONSTRAINT "PaymentReconciliation_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."PaymentReconciliation" ADD CONSTRAINT "PaymentReconciliation_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Person_History" ADD CONSTRAINT "Person_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Person_References" ADD CONSTRAINT "Person_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Person" ADD CONSTRAINT "Person_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."PlanDefinition_History" ADD CONSTRAINT "PlanDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."PlanDefinition_References" ADD CONSTRAINT "PlanDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."PlanDefinition" ADD CONSTRAINT "PlanDefinition_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."PractitionerRole_History" ADD CONSTRAINT "PractitionerRole_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."PractitionerRole_References" ADD CONSTRAINT "PractitionerRole_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."PractitionerRole" ADD CONSTRAINT "PractitionerRole_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Practitioner_History" ADD CONSTRAINT "Practitioner_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Practitioner_References" ADD CONSTRAINT "Practitioner_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Practitioner" ADD CONSTRAINT "Practitioner_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Procedure_History" ADD CONSTRAINT "Procedure_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Procedure_References" ADD CONSTRAINT "Procedure_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Procedure" ADD CONSTRAINT "Procedure_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ProjectMembership_History" ADD CONSTRAINT "ProjectMembership_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ProjectMembership_References" ADD CONSTRAINT "ProjectMembership_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ProjectMembership" ADD CONSTRAINT "ProjectMembership_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Project_History" ADD CONSTRAINT "Project_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Project_References" ADD CONSTRAINT "Project_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Project" ADD CONSTRAINT "Project_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Provenance_History" ADD CONSTRAINT "Provenance_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Provenance_References" ADD CONSTRAINT "Provenance_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Provenance" ADD CONSTRAINT "Provenance_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."QuestionnaireResponse_History" ADD CONSTRAINT "QuestionnaireResponse_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."QuestionnaireResponse_References" ADD CONSTRAINT "QuestionnaireResponse_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."QuestionnaireResponse" ADD CONSTRAINT "QuestionnaireResponse_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Questionnaire_History" ADD CONSTRAINT "Questionnaire_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Questionnaire_References" ADD CONSTRAINT "Questionnaire_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Questionnaire" ADD CONSTRAINT "Questionnaire_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."RelatedPerson_History" ADD CONSTRAINT "RelatedPerson_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."RelatedPerson_References" ADD CONSTRAINT "RelatedPerson_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."RelatedPerson" ADD CONSTRAINT "RelatedPerson_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."RequestGroup_History" ADD CONSTRAINT "RequestGroup_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."RequestGroup_References" ADD CONSTRAINT "RequestGroup_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."RequestGroup" ADD CONSTRAINT "RequestGroup_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ResearchDefinition_History" ADD CONSTRAINT "ResearchDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchDefinition_References" ADD CONSTRAINT "ResearchDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchDefinition" ADD CONSTRAINT "ResearchDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchElementDefinition_History" ADD CONSTRAINT "ResearchElementDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchElementDefinition_References" ADD CONSTRAINT "ResearchElementDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchElementDefinition" ADD CONSTRAINT "ResearchElementDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchStudy_History" ADD CONSTRAINT "ResearchStudy_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchStudy_References" ADD CONSTRAINT "ResearchStudy_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."ResearchStudy" ADD CONSTRAINT "ResearchStudy_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ResearchSubject_History" ADD CONSTRAINT "ResearchSubject_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchSubject_References" ADD CONSTRAINT "ResearchSubject_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ResearchSubject" ADD CONSTRAINT "ResearchSubject_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."RiskAssessment_History" ADD CONSTRAINT "RiskAssessment_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."RiskAssessment_References" ADD CONSTRAINT "RiskAssessment_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."RiskAssessment" ADD CONSTRAINT "RiskAssessment_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."RiskEvidenceSynthesis_History" ADD CONSTRAINT "RiskEvidenceSynthesis_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."RiskEvidenceSynthesis_References" ADD CONSTRAINT "RiskEvidenceSynthesis_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."RiskEvidenceSynthesis" ADD CONSTRAINT "RiskEvidenceSynthesis_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Schedule_History" ADD CONSTRAINT "Schedule_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Schedule_References" ADD CONSTRAINT "Schedule_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Schedule" ADD CONSTRAINT "Schedule_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."SearchParameter_History" ADD CONSTRAINT "SearchParameter_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SearchParameter_References" ADD CONSTRAINT "SearchParameter_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SearchParameter" ADD CONSTRAINT "SearchParameter_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ServiceRequest_History" ADD CONSTRAINT "ServiceRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ServiceRequest_References" ADD CONSTRAINT "ServiceRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."ServiceRequest" ADD CONSTRAINT "ServiceRequest_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Slot_History" ADD CONSTRAINT "Slot_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Slot_References" ADD CONSTRAINT "Slot_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Slot" ADD CONSTRAINT "Slot_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."SmartAppLaunch_History" ADD CONSTRAINT "SmartAppLaunch_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SmartAppLaunch_References" ADD CONSTRAINT "SmartAppLaunch_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."SmartAppLaunch" ADD CONSTRAINT "SmartAppLaunch_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."SpecimenDefinition_History" ADD CONSTRAINT "SpecimenDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SpecimenDefinition_References" ADD CONSTRAINT "SpecimenDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SpecimenDefinition" ADD CONSTRAINT "SpecimenDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Specimen_History" ADD CONSTRAINT "Specimen_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Specimen_References" ADD CONSTRAINT "Specimen_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Specimen" ADD CONSTRAINT "Specimen_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."StructureDefinition_History" ADD CONSTRAINT "StructureDefinition_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."StructureDefinition_References" ADD CONSTRAINT "StructureDefinition_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."StructureDefinition" ADD CONSTRAINT "StructureDefinition_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."StructureMap_History" ADD CONSTRAINT "StructureMap_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."StructureMap_References" ADD CONSTRAINT "StructureMap_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."StructureMap" ADD CONSTRAINT "StructureMap_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."SubscriptionStatus_History" ADD CONSTRAINT "SubscriptionStatus_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubscriptionStatus_References" ADD CONSTRAINT "SubscriptionStatus_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubscriptionStatus" ADD CONSTRAINT "SubscriptionStatus_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Subscription_History" ADD CONSTRAINT "Subscription_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Subscription_References" ADD CONSTRAINT "Subscription_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Subscription" ADD CONSTRAINT "Subscription_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."SubstanceNucleicAcid_History" ADD CONSTRAINT "SubstanceNucleicAcid_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceNucleicAcid_References" ADD CONSTRAINT "SubstanceNucleicAcid_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceNucleicAcid" ADD CONSTRAINT "SubstanceNucleicAcid_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstancePolymer_History" ADD CONSTRAINT "SubstancePolymer_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstancePolymer_References" ADD CONSTRAINT "SubstancePolymer_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstancePolymer" ADD CONSTRAINT "SubstancePolymer_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceProtein_History" ADD CONSTRAINT "SubstanceProtein_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceProtein_References" ADD CONSTRAINT "SubstanceProtein_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceProtein" ADD CONSTRAINT "SubstanceProtein_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceReferenceInformation_History" ADD CONSTRAINT "SubstanceReferenceInformation_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceReferenceInformation_References" ADD CONSTRAINT "SubstanceReferenceInformation_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceReferenceInformation" ADD CONSTRAINT "SubstanceReferenceInformation_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceSourceMaterial_History" ADD CONSTRAINT "SubstanceSourceMaterial_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceSourceMaterial_References" ADD CONSTRAINT "SubstanceSourceMaterial_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceSourceMaterial" ADD CONSTRAINT "SubstanceSourceMaterial_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceSpecification_History" ADD CONSTRAINT "SubstanceSpecification_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceSpecification_References" ADD CONSTRAINT "SubstanceSpecification_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."SubstanceSpecification" ADD CONSTRAINT "SubstanceSpecification_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."Substance_History" ADD CONSTRAINT "Substance_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Substance_References" ADD CONSTRAINT "Substance_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Substance" ADD CONSTRAINT "Substance_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."SupplyDelivery_History" ADD CONSTRAINT "SupplyDelivery_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SupplyDelivery_References" ADD CONSTRAINT "SupplyDelivery_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."SupplyDelivery" ADD CONSTRAINT "SupplyDelivery_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."SupplyRequest_History" ADD CONSTRAINT "SupplyRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."SupplyRequest_References" ADD CONSTRAINT "SupplyRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."SupplyRequest" ADD CONSTRAINT "SupplyRequest_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."Task_History" ADD CONSTRAINT "Task_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."Task_References" ADD CONSTRAINT "Task_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."Task" ADD CONSTRAINT "Task_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."TerminologyCapabilities_History" ADD CONSTRAINT "TerminologyCapabilities_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."TerminologyCapabilities_References" ADD CONSTRAINT "TerminologyCapabilities_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."TerminologyCapabilities" ADD CONSTRAINT "TerminologyCapabilities_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."TestReport_History" ADD CONSTRAINT "TestReport_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."TestReport_References" ADD CONSTRAINT "TestReport_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."TestReport" ADD CONSTRAINT "TestReport_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."TestScript_History" ADD CONSTRAINT "TestScript_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."TestScript_References" ADD CONSTRAINT "TestScript_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."TestScript" ADD CONSTRAINT "TestScript_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."UserConfiguration_History" ADD CONSTRAINT "UserConfiguration_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."UserConfiguration_References" ADD CONSTRAINT "UserConfiguration_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."UserConfiguration" ADD CONSTRAINT "UserConfiguration_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."UserSecurityRequest_History" ADD CONSTRAINT "UserSecurityRequest_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."UserSecurityRequest_References" ADD CONSTRAINT "UserSecurityRequest_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."UserSecurityRequest" ADD CONSTRAINT "UserSecurityRequest_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."User_History" ADD CONSTRAINT "User_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."User_References" ADD CONSTRAINT "User_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."User" ADD CONSTRAINT "User_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."ValueSet_History" ADD CONSTRAINT "ValueSet_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."ValueSet_Membership" ADD CONSTRAINT "ValueSet_Membership_pkey" PRIMARY KEY ("valueSet", coding);'
  );
  await client.query(
    'ALTER TABLE ONLY public."ValueSet_References" ADD CONSTRAINT "ValueSet_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query('ALTER TABLE ONLY public."ValueSet" ADD CONSTRAINT "ValueSet_pkey" PRIMARY KEY (id);');
  await client.query(
    'ALTER TABLE ONLY public."VerificationResult_History" ADD CONSTRAINT "VerificationResult_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."VerificationResult_References" ADD CONSTRAINT "VerificationResult_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."VerificationResult" ADD CONSTRAINT "VerificationResult_pkey" PRIMARY KEY (id);'
  );
  await client.query(
    'ALTER TABLE ONLY public."VisionPrescription_History" ADD CONSTRAINT "VisionPrescription_History_pkey" PRIMARY KEY ("versionId");'
  );
  await client.query(
    'ALTER TABLE ONLY public."VisionPrescription_References" ADD CONSTRAINT "VisionPrescription_References_pkey" PRIMARY KEY ("resourceId", "targetId", code);'
  );
  await client.query(
    'ALTER TABLE ONLY public."VisionPrescription" ADD CONSTRAINT "VisionPrescription_pkey" PRIMARY KEY (id);'
  );
  await client.query('CREATE INDEX "AccessPolicy_History_id_idx" ON public."AccessPolicy_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "AccessPolicy_History_lastUpdated_idx" ON public."AccessPolicy_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "AccessPolicy_Token_code_idx" ON public."AccessPolicy_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "AccessPolicy_Token_resourceId_idx" ON public."AccessPolicy_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "AccessPolicy_Token_system_idx" ON public."AccessPolicy_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "AccessPolicy_Token_text_idx_tsv" ON public."AccessPolicy_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "AccessPolicy_Token_value_idx" ON public."AccessPolicy_Token" USING btree (value);');
  await client.query('CREATE INDEX "AccessPolicy__profile_idx" ON public."AccessPolicy" USING gin (_profile);');
  await client.query('CREATE INDEX "AccessPolicy__security_idx" ON public."AccessPolicy" USING gin (_security);');
  await client.query('CREATE INDEX "AccessPolicy__source_idx" ON public."AccessPolicy" USING btree (_source);');
  await client.query('CREATE INDEX "AccessPolicy__tag_idx" ON public."AccessPolicy" USING gin (_tag);');
  await client.query('CREATE INDEX "AccessPolicy_compartments_idx" ON public."AccessPolicy" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "AccessPolicy_lastUpdated_idx" ON public."AccessPolicy" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "AccessPolicy_name_idx" ON public."AccessPolicy" USING btree (name);');
  await client.query('CREATE INDEX "AccessPolicy_projectId_idx" ON public."AccessPolicy" USING btree ("projectId");');
  await client.query('CREATE INDEX "Account_History_id_idx" ON public."Account_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Account_History_lastUpdated_idx" ON public."Account_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Account_Token_code_idx" ON public."Account_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Account_Token_resourceId_idx" ON public."Account_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Account_Token_system_idx" ON public."Account_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Account_Token_text_idx_tsv" ON public."Account_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Account_Token_value_idx" ON public."Account_Token" USING btree (value);');
  await client.query('CREATE INDEX "Account__profile_idx" ON public."Account" USING gin (_profile);');
  await client.query('CREATE INDEX "Account__security_idx" ON public."Account" USING gin (_security);');
  await client.query('CREATE INDEX "Account__source_idx" ON public."Account" USING btree (_source);');
  await client.query('CREATE INDEX "Account__tag_idx" ON public."Account" USING gin (_tag);');
  await client.query('CREATE INDEX "Account_compartments_idx" ON public."Account" USING gin (compartments);');
  await client.query('CREATE INDEX "Account_lastUpdated_idx" ON public."Account" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Account_name_idx" ON public."Account" USING btree (name);');
  await client.query('CREATE INDEX "Account_owner_idx" ON public."Account" USING btree (owner);');
  await client.query('CREATE INDEX "Account_patient_idx" ON public."Account" USING gin (patient);');
  await client.query('CREATE INDEX "Account_period_idx" ON public."Account" USING btree (period);');
  await client.query('CREATE INDEX "Account_projectId_idx" ON public."Account" USING btree ("projectId");');
  await client.query('CREATE INDEX "Account_status_idx" ON public."Account" USING btree (status);');
  await client.query('CREATE INDEX "Account_subject_idx" ON public."Account" USING gin (subject);');
  await client.query(
    'CREATE INDEX "ActivityDefinition_History_id_idx" ON public."ActivityDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_History_lastUpdated_idx" ON public."ActivityDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_Token_code_idx" ON public."ActivityDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_Token_resourceId_idx" ON public."ActivityDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_Token_system_idx" ON public."ActivityDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_Token_text_idx_tsv" ON public."ActivityDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_Token_value_idx" ON public."ActivityDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition__profile_idx" ON public."ActivityDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition__security_idx" ON public."ActivityDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition__source_idx" ON public."ActivityDefinition" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ActivityDefinition__tag_idx" ON public."ActivityDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ActivityDefinition_compartments_idx" ON public."ActivityDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_composedOf_idx" ON public."ActivityDefinition" USING gin ("composedOf");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_contextQuantity_idx" ON public."ActivityDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_contextTypeQuantity_idx" ON public."ActivityDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_contextTypeValue_idx" ON public."ActivityDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "ActivityDefinition_date_idx" ON public."ActivityDefinition" USING btree (date);');
  await client.query(
    'CREATE INDEX "ActivityDefinition_dependsOn_idx" ON public."ActivityDefinition" USING gin ("dependsOn");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_derivedFrom_idx" ON public."ActivityDefinition" USING gin ("derivedFrom");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_description_idx" ON public."ActivityDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_effective_idx" ON public."ActivityDefinition" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_lastUpdated_idx" ON public."ActivityDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ActivityDefinition_name_idx" ON public."ActivityDefinition" USING btree (name);');
  await client.query(
    'CREATE INDEX "ActivityDefinition_predecessor_idx" ON public."ActivityDefinition" USING gin (predecessor);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_projectId_idx" ON public."ActivityDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_publisher_idx" ON public."ActivityDefinition" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_status_idx" ON public."ActivityDefinition" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ActivityDefinition_successor_idx" ON public."ActivityDefinition" USING gin (successor);'
  );
  await client.query('CREATE INDEX "ActivityDefinition_title_idx" ON public."ActivityDefinition" USING btree (title);');
  await client.query('CREATE INDEX "ActivityDefinition_url_idx" ON public."ActivityDefinition" USING btree (url);');
  await client.query(
    'CREATE INDEX "ActivityDefinition_version_idx" ON public."ActivityDefinition" USING btree (version);'
  );
  await client.query('CREATE INDEX "Address_address_idx" ON public."Address" USING btree (address);');
  await client.query(
    'CREATE INDEX "Address_address_idx_tsv" ON public."Address" USING gin (to_tsvector(\'simple\'::regconfig, address));'
  );
  await client.query('CREATE INDEX "Address_city_idx" ON public."Address" USING btree (city);');
  await client.query(
    'CREATE INDEX "Address_city_idx_tsv" ON public."Address" USING gin (to_tsvector(\'simple\'::regconfig, city));'
  );
  await client.query('CREATE INDEX "Address_country_idx" ON public."Address" USING btree (country);');
  await client.query(
    'CREATE INDEX "Address_country_idx_tsv" ON public."Address" USING gin (to_tsvector(\'simple\'::regconfig, country));'
  );
  await client.query('CREATE INDEX "Address_postalCode_idx" ON public."Address" USING btree ("postalCode");');
  await client.query(
    'CREATE INDEX "Address_postalCode_idx_tsv" ON public."Address" USING gin (to_tsvector(\'simple\'::regconfig, "postalCode"));'
  );
  await client.query('CREATE INDEX "Address_resourceId_idx" ON public."Address" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Address_state_idx" ON public."Address" USING btree (state);');
  await client.query(
    'CREATE INDEX "Address_state_idx_tsv" ON public."Address" USING gin (to_tsvector(\'simple\'::regconfig, state));'
  );
  await client.query('CREATE INDEX "Address_use_idx" ON public."Address" USING btree (use);');
  await client.query(
    'CREATE INDEX "Address_use_idx_tsv" ON public."Address" USING gin (to_tsvector(\'simple\'::regconfig, use));'
  );
  await client.query('CREATE INDEX "AdverseEvent_History_id_idx" ON public."AdverseEvent_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "AdverseEvent_History_lastUpdated_idx" ON public."AdverseEvent_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "AdverseEvent_Token_code_idx" ON public."AdverseEvent_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "AdverseEvent_Token_resourceId_idx" ON public."AdverseEvent_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "AdverseEvent_Token_system_idx" ON public."AdverseEvent_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "AdverseEvent_Token_text_idx_tsv" ON public."AdverseEvent_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "AdverseEvent_Token_value_idx" ON public."AdverseEvent_Token" USING btree (value);');
  await client.query('CREATE INDEX "AdverseEvent__profile_idx" ON public."AdverseEvent" USING gin (_profile);');
  await client.query('CREATE INDEX "AdverseEvent__security_idx" ON public."AdverseEvent" USING gin (_security);');
  await client.query('CREATE INDEX "AdverseEvent__source_idx" ON public."AdverseEvent" USING btree (_source);');
  await client.query('CREATE INDEX "AdverseEvent__tag_idx" ON public."AdverseEvent" USING gin (_tag);');
  await client.query('CREATE INDEX "AdverseEvent_actuality_idx" ON public."AdverseEvent" USING btree (actuality);');
  await client.query('CREATE INDEX "AdverseEvent_compartments_idx" ON public."AdverseEvent" USING gin (compartments);');
  await client.query('CREATE INDEX "AdverseEvent_date_idx" ON public."AdverseEvent" USING btree (date);');
  await client.query(
    'CREATE INDEX "AdverseEvent_lastUpdated_idx" ON public."AdverseEvent" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "AdverseEvent_location_idx" ON public."AdverseEvent" USING btree (location);');
  await client.query('CREATE INDEX "AdverseEvent_projectId_idx" ON public."AdverseEvent" USING btree ("projectId");');
  await client.query('CREATE INDEX "AdverseEvent_recorder_idx" ON public."AdverseEvent" USING btree (recorder);');
  await client.query(
    'CREATE INDEX "AdverseEvent_resultingcondition_idx" ON public."AdverseEvent" USING gin (resultingcondition);'
  );
  await client.query('CREATE INDEX "AdverseEvent_study_idx" ON public."AdverseEvent" USING gin (study);');
  await client.query('CREATE INDEX "AdverseEvent_subject_idx" ON public."AdverseEvent" USING btree (subject);');
  await client.query('CREATE INDEX "AdverseEvent_substance_idx" ON public."AdverseEvent" USING gin (substance);');
  await client.query('CREATE INDEX "Agent_History_id_idx" ON public."Agent_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Agent_History_lastUpdated_idx" ON public."Agent_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Agent_Token_code_idx" ON public."Agent_Token" USING btree (code);');
  await client.query('CREATE INDEX "Agent_Token_resourceId_idx" ON public."Agent_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Agent_Token_system_idx" ON public."Agent_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Agent_Token_text_idx_tsv" ON public."Agent_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Agent_Token_value_idx" ON public."Agent_Token" USING btree (value);');
  await client.query('CREATE INDEX "Agent__profile_idx" ON public."Agent" USING gin (_profile);');
  await client.query('CREATE INDEX "Agent__security_idx" ON public."Agent" USING gin (_security);');
  await client.query('CREATE INDEX "Agent__source_idx" ON public."Agent" USING btree (_source);');
  await client.query('CREATE INDEX "Agent__tag_idx" ON public."Agent" USING gin (_tag);');
  await client.query('CREATE INDEX "Agent_compartments_idx" ON public."Agent" USING gin (compartments);');
  await client.query('CREATE INDEX "Agent_lastUpdated_idx" ON public."Agent" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Agent_projectId_idx" ON public."Agent" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "AllergyIntolerance_History_id_idx" ON public."AllergyIntolerance_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_History_lastUpdated_idx" ON public."AllergyIntolerance_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_Token_code_idx" ON public."AllergyIntolerance_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_Token_resourceId_idx" ON public."AllergyIntolerance_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_Token_system_idx" ON public."AllergyIntolerance_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_Token_text_idx_tsv" ON public."AllergyIntolerance_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_Token_value_idx" ON public."AllergyIntolerance_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance__profile_idx" ON public."AllergyIntolerance" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance__security_idx" ON public."AllergyIntolerance" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance__source_idx" ON public."AllergyIntolerance" USING btree (_source);'
  );
  await client.query('CREATE INDEX "AllergyIntolerance__tag_idx" ON public."AllergyIntolerance" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "AllergyIntolerance_asserter_idx" ON public."AllergyIntolerance" USING btree (asserter);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_category_idx" ON public."AllergyIntolerance" USING gin (category);'
  );
  await client.query('CREATE INDEX "AllergyIntolerance_code_idx" ON public."AllergyIntolerance" USING gin (code);');
  await client.query(
    'CREATE INDEX "AllergyIntolerance_compartments_idx" ON public."AllergyIntolerance" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_criticality_idx" ON public."AllergyIntolerance" USING btree (criticality);'
  );
  await client.query('CREATE INDEX "AllergyIntolerance_date_idx" ON public."AllergyIntolerance" USING btree (date);');
  await client.query(
    'CREATE INDEX "AllergyIntolerance_lastDate_idx" ON public."AllergyIntolerance" USING btree ("lastDate");'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_lastUpdated_idx" ON public."AllergyIntolerance" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "AllergyIntolerance_onset_idx" ON public."AllergyIntolerance" USING gin (onset);');
  await client.query(
    'CREATE INDEX "AllergyIntolerance_patient_idx" ON public."AllergyIntolerance" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_projectId_idx" ON public."AllergyIntolerance" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_recorder_idx" ON public."AllergyIntolerance" USING btree (recorder);'
  );
  await client.query(
    'CREATE INDEX "AllergyIntolerance_severity_idx" ON public."AllergyIntolerance" USING gin (severity);'
  );
  await client.query('CREATE INDEX "AllergyIntolerance_type_idx" ON public."AllergyIntolerance" USING btree (type);');
  await client.query(
    'CREATE INDEX "AppointmentResponse_History_id_idx" ON public."AppointmentResponse_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_History_lastUpdated_idx" ON public."AppointmentResponse_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_Token_code_idx" ON public."AppointmentResponse_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_Token_resourceId_idx" ON public."AppointmentResponse_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_Token_system_idx" ON public."AppointmentResponse_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_Token_text_idx_tsv" ON public."AppointmentResponse_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_Token_value_idx" ON public."AppointmentResponse_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse__profile_idx" ON public."AppointmentResponse" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse__security_idx" ON public."AppointmentResponse" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse__source_idx" ON public."AppointmentResponse" USING btree (_source);'
  );
  await client.query('CREATE INDEX "AppointmentResponse__tag_idx" ON public."AppointmentResponse" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "AppointmentResponse_actor_idx" ON public."AppointmentResponse" USING btree (actor);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_appointment_idx" ON public."AppointmentResponse" USING btree (appointment);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_compartments_idx" ON public."AppointmentResponse" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_lastUpdated_idx" ON public."AppointmentResponse" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_location_idx" ON public."AppointmentResponse" USING btree (location);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_partStatus_idx" ON public."AppointmentResponse" USING btree ("partStatus");'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_patient_idx" ON public."AppointmentResponse" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_practitioner_idx" ON public."AppointmentResponse" USING btree (practitioner);'
  );
  await client.query(
    'CREATE INDEX "AppointmentResponse_projectId_idx" ON public."AppointmentResponse" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "Appointment_History_id_idx" ON public."Appointment_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Appointment_History_lastUpdated_idx" ON public."Appointment_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Appointment_Token_code_idx" ON public."Appointment_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Appointment_Token_resourceId_idx" ON public."Appointment_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Appointment_Token_system_idx" ON public."Appointment_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Appointment_Token_text_idx_tsv" ON public."Appointment_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Appointment_Token_value_idx" ON public."Appointment_Token" USING btree (value);');
  await client.query('CREATE INDEX "Appointment__profile_idx" ON public."Appointment" USING gin (_profile);');
  await client.query('CREATE INDEX "Appointment__security_idx" ON public."Appointment" USING gin (_security);');
  await client.query('CREATE INDEX "Appointment__source_idx" ON public."Appointment" USING btree (_source);');
  await client.query('CREATE INDEX "Appointment__tag_idx" ON public."Appointment" USING gin (_tag);');
  await client.query('CREATE INDEX "Appointment_actor_idx" ON public."Appointment" USING gin (actor);');
  await client.query('CREATE INDEX "Appointment_basedOn_idx" ON public."Appointment" USING gin ("basedOn");');
  await client.query('CREATE INDEX "Appointment_compartments_idx" ON public."Appointment" USING gin (compartments);');
  await client.query('CREATE INDEX "Appointment_date_idx" ON public."Appointment" USING btree (date);');
  await client.query('CREATE INDEX "Appointment_lastUpdated_idx" ON public."Appointment" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Appointment_location_idx" ON public."Appointment" USING gin (location);');
  await client.query('CREATE INDEX "Appointment_partStatus_idx" ON public."Appointment" USING gin ("partStatus");');
  await client.query('CREATE INDEX "Appointment_patient_idx" ON public."Appointment" USING gin (patient);');
  await client.query('CREATE INDEX "Appointment_practitioner_idx" ON public."Appointment" USING gin (practitioner);');
  await client.query('CREATE INDEX "Appointment_projectId_idx" ON public."Appointment" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "Appointment_reasonReference_idx" ON public."Appointment" USING gin ("reasonReference");'
  );
  await client.query('CREATE INDEX "Appointment_slot_idx" ON public."Appointment" USING gin (slot);');
  await client.query('CREATE INDEX "Appointment_status_idx" ON public."Appointment" USING btree (status);');
  await client.query(
    'CREATE INDEX "Appointment_supportingInfo_idx" ON public."Appointment" USING gin ("supportingInfo");'
  );
  await client.query('CREATE INDEX "AsyncJob_History_id_idx" ON public."AsyncJob_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "AsyncJob_History_lastUpdated_idx" ON public."AsyncJob_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "AsyncJob_Token_code_idx" ON public."AsyncJob_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "AsyncJob_Token_resourceId_idx" ON public."AsyncJob_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "AsyncJob_Token_system_idx" ON public."AsyncJob_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "AsyncJob_Token_text_idx_tsv" ON public."AsyncJob_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "AsyncJob_Token_value_idx" ON public."AsyncJob_Token" USING btree (value);');
  await client.query('CREATE INDEX "AsyncJob__profile_idx" ON public."AsyncJob" USING gin (_profile);');
  await client.query('CREATE INDEX "AsyncJob__security_idx" ON public."AsyncJob" USING gin (_security);');
  await client.query('CREATE INDEX "AsyncJob__source_idx" ON public."AsyncJob" USING btree (_source);');
  await client.query('CREATE INDEX "AsyncJob__tag_idx" ON public."AsyncJob" USING gin (_tag);');
  await client.query('CREATE INDEX "AsyncJob_compartments_idx" ON public."AsyncJob" USING gin (compartments);');
  await client.query('CREATE INDEX "AsyncJob_lastUpdated_idx" ON public."AsyncJob" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "AsyncJob_projectId_idx" ON public."AsyncJob" USING btree ("projectId");');
  await client.query('CREATE INDEX "AuditEvent_History_id_idx" ON public."AuditEvent_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "AuditEvent_History_lastUpdated_idx" ON public."AuditEvent_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "AuditEvent_Token_code_idx" ON public."AuditEvent_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "AuditEvent_Token_resourceId_idx" ON public."AuditEvent_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "AuditEvent_Token_system_idx" ON public."AuditEvent_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "AuditEvent_Token_text_idx_tsv" ON public."AuditEvent_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "AuditEvent_Token_value_idx" ON public."AuditEvent_Token" USING btree (value);');
  await client.query('CREATE INDEX "AuditEvent__profile_idx" ON public."AuditEvent" USING gin (_profile);');
  await client.query('CREATE INDEX "AuditEvent__security_idx" ON public."AuditEvent" USING gin (_security);');
  await client.query('CREATE INDEX "AuditEvent__source_idx" ON public."AuditEvent" USING btree (_source);');
  await client.query('CREATE INDEX "AuditEvent__tag_idx" ON public."AuditEvent" USING gin (_tag);');
  await client.query('CREATE INDEX "AuditEvent_action_idx" ON public."AuditEvent" USING btree (action);');
  await client.query('CREATE INDEX "AuditEvent_address_idx" ON public."AuditEvent" USING gin (address);');
  await client.query('CREATE INDEX "AuditEvent_agentName_idx" ON public."AuditEvent" USING gin ("agentName");');
  await client.query('CREATE INDEX "AuditEvent_agent_idx" ON public."AuditEvent" USING gin (agent);');
  await client.query('CREATE INDEX "AuditEvent_altid_idx" ON public."AuditEvent" USING gin (altid);');
  await client.query('CREATE INDEX "AuditEvent_compartments_idx" ON public."AuditEvent" USING gin (compartments);');
  await client.query('CREATE INDEX "AuditEvent_date_idx" ON public."AuditEvent" USING btree (date);');
  await client.query('CREATE INDEX "AuditEvent_entityName_idx" ON public."AuditEvent" USING gin ("entityName");');
  await client.query('CREATE INDEX "AuditEvent_entity_idx" ON public."AuditEvent" USING gin (entity);');
  await client.query('CREATE INDEX "AuditEvent_lastUpdated_idx" ON public."AuditEvent" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "AuditEvent_outcome_idx" ON public."AuditEvent" USING btree (outcome);');
  await client.query('CREATE INDEX "AuditEvent_patient_idx" ON public."AuditEvent" USING gin (patient);');
  await client.query('CREATE INDEX "AuditEvent_policy_idx" ON public."AuditEvent" USING gin (policy);');
  await client.query('CREATE INDEX "AuditEvent_projectId_idx" ON public."AuditEvent" USING btree ("projectId");');
  await client.query('CREATE INDEX "AuditEvent_site_idx" ON public."AuditEvent" USING btree (site);');
  await client.query('CREATE INDEX "AuditEvent_source_idx" ON public."AuditEvent" USING btree (source);');
  await client.query('CREATE INDEX "Basic_History_id_idx" ON public."Basic_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Basic_History_lastUpdated_idx" ON public."Basic_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Basic_Token_code_idx" ON public."Basic_Token" USING btree (code);');
  await client.query('CREATE INDEX "Basic_Token_resourceId_idx" ON public."Basic_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Basic_Token_system_idx" ON public."Basic_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Basic_Token_text_idx_tsv" ON public."Basic_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Basic_Token_value_idx" ON public."Basic_Token" USING btree (value);');
  await client.query('CREATE INDEX "Basic__profile_idx" ON public."Basic" USING gin (_profile);');
  await client.query('CREATE INDEX "Basic__security_idx" ON public."Basic" USING gin (_security);');
  await client.query('CREATE INDEX "Basic__source_idx" ON public."Basic" USING btree (_source);');
  await client.query('CREATE INDEX "Basic__tag_idx" ON public."Basic" USING gin (_tag);');
  await client.query('CREATE INDEX "Basic_author_idx" ON public."Basic" USING btree (author);');
  await client.query('CREATE INDEX "Basic_compartments_idx" ON public."Basic" USING gin (compartments);');
  await client.query('CREATE INDEX "Basic_created_idx" ON public."Basic" USING btree (created);');
  await client.query('CREATE INDEX "Basic_lastUpdated_idx" ON public."Basic" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Basic_patient_idx" ON public."Basic" USING btree (patient);');
  await client.query('CREATE INDEX "Basic_projectId_idx" ON public."Basic" USING btree ("projectId");');
  await client.query('CREATE INDEX "Basic_subject_idx" ON public."Basic" USING btree (subject);');
  await client.query('CREATE INDEX "Binary_History_id_idx" ON public."Binary_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Binary_History_lastUpdated_idx" ON public."Binary_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Binary_Token_code_idx" ON public."Binary_Token" USING btree (code);');
  await client.query('CREATE INDEX "Binary_Token_resourceId_idx" ON public."Binary_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Binary_Token_system_idx" ON public."Binary_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Binary_Token_text_idx_tsv" ON public."Binary_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Binary_Token_value_idx" ON public."Binary_Token" USING btree (value);');
  await client.query('CREATE INDEX "Binary__profile_idx" ON public."Binary" USING gin (_profile);');
  await client.query('CREATE INDEX "Binary__security_idx" ON public."Binary" USING gin (_security);');
  await client.query('CREATE INDEX "Binary__source_idx" ON public."Binary" USING btree (_source);');
  await client.query('CREATE INDEX "Binary__tag_idx" ON public."Binary" USING gin (_tag);');
  await client.query('CREATE INDEX "Binary_compartments_idx" ON public."Binary" USING gin (compartments);');
  await client.query('CREATE INDEX "Binary_lastUpdated_idx" ON public."Binary" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Binary_projectId_idx" ON public."Binary" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_History_id_idx" ON public."BiologicallyDerivedProduct_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_History_lastUpdated_idx" ON public."BiologicallyDerivedProduct_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_Token_code_idx" ON public."BiologicallyDerivedProduct_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_Token_resourceId_idx" ON public."BiologicallyDerivedProduct_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_Token_system_idx" ON public."BiologicallyDerivedProduct_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_Token_text_idx_tsv" ON public."BiologicallyDerivedProduct_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_Token_value_idx" ON public."BiologicallyDerivedProduct_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct__profile_idx" ON public."BiologicallyDerivedProduct" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct__security_idx" ON public."BiologicallyDerivedProduct" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct__source_idx" ON public."BiologicallyDerivedProduct" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct__tag_idx" ON public."BiologicallyDerivedProduct" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_compartments_idx" ON public."BiologicallyDerivedProduct" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_lastUpdated_idx" ON public."BiologicallyDerivedProduct" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "BiologicallyDerivedProduct_projectId_idx" ON public."BiologicallyDerivedProduct" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "BodyStructure_History_id_idx" ON public."BodyStructure_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "BodyStructure_History_lastUpdated_idx" ON public."BodyStructure_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "BodyStructure_Token_code_idx" ON public."BodyStructure_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "BodyStructure_Token_resourceId_idx" ON public."BodyStructure_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "BodyStructure_Token_system_idx" ON public."BodyStructure_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "BodyStructure_Token_text_idx_tsv" ON public."BodyStructure_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "BodyStructure_Token_value_idx" ON public."BodyStructure_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "BodyStructure__profile_idx" ON public."BodyStructure" USING gin (_profile);');
  await client.query('CREATE INDEX "BodyStructure__security_idx" ON public."BodyStructure" USING gin (_security);');
  await client.query('CREATE INDEX "BodyStructure__source_idx" ON public."BodyStructure" USING btree (_source);');
  await client.query('CREATE INDEX "BodyStructure__tag_idx" ON public."BodyStructure" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "BodyStructure_compartments_idx" ON public."BodyStructure" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "BodyStructure_lastUpdated_idx" ON public."BodyStructure" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "BodyStructure_patient_idx" ON public."BodyStructure" USING btree (patient);');
  await client.query('CREATE INDEX "BodyStructure_projectId_idx" ON public."BodyStructure" USING btree ("projectId");');
  await client.query('CREATE INDEX "Bot_History_id_idx" ON public."Bot_History" USING btree (id);');
  await client.query('CREATE INDEX "Bot_History_lastUpdated_idx" ON public."Bot_History" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Bot_Token_code_idx" ON public."Bot_Token" USING btree (code);');
  await client.query('CREATE INDEX "Bot_Token_resourceId_idx" ON public."Bot_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Bot_Token_system_idx" ON public."Bot_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Bot_Token_text_idx_tsv" ON public."Bot_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Bot_Token_value_idx" ON public."Bot_Token" USING btree (value);');
  await client.query('CREATE INDEX "Bot__profile_idx" ON public."Bot" USING gin (_profile);');
  await client.query('CREATE INDEX "Bot__security_idx" ON public."Bot" USING gin (_security);');
  await client.query('CREATE INDEX "Bot__source_idx" ON public."Bot" USING btree (_source);');
  await client.query('CREATE INDEX "Bot__tag_idx" ON public."Bot" USING gin (_tag);');
  await client.query('CREATE INDEX "Bot_compartments_idx" ON public."Bot" USING gin (compartments);');
  await client.query('CREATE INDEX "Bot_lastUpdated_idx" ON public."Bot" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Bot_name_idx" ON public."Bot" USING btree (name);');
  await client.query('CREATE INDEX "Bot_projectId_idx" ON public."Bot" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "BulkDataExport_History_id_idx" ON public."BulkDataExport_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_History_lastUpdated_idx" ON public."BulkDataExport_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_Token_code_idx" ON public."BulkDataExport_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_Token_resourceId_idx" ON public."BulkDataExport_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_Token_system_idx" ON public."BulkDataExport_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_Token_text_idx_tsv" ON public."BulkDataExport_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_Token_value_idx" ON public."BulkDataExport_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "BulkDataExport__profile_idx" ON public."BulkDataExport" USING gin (_profile);');
  await client.query('CREATE INDEX "BulkDataExport__security_idx" ON public."BulkDataExport" USING gin (_security);');
  await client.query('CREATE INDEX "BulkDataExport__source_idx" ON public."BulkDataExport" USING btree (_source);');
  await client.query('CREATE INDEX "BulkDataExport__tag_idx" ON public."BulkDataExport" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "BulkDataExport_compartments_idx" ON public."BulkDataExport" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_lastUpdated_idx" ON public."BulkDataExport" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "BulkDataExport_projectId_idx" ON public."BulkDataExport" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "BulkDataExport_status_idx" ON public."BulkDataExport" USING btree (status);');
  await client.query('CREATE INDEX "Bundle_History_id_idx" ON public."Bundle_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Bundle_History_lastUpdated_idx" ON public."Bundle_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Bundle_Token_code_idx" ON public."Bundle_Token" USING btree (code);');
  await client.query('CREATE INDEX "Bundle_Token_resourceId_idx" ON public."Bundle_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Bundle_Token_system_idx" ON public."Bundle_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Bundle_Token_text_idx_tsv" ON public."Bundle_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Bundle_Token_value_idx" ON public."Bundle_Token" USING btree (value);');
  await client.query('CREATE INDEX "Bundle__profile_idx" ON public."Bundle" USING gin (_profile);');
  await client.query('CREATE INDEX "Bundle__security_idx" ON public."Bundle" USING gin (_security);');
  await client.query('CREATE INDEX "Bundle__source_idx" ON public."Bundle" USING btree (_source);');
  await client.query('CREATE INDEX "Bundle__tag_idx" ON public."Bundle" USING gin (_tag);');
  await client.query('CREATE INDEX "Bundle_compartments_idx" ON public."Bundle" USING gin (compartments);');
  await client.query('CREATE INDEX "Bundle_composition_idx" ON public."Bundle" USING btree (composition);');
  await client.query('CREATE INDEX "Bundle_lastUpdated_idx" ON public."Bundle" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Bundle_message_idx" ON public."Bundle" USING btree (message);');
  await client.query('CREATE INDEX "Bundle_projectId_idx" ON public."Bundle" USING btree ("projectId");');
  await client.query('CREATE INDEX "Bundle_timestamp_idx" ON public."Bundle" USING btree ("timestamp");');
  await client.query('CREATE INDEX "Bundle_type_idx" ON public."Bundle" USING btree (type);');
  await client.query(
    'CREATE INDEX "CapabilityStatement_History_id_idx" ON public."CapabilityStatement_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_History_lastUpdated_idx" ON public."CapabilityStatement_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_Token_code_idx" ON public."CapabilityStatement_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_Token_resourceId_idx" ON public."CapabilityStatement_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_Token_system_idx" ON public."CapabilityStatement_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_Token_text_idx_tsv" ON public."CapabilityStatement_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_Token_value_idx" ON public."CapabilityStatement_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement__profile_idx" ON public."CapabilityStatement" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement__security_idx" ON public."CapabilityStatement" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement__source_idx" ON public."CapabilityStatement" USING btree (_source);'
  );
  await client.query('CREATE INDEX "CapabilityStatement__tag_idx" ON public."CapabilityStatement" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "CapabilityStatement_compartments_idx" ON public."CapabilityStatement" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_contextQuantity_idx" ON public."CapabilityStatement" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_contextTypeQuantity_idx" ON public."CapabilityStatement" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_contextTypeValue_idx" ON public."CapabilityStatement" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "CapabilityStatement_date_idx" ON public."CapabilityStatement" USING btree (date);');
  await client.query(
    'CREATE INDEX "CapabilityStatement_description_idx" ON public."CapabilityStatement" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_fhirversion_idx" ON public."CapabilityStatement" USING btree (fhirversion);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_format_idx" ON public."CapabilityStatement" USING gin (format);'
  );
  await client.query('CREATE INDEX "CapabilityStatement_guide_idx" ON public."CapabilityStatement" USING gin (guide);');
  await client.query(
    'CREATE INDEX "CapabilityStatement_lastUpdated_idx" ON public."CapabilityStatement" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "CapabilityStatement_mode_idx" ON public."CapabilityStatement" USING gin (mode);');
  await client.query('CREATE INDEX "CapabilityStatement_name_idx" ON public."CapabilityStatement" USING btree (name);');
  await client.query(
    'CREATE INDEX "CapabilityStatement_projectId_idx" ON public."CapabilityStatement" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_publisher_idx" ON public."CapabilityStatement" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_resourceProfile_idx" ON public."CapabilityStatement" USING gin ("resourceProfile");'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_resource_idx" ON public."CapabilityStatement" USING gin (resource);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_software_idx" ON public."CapabilityStatement" USING btree (software);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_status_idx" ON public."CapabilityStatement" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_supportedProfile_idx" ON public."CapabilityStatement" USING gin ("supportedProfile");'
  );
  await client.query(
    'CREATE INDEX "CapabilityStatement_title_idx" ON public."CapabilityStatement" USING btree (title);'
  );
  await client.query('CREATE INDEX "CapabilityStatement_url_idx" ON public."CapabilityStatement" USING btree (url);');
  await client.query(
    'CREATE INDEX "CapabilityStatement_version_idx" ON public."CapabilityStatement" USING btree (version);'
  );
  await client.query('CREATE INDEX "CarePlan_History_id_idx" ON public."CarePlan_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "CarePlan_History_lastUpdated_idx" ON public."CarePlan_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "CarePlan_Token_code_idx" ON public."CarePlan_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "CarePlan_Token_resourceId_idx" ON public."CarePlan_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "CarePlan_Token_system_idx" ON public."CarePlan_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "CarePlan_Token_text_idx_tsv" ON public."CarePlan_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "CarePlan_Token_value_idx" ON public."CarePlan_Token" USING btree (value);');
  await client.query('CREATE INDEX "CarePlan__profile_idx" ON public."CarePlan" USING gin (_profile);');
  await client.query('CREATE INDEX "CarePlan__security_idx" ON public."CarePlan" USING gin (_security);');
  await client.query('CREATE INDEX "CarePlan__source_idx" ON public."CarePlan" USING btree (_source);');
  await client.query('CREATE INDEX "CarePlan__tag_idx" ON public."CarePlan" USING gin (_tag);');
  await client.query('CREATE INDEX "CarePlan_activityDate_idx" ON public."CarePlan" USING gin ("activityDate");');
  await client.query(
    'CREATE INDEX "CarePlan_activityReference_idx" ON public."CarePlan" USING gin ("activityReference");'
  );
  await client.query('CREATE INDEX "CarePlan_basedOn_idx" ON public."CarePlan" USING gin ("basedOn");');
  await client.query('CREATE INDEX "CarePlan_careTeam_idx" ON public."CarePlan" USING gin ("careTeam");');
  await client.query('CREATE INDEX "CarePlan_compartments_idx" ON public."CarePlan" USING gin (compartments);');
  await client.query('CREATE INDEX "CarePlan_condition_idx" ON public."CarePlan" USING gin (condition);');
  await client.query('CREATE INDEX "CarePlan_date_idx" ON public."CarePlan" USING btree (date);');
  await client.query('CREATE INDEX "CarePlan_encounter_idx" ON public."CarePlan" USING btree (encounter);');
  await client.query('CREATE INDEX "CarePlan_goal_idx" ON public."CarePlan" USING gin (goal);');
  await client.query(
    'CREATE INDEX "CarePlan_instantiatesCanonical_idx" ON public."CarePlan" USING gin ("instantiatesCanonical");'
  );
  await client.query('CREATE INDEX "CarePlan_instantiatesUri_idx" ON public."CarePlan" USING gin ("instantiatesUri");');
  await client.query('CREATE INDEX "CarePlan_intent_idx" ON public."CarePlan" USING btree (intent);');
  await client.query('CREATE INDEX "CarePlan_lastUpdated_idx" ON public."CarePlan" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "CarePlan_partOf_idx" ON public."CarePlan" USING gin ("partOf");');
  await client.query('CREATE INDEX "CarePlan_patient_idx" ON public."CarePlan" USING btree (patient);');
  await client.query('CREATE INDEX "CarePlan_performer_idx" ON public."CarePlan" USING gin (performer);');
  await client.query('CREATE INDEX "CarePlan_projectId_idx" ON public."CarePlan" USING btree ("projectId");');
  await client.query('CREATE INDEX "CarePlan_replaces_idx" ON public."CarePlan" USING gin (replaces);');
  await client.query('CREATE INDEX "CarePlan_status_idx" ON public."CarePlan" USING btree (status);');
  await client.query('CREATE INDEX "CarePlan_subject_idx" ON public."CarePlan" USING btree (subject);');
  await client.query('CREATE INDEX "CareTeam_History_id_idx" ON public."CareTeam_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "CareTeam_History_lastUpdated_idx" ON public."CareTeam_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "CareTeam_Token_code_idx" ON public."CareTeam_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "CareTeam_Token_resourceId_idx" ON public."CareTeam_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "CareTeam_Token_system_idx" ON public."CareTeam_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "CareTeam_Token_text_idx_tsv" ON public."CareTeam_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "CareTeam_Token_value_idx" ON public."CareTeam_Token" USING btree (value);');
  await client.query('CREATE INDEX "CareTeam__profile_idx" ON public."CareTeam" USING gin (_profile);');
  await client.query('CREATE INDEX "CareTeam__security_idx" ON public."CareTeam" USING gin (_security);');
  await client.query('CREATE INDEX "CareTeam__source_idx" ON public."CareTeam" USING btree (_source);');
  await client.query('CREATE INDEX "CareTeam__tag_idx" ON public."CareTeam" USING gin (_tag);');
  await client.query('CREATE INDEX "CareTeam_compartments_idx" ON public."CareTeam" USING gin (compartments);');
  await client.query('CREATE INDEX "CareTeam_date_idx" ON public."CareTeam" USING btree (date);');
  await client.query('CREATE INDEX "CareTeam_encounter_idx" ON public."CareTeam" USING btree (encounter);');
  await client.query('CREATE INDEX "CareTeam_lastUpdated_idx" ON public."CareTeam" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "CareTeam_participant_idx" ON public."CareTeam" USING gin (participant);');
  await client.query('CREATE INDEX "CareTeam_patient_idx" ON public."CareTeam" USING btree (patient);');
  await client.query('CREATE INDEX "CareTeam_projectId_idx" ON public."CareTeam" USING btree ("projectId");');
  await client.query('CREATE INDEX "CareTeam_status_idx" ON public."CareTeam" USING btree (status);');
  await client.query('CREATE INDEX "CareTeam_subject_idx" ON public."CareTeam" USING btree (subject);');
  await client.query('CREATE INDEX "CatalogEntry_History_id_idx" ON public."CatalogEntry_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "CatalogEntry_History_lastUpdated_idx" ON public."CatalogEntry_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "CatalogEntry_Token_code_idx" ON public."CatalogEntry_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "CatalogEntry_Token_resourceId_idx" ON public."CatalogEntry_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "CatalogEntry_Token_system_idx" ON public."CatalogEntry_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "CatalogEntry_Token_text_idx_tsv" ON public."CatalogEntry_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "CatalogEntry_Token_value_idx" ON public."CatalogEntry_Token" USING btree (value);');
  await client.query('CREATE INDEX "CatalogEntry__profile_idx" ON public."CatalogEntry" USING gin (_profile);');
  await client.query('CREATE INDEX "CatalogEntry__security_idx" ON public."CatalogEntry" USING gin (_security);');
  await client.query('CREATE INDEX "CatalogEntry__source_idx" ON public."CatalogEntry" USING btree (_source);');
  await client.query('CREATE INDEX "CatalogEntry__tag_idx" ON public."CatalogEntry" USING gin (_tag);');
  await client.query('CREATE INDEX "CatalogEntry_compartments_idx" ON public."CatalogEntry" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "CatalogEntry_lastUpdated_idx" ON public."CatalogEntry" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "CatalogEntry_projectId_idx" ON public."CatalogEntry" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_History_id_idx" ON public."ChargeItemDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_History_lastUpdated_idx" ON public."ChargeItemDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_Token_code_idx" ON public."ChargeItemDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_Token_resourceId_idx" ON public."ChargeItemDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_Token_system_idx" ON public."ChargeItemDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_Token_text_idx_tsv" ON public."ChargeItemDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_Token_value_idx" ON public."ChargeItemDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition__profile_idx" ON public."ChargeItemDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition__security_idx" ON public."ChargeItemDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition__source_idx" ON public."ChargeItemDefinition" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ChargeItemDefinition__tag_idx" ON public."ChargeItemDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_compartments_idx" ON public."ChargeItemDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_contextQuantity_idx" ON public."ChargeItemDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_contextTypeQuantity_idx" ON public."ChargeItemDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_contextTypeValue_idx" ON public."ChargeItemDefinition" USING gin ("contextTypeValue");'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_date_idx" ON public."ChargeItemDefinition" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_description_idx" ON public."ChargeItemDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_effective_idx" ON public."ChargeItemDefinition" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_lastUpdated_idx" ON public."ChargeItemDefinition" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_projectId_idx" ON public."ChargeItemDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_publisher_idx" ON public."ChargeItemDefinition" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_status_idx" ON public."ChargeItemDefinition" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_title_idx" ON public."ChargeItemDefinition" USING btree (title);'
  );
  await client.query('CREATE INDEX "ChargeItemDefinition_url_idx" ON public."ChargeItemDefinition" USING btree (url);');
  await client.query(
    'CREATE INDEX "ChargeItemDefinition_version_idx" ON public."ChargeItemDefinition" USING btree (version);'
  );
  await client.query('CREATE INDEX "ChargeItem_History_id_idx" ON public."ChargeItem_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "ChargeItem_History_lastUpdated_idx" ON public."ChargeItem_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ChargeItem_Token_code_idx" ON public."ChargeItem_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "ChargeItem_Token_resourceId_idx" ON public."ChargeItem_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "ChargeItem_Token_system_idx" ON public."ChargeItem_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "ChargeItem_Token_text_idx_tsv" ON public."ChargeItem_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "ChargeItem_Token_value_idx" ON public."ChargeItem_Token" USING btree (value);');
  await client.query('CREATE INDEX "ChargeItem__profile_idx" ON public."ChargeItem" USING gin (_profile);');
  await client.query('CREATE INDEX "ChargeItem__security_idx" ON public."ChargeItem" USING gin (_security);');
  await client.query('CREATE INDEX "ChargeItem__source_idx" ON public."ChargeItem" USING btree (_source);');
  await client.query('CREATE INDEX "ChargeItem__tag_idx" ON public."ChargeItem" USING gin (_tag);');
  await client.query('CREATE INDEX "ChargeItem_account_idx" ON public."ChargeItem" USING gin (account);');
  await client.query('CREATE INDEX "ChargeItem_compartments_idx" ON public."ChargeItem" USING gin (compartments);');
  await client.query('CREATE INDEX "ChargeItem_context_idx" ON public."ChargeItem" USING btree (context);');
  await client.query('CREATE INDEX "ChargeItem_enteredDate_idx" ON public."ChargeItem" USING btree ("enteredDate");');
  await client.query('CREATE INDEX "ChargeItem_enterer_idx" ON public."ChargeItem" USING btree (enterer);');
  await client.query(
    'CREATE INDEX "ChargeItem_factorOverride_idx" ON public."ChargeItem" USING btree ("factorOverride");'
  );
  await client.query('CREATE INDEX "ChargeItem_lastUpdated_idx" ON public."ChargeItem" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "ChargeItem_occurrence_idx" ON public."ChargeItem" USING btree (occurrence);');
  await client.query('CREATE INDEX "ChargeItem_patient_idx" ON public."ChargeItem" USING btree (patient);');
  await client.query(
    'CREATE INDEX "ChargeItem_performerActor_idx" ON public."ChargeItem" USING gin ("performerActor");'
  );
  await client.query(
    'CREATE INDEX "ChargeItem_performingOrganization_idx" ON public."ChargeItem" USING btree ("performingOrganization");'
  );
  await client.query(
    'CREATE INDEX "ChargeItem_priceOverride_idx" ON public."ChargeItem" USING btree ("priceOverride");'
  );
  await client.query('CREATE INDEX "ChargeItem_projectId_idx" ON public."ChargeItem" USING btree ("projectId");');
  await client.query('CREATE INDEX "ChargeItem_quantity_idx" ON public."ChargeItem" USING btree (quantity);');
  await client.query(
    'CREATE INDEX "ChargeItem_requestingOrganization_idx" ON public."ChargeItem" USING btree ("requestingOrganization");'
  );
  await client.query('CREATE INDEX "ChargeItem_service_idx" ON public."ChargeItem" USING gin (service);');
  await client.query('CREATE INDEX "ChargeItem_subject_idx" ON public."ChargeItem" USING btree (subject);');
  await client.query('CREATE INDEX "ClaimResponse_History_id_idx" ON public."ClaimResponse_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "ClaimResponse_History_lastUpdated_idx" ON public."ClaimResponse_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ClaimResponse_Token_code_idx" ON public."ClaimResponse_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "ClaimResponse_Token_resourceId_idx" ON public."ClaimResponse_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ClaimResponse_Token_system_idx" ON public."ClaimResponse_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ClaimResponse_Token_text_idx_tsv" ON public."ClaimResponse_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ClaimResponse_Token_value_idx" ON public."ClaimResponse_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "ClaimResponse__profile_idx" ON public."ClaimResponse" USING gin (_profile);');
  await client.query('CREATE INDEX "ClaimResponse__security_idx" ON public."ClaimResponse" USING gin (_security);');
  await client.query('CREATE INDEX "ClaimResponse__source_idx" ON public."ClaimResponse" USING btree (_source);');
  await client.query('CREATE INDEX "ClaimResponse__tag_idx" ON public."ClaimResponse" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ClaimResponse_compartments_idx" ON public."ClaimResponse" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "ClaimResponse_created_idx" ON public."ClaimResponse" USING btree (created);');
  await client.query(
    'CREATE INDEX "ClaimResponse_disposition_idx" ON public."ClaimResponse" USING btree (disposition);'
  );
  await client.query('CREATE INDEX "ClaimResponse_insurer_idx" ON public."ClaimResponse" USING btree (insurer);');
  await client.query(
    'CREATE INDEX "ClaimResponse_lastUpdated_idx" ON public."ClaimResponse" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ClaimResponse_outcome_idx" ON public."ClaimResponse" USING btree (outcome);');
  await client.query('CREATE INDEX "ClaimResponse_patient_idx" ON public."ClaimResponse" USING btree (patient);');
  await client.query(
    'CREATE INDEX "ClaimResponse_paymentDate_idx" ON public."ClaimResponse" USING btree ("paymentDate");'
  );
  await client.query('CREATE INDEX "ClaimResponse_projectId_idx" ON public."ClaimResponse" USING btree ("projectId");');
  await client.query('CREATE INDEX "ClaimResponse_request_idx" ON public."ClaimResponse" USING btree (request);');
  await client.query('CREATE INDEX "ClaimResponse_requestor_idx" ON public."ClaimResponse" USING btree (requestor);');
  await client.query('CREATE INDEX "ClaimResponse_status_idx" ON public."ClaimResponse" USING btree (status);');
  await client.query('CREATE INDEX "ClaimResponse_use_idx" ON public."ClaimResponse" USING btree (use);');
  await client.query('CREATE INDEX "Claim_History_id_idx" ON public."Claim_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Claim_History_lastUpdated_idx" ON public."Claim_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Claim_Token_code_idx" ON public."Claim_Token" USING btree (code);');
  await client.query('CREATE INDEX "Claim_Token_resourceId_idx" ON public."Claim_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Claim_Token_system_idx" ON public."Claim_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Claim_Token_text_idx_tsv" ON public."Claim_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Claim_Token_value_idx" ON public."Claim_Token" USING btree (value);');
  await client.query('CREATE INDEX "Claim__profile_idx" ON public."Claim" USING gin (_profile);');
  await client.query('CREATE INDEX "Claim__security_idx" ON public."Claim" USING gin (_security);');
  await client.query('CREATE INDEX "Claim__source_idx" ON public."Claim" USING btree (_source);');
  await client.query('CREATE INDEX "Claim__tag_idx" ON public."Claim" USING gin (_tag);');
  await client.query('CREATE INDEX "Claim_careTeam_idx" ON public."Claim" USING gin ("careTeam");');
  await client.query('CREATE INDEX "Claim_compartments_idx" ON public."Claim" USING gin (compartments);');
  await client.query('CREATE INDEX "Claim_created_idx" ON public."Claim" USING btree (created);');
  await client.query('CREATE INDEX "Claim_detailUdi_idx" ON public."Claim" USING gin ("detailUdi");');
  await client.query('CREATE INDEX "Claim_encounter_idx" ON public."Claim" USING gin (encounter);');
  await client.query('CREATE INDEX "Claim_enterer_idx" ON public."Claim" USING btree (enterer);');
  await client.query('CREATE INDEX "Claim_facility_idx" ON public."Claim" USING btree (facility);');
  await client.query('CREATE INDEX "Claim_insurer_idx" ON public."Claim" USING btree (insurer);');
  await client.query('CREATE INDEX "Claim_itemUdi_idx" ON public."Claim" USING gin ("itemUdi");');
  await client.query('CREATE INDEX "Claim_lastUpdated_idx" ON public."Claim" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Claim_patient_idx" ON public."Claim" USING btree (patient);');
  await client.query('CREATE INDEX "Claim_payee_idx" ON public."Claim" USING btree (payee);');
  await client.query('CREATE INDEX "Claim_procedureUdi_idx" ON public."Claim" USING gin ("procedureUdi");');
  await client.query('CREATE INDEX "Claim_projectId_idx" ON public."Claim" USING btree ("projectId");');
  await client.query('CREATE INDEX "Claim_provider_idx" ON public."Claim" USING btree (provider);');
  await client.query('CREATE INDEX "Claim_status_idx" ON public."Claim" USING btree (status);');
  await client.query('CREATE INDEX "Claim_subdetailUdi_idx" ON public."Claim" USING gin ("subdetailUdi");');
  await client.query('CREATE INDEX "Claim_use_idx" ON public."Claim" USING btree (use);');
  await client.query(
    'CREATE INDEX "ClientApplication_History_id_idx" ON public."ClientApplication_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication_History_lastUpdated_idx" ON public."ClientApplication_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ClientApplication_Token_code_idx" ON public."ClientApplication_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication_Token_resourceId_idx" ON public."ClientApplication_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ClientApplication_Token_system_idx" ON public."ClientApplication_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication_Token_text_idx_tsv" ON public."ClientApplication_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication_Token_value_idx" ON public."ClientApplication_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication__profile_idx" ON public."ClientApplication" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication__security_idx" ON public."ClientApplication" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication__source_idx" ON public."ClientApplication" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ClientApplication__tag_idx" ON public."ClientApplication" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ClientApplication_compartments_idx" ON public."ClientApplication" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ClientApplication_lastUpdated_idx" ON public."ClientApplication" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ClientApplication_name_idx" ON public."ClientApplication" USING btree (name);');
  await client.query(
    'CREATE INDEX "ClientApplication_projectId_idx" ON public."ClientApplication" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_History_id_idx" ON public."ClinicalImpression_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_History_lastUpdated_idx" ON public."ClinicalImpression_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_Token_code_idx" ON public."ClinicalImpression_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_Token_resourceId_idx" ON public."ClinicalImpression_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_Token_system_idx" ON public."ClinicalImpression_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_Token_text_idx_tsv" ON public."ClinicalImpression_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_Token_value_idx" ON public."ClinicalImpression_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression__profile_idx" ON public."ClinicalImpression" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression__security_idx" ON public."ClinicalImpression" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression__source_idx" ON public."ClinicalImpression" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ClinicalImpression__tag_idx" ON public."ClinicalImpression" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ClinicalImpression_assessor_idx" ON public."ClinicalImpression" USING btree (assessor);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_compartments_idx" ON public."ClinicalImpression" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "ClinicalImpression_date_idx" ON public."ClinicalImpression" USING btree (date);');
  await client.query(
    'CREATE INDEX "ClinicalImpression_encounter_idx" ON public."ClinicalImpression" USING btree (encounter);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_findingRef_idx" ON public."ClinicalImpression" USING gin ("findingRef");'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_investigation_idx" ON public."ClinicalImpression" USING gin (investigation);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_lastUpdated_idx" ON public."ClinicalImpression" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_patient_idx" ON public."ClinicalImpression" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_previous_idx" ON public."ClinicalImpression" USING btree (previous);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_problem_idx" ON public."ClinicalImpression" USING gin (problem);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_projectId_idx" ON public."ClinicalImpression" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_status_idx" ON public."ClinicalImpression" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_subject_idx" ON public."ClinicalImpression" USING btree (subject);'
  );
  await client.query(
    'CREATE INDEX "ClinicalImpression_supportingInfo_idx" ON public."ClinicalImpression" USING gin ("supportingInfo");'
  );
  await client.query('CREATE INDEX "CodeSystem_History_id_idx" ON public."CodeSystem_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "CodeSystem_History_lastUpdated_idx" ON public."CodeSystem_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE UNIQUE INDEX "CodeSystem_Property_idx" ON public."CodeSystem_Property" USING btree (system, code) INCLUDE (id);'
  );
  await client.query('CREATE INDEX "CodeSystem_Token_code_idx" ON public."CodeSystem_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "CodeSystem_Token_resourceId_idx" ON public."CodeSystem_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "CodeSystem_Token_system_idx" ON public."CodeSystem_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "CodeSystem_Token_text_idx_tsv" ON public."CodeSystem_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "CodeSystem_Token_value_idx" ON public."CodeSystem_Token" USING btree (value);');
  await client.query('CREATE INDEX "CodeSystem__profile_idx" ON public."CodeSystem" USING gin (_profile);');
  await client.query('CREATE INDEX "CodeSystem__security_idx" ON public."CodeSystem" USING gin (_security);');
  await client.query('CREATE INDEX "CodeSystem__source_idx" ON public."CodeSystem" USING btree (_source);');
  await client.query('CREATE INDEX "CodeSystem__tag_idx" ON public."CodeSystem" USING gin (_tag);');
  await client.query('CREATE INDEX "CodeSystem_code_idx" ON public."CodeSystem" USING gin (code);');
  await client.query('CREATE INDEX "CodeSystem_compartments_idx" ON public."CodeSystem" USING gin (compartments);');
  await client.query('CREATE INDEX "CodeSystem_contentMode_idx" ON public."CodeSystem" USING btree ("contentMode");');
  await client.query(
    'CREATE INDEX "CodeSystem_contextQuantity_idx" ON public."CodeSystem" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "CodeSystem_contextTypeQuantity_idx" ON public."CodeSystem" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "CodeSystem_contextTypeValue_idx" ON public."CodeSystem" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "CodeSystem_date_idx" ON public."CodeSystem" USING btree (date);');
  await client.query('CREATE INDEX "CodeSystem_description_idx" ON public."CodeSystem" USING btree (description);');
  await client.query('CREATE INDEX "CodeSystem_language_idx" ON public."CodeSystem" USING gin (language);');
  await client.query('CREATE INDEX "CodeSystem_lastUpdated_idx" ON public."CodeSystem" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "CodeSystem_name_idx" ON public."CodeSystem" USING btree (name);');
  await client.query('CREATE INDEX "CodeSystem_projectId_idx" ON public."CodeSystem" USING btree ("projectId");');
  await client.query('CREATE INDEX "CodeSystem_publisher_idx" ON public."CodeSystem" USING btree (publisher);');
  await client.query('CREATE INDEX "CodeSystem_status_idx" ON public."CodeSystem" USING btree (status);');
  await client.query('CREATE INDEX "CodeSystem_supplements_idx" ON public."CodeSystem" USING btree (supplements);');
  await client.query('CREATE INDEX "CodeSystem_system_idx" ON public."CodeSystem" USING btree (system);');
  await client.query('CREATE INDEX "CodeSystem_title_idx" ON public."CodeSystem" USING btree (title);');
  await client.query('CREATE INDEX "CodeSystem_url_idx" ON public."CodeSystem" USING btree (url);');
  await client.query('CREATE INDEX "CodeSystem_version_idx" ON public."CodeSystem" USING btree (version);');
  await client.query('CREATE INDEX "Coding_Property_coding_idx" ON public."Coding_Property" USING btree (coding);');
  await client.query(
    'CREATE UNIQUE INDEX "Coding_Property_idx" ON public."Coding_Property" USING btree (coding, property, target, value);'
  );
  await client.query(
    'CREATE UNIQUE INDEX "Coding_Property_simple_idx" ON public."Coding_Property" USING btree (coding, property, value) WHERE (target IS NULL);'
  );
  await client.query(
    'CREATE INDEX "Coding_display_idx" ON public."Coding" USING gin (system, to_tsvector(\'english\'::regconfig, display)) WHERE (display IS NOT NULL);'
  );
  await client.query(
    'CREATE UNIQUE INDEX "Coding_system_code_idx" ON public."Coding" USING btree (system, code) INCLUDE (id);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_History_id_idx" ON public."CommunicationRequest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_History_lastUpdated_idx" ON public."CommunicationRequest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_Token_code_idx" ON public."CommunicationRequest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_Token_resourceId_idx" ON public."CommunicationRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_Token_system_idx" ON public."CommunicationRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_Token_text_idx_tsv" ON public."CommunicationRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_Token_value_idx" ON public."CommunicationRequest_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest__profile_idx" ON public."CommunicationRequest" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest__security_idx" ON public."CommunicationRequest" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest__source_idx" ON public."CommunicationRequest" USING btree (_source);'
  );
  await client.query('CREATE INDEX "CommunicationRequest__tag_idx" ON public."CommunicationRequest" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "CommunicationRequest_authored_idx" ON public."CommunicationRequest" USING btree (authored);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_basedOn_idx" ON public."CommunicationRequest" USING gin ("basedOn");'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_compartments_idx" ON public."CommunicationRequest" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_encounter_idx" ON public."CommunicationRequest" USING btree (encounter);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_groupIdentifier_idx" ON public."CommunicationRequest" USING btree ("groupIdentifier");'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_lastUpdated_idx" ON public."CommunicationRequest" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_occurrence_idx" ON public."CommunicationRequest" USING btree (occurrence);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_patient_idx" ON public."CommunicationRequest" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_priority_idx" ON public."CommunicationRequest" USING btree (priority);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_projectId_idx" ON public."CommunicationRequest" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_recipient_idx" ON public."CommunicationRequest" USING gin (recipient);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_replaces_idx" ON public."CommunicationRequest" USING gin (replaces);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_requester_idx" ON public."CommunicationRequest" USING btree (requester);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_sender_idx" ON public."CommunicationRequest" USING btree (sender);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_status_idx" ON public."CommunicationRequest" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "CommunicationRequest_subject_idx" ON public."CommunicationRequest" USING btree (subject);'
  );
  await client.query('CREATE INDEX "Communication_History_id_idx" ON public."Communication_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Communication_History_lastUpdated_idx" ON public."Communication_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Communication_Token_code_idx" ON public."Communication_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Communication_Token_resourceId_idx" ON public."Communication_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "Communication_Token_system_idx" ON public."Communication_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "Communication_Token_text_idx_tsv" ON public."Communication_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "Communication_Token_value_idx" ON public."Communication_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "Communication__profile_idx" ON public."Communication" USING gin (_profile);');
  await client.query('CREATE INDEX "Communication__security_idx" ON public."Communication" USING gin (_security);');
  await client.query('CREATE INDEX "Communication__source_idx" ON public."Communication" USING btree (_source);');
  await client.query('CREATE INDEX "Communication__tag_idx" ON public."Communication" USING gin (_tag);');
  await client.query('CREATE INDEX "Communication_basedOn_idx" ON public."Communication" USING gin ("basedOn");');
  await client.query(
    'CREATE INDEX "Communication_compartments_idx" ON public."Communication" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "Communication_encounter_idx" ON public."Communication" USING btree (encounter);');
  await client.query(
    'CREATE INDEX "Communication_instantiatesCanonical_idx" ON public."Communication" USING gin ("instantiatesCanonical");'
  );
  await client.query(
    'CREATE INDEX "Communication_instantiatesUri_idx" ON public."Communication" USING gin ("instantiatesUri");'
  );
  await client.query(
    'CREATE INDEX "Communication_lastUpdated_idx" ON public."Communication" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Communication_partOf_idx" ON public."Communication" USING gin ("partOf");');
  await client.query('CREATE INDEX "Communication_patient_idx" ON public."Communication" USING btree (patient);');
  await client.query('CREATE INDEX "Communication_projectId_idx" ON public."Communication" USING btree ("projectId");');
  await client.query('CREATE INDEX "Communication_received_idx" ON public."Communication" USING btree (received);');
  await client.query('CREATE INDEX "Communication_recipient_idx" ON public."Communication" USING gin (recipient);');
  await client.query('CREATE INDEX "Communication_sender_idx" ON public."Communication" USING btree (sender);');
  await client.query('CREATE INDEX "Communication_sent_idx" ON public."Communication" USING btree (sent);');
  await client.query('CREATE INDEX "Communication_status_idx" ON public."Communication" USING btree (status);');
  await client.query('CREATE INDEX "Communication_subject_idx" ON public."Communication" USING btree (subject);');
  await client.query(
    'CREATE INDEX "CompartmentDefinition_History_id_idx" ON public."CompartmentDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_History_lastUpdated_idx" ON public."CompartmentDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_Token_code_idx" ON public."CompartmentDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_Token_resourceId_idx" ON public."CompartmentDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_Token_system_idx" ON public."CompartmentDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_Token_text_idx_tsv" ON public."CompartmentDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_Token_value_idx" ON public."CompartmentDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition__profile_idx" ON public."CompartmentDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition__security_idx" ON public."CompartmentDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition__source_idx" ON public."CompartmentDefinition" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition__tag_idx" ON public."CompartmentDefinition" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_code_idx" ON public."CompartmentDefinition" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_compartments_idx" ON public."CompartmentDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_contextQuantity_idx" ON public."CompartmentDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_contextTypeQuantity_idx" ON public."CompartmentDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_contextTypeValue_idx" ON public."CompartmentDefinition" USING gin ("contextTypeValue");'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_date_idx" ON public."CompartmentDefinition" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_description_idx" ON public."CompartmentDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_lastUpdated_idx" ON public."CompartmentDefinition" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_name_idx" ON public."CompartmentDefinition" USING btree (name);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_projectId_idx" ON public."CompartmentDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_publisher_idx" ON public."CompartmentDefinition" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_resource_idx" ON public."CompartmentDefinition" USING gin (resource);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_status_idx" ON public."CompartmentDefinition" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_url_idx" ON public."CompartmentDefinition" USING btree (url);'
  );
  await client.query(
    'CREATE INDEX "CompartmentDefinition_version_idx" ON public."CompartmentDefinition" USING btree (version);'
  );
  await client.query('CREATE INDEX "Composition_History_id_idx" ON public."Composition_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Composition_History_lastUpdated_idx" ON public."Composition_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Composition_Token_code_idx" ON public."Composition_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Composition_Token_resourceId_idx" ON public."Composition_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Composition_Token_system_idx" ON public."Composition_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Composition_Token_text_idx_tsv" ON public."Composition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Composition_Token_value_idx" ON public."Composition_Token" USING btree (value);');
  await client.query('CREATE INDEX "Composition__profile_idx" ON public."Composition" USING gin (_profile);');
  await client.query('CREATE INDEX "Composition__security_idx" ON public."Composition" USING gin (_security);');
  await client.query('CREATE INDEX "Composition__source_idx" ON public."Composition" USING btree (_source);');
  await client.query('CREATE INDEX "Composition__tag_idx" ON public."Composition" USING gin (_tag);');
  await client.query('CREATE INDEX "Composition_attester_idx" ON public."Composition" USING gin (attester);');
  await client.query('CREATE INDEX "Composition_author_idx" ON public."Composition" USING gin (author);');
  await client.query('CREATE INDEX "Composition_compartments_idx" ON public."Composition" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "Composition_confidentiality_idx" ON public."Composition" USING btree (confidentiality);'
  );
  await client.query('CREATE INDEX "Composition_date_idx" ON public."Composition" USING btree (date);');
  await client.query('CREATE INDEX "Composition_encounter_idx" ON public."Composition" USING btree (encounter);');
  await client.query('CREATE INDEX "Composition_entry_idx" ON public."Composition" USING gin (entry);');
  await client.query('CREATE INDEX "Composition_lastUpdated_idx" ON public."Composition" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Composition_patient_idx" ON public."Composition" USING btree (patient);');
  await client.query('CREATE INDEX "Composition_period_idx" ON public."Composition" USING gin (period);');
  await client.query('CREATE INDEX "Composition_projectId_idx" ON public."Composition" USING btree ("projectId");');
  await client.query('CREATE INDEX "Composition_relatedId_idx" ON public."Composition" USING gin ("relatedId");');
  await client.query('CREATE INDEX "Composition_relatedRef_idx" ON public."Composition" USING gin ("relatedRef");');
  await client.query('CREATE INDEX "Composition_status_idx" ON public."Composition" USING btree (status);');
  await client.query('CREATE INDEX "Composition_subject_idx" ON public."Composition" USING btree (subject);');
  await client.query('CREATE INDEX "Composition_title_idx" ON public."Composition" USING btree (title);');
  await client.query('CREATE INDEX "ConceptMap_History_id_idx" ON public."ConceptMap_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "ConceptMap_History_lastUpdated_idx" ON public."ConceptMap_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ConceptMap_Token_code_idx" ON public."ConceptMap_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "ConceptMap_Token_resourceId_idx" ON public."ConceptMap_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "ConceptMap_Token_system_idx" ON public."ConceptMap_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "ConceptMap_Token_text_idx_tsv" ON public."ConceptMap_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "ConceptMap_Token_value_idx" ON public."ConceptMap_Token" USING btree (value);');
  await client.query('CREATE INDEX "ConceptMap__profile_idx" ON public."ConceptMap" USING gin (_profile);');
  await client.query('CREATE INDEX "ConceptMap__security_idx" ON public."ConceptMap" USING gin (_security);');
  await client.query('CREATE INDEX "ConceptMap__source_idx" ON public."ConceptMap" USING btree (_source);');
  await client.query('CREATE INDEX "ConceptMap__tag_idx" ON public."ConceptMap" USING gin (_tag);');
  await client.query('CREATE INDEX "ConceptMap_compartments_idx" ON public."ConceptMap" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "ConceptMap_contextQuantity_idx" ON public."ConceptMap" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "ConceptMap_contextTypeQuantity_idx" ON public."ConceptMap" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ConceptMap_contextTypeValue_idx" ON public."ConceptMap" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "ConceptMap_date_idx" ON public."ConceptMap" USING btree (date);');
  await client.query('CREATE INDEX "ConceptMap_dependson_idx" ON public."ConceptMap" USING gin (dependson);');
  await client.query('CREATE INDEX "ConceptMap_description_idx" ON public."ConceptMap" USING btree (description);');
  await client.query('CREATE INDEX "ConceptMap_lastUpdated_idx" ON public."ConceptMap" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "ConceptMap_name_idx" ON public."ConceptMap" USING btree (name);');
  await client.query('CREATE INDEX "ConceptMap_other_idx" ON public."ConceptMap" USING gin (other);');
  await client.query('CREATE INDEX "ConceptMap_product_idx" ON public."ConceptMap" USING gin (product);');
  await client.query('CREATE INDEX "ConceptMap_projectId_idx" ON public."ConceptMap" USING btree ("projectId");');
  await client.query('CREATE INDEX "ConceptMap_publisher_idx" ON public."ConceptMap" USING btree (publisher);');
  await client.query('CREATE INDEX "ConceptMap_sourceCode_idx" ON public."ConceptMap" USING gin ("sourceCode");');
  await client.query('CREATE INDEX "ConceptMap_sourceSystem_idx" ON public."ConceptMap" USING gin ("sourceSystem");');
  await client.query('CREATE INDEX "ConceptMap_sourceUri_idx" ON public."ConceptMap" USING btree ("sourceUri");');
  await client.query('CREATE INDEX "ConceptMap_source_idx" ON public."ConceptMap" USING btree (source);');
  await client.query('CREATE INDEX "ConceptMap_status_idx" ON public."ConceptMap" USING btree (status);');
  await client.query('CREATE INDEX "ConceptMap_targetCode_idx" ON public."ConceptMap" USING gin ("targetCode");');
  await client.query('CREATE INDEX "ConceptMap_targetSystem_idx" ON public."ConceptMap" USING gin ("targetSystem");');
  await client.query('CREATE INDEX "ConceptMap_targetUri_idx" ON public."ConceptMap" USING btree ("targetUri");');
  await client.query('CREATE INDEX "ConceptMap_target_idx" ON public."ConceptMap" USING btree (target);');
  await client.query('CREATE INDEX "ConceptMap_title_idx" ON public."ConceptMap" USING btree (title);');
  await client.query('CREATE INDEX "ConceptMap_url_idx" ON public."ConceptMap" USING btree (url);');
  await client.query('CREATE INDEX "ConceptMap_version_idx" ON public."ConceptMap" USING btree (version);');
  await client.query('CREATE INDEX "Condition_History_id_idx" ON public."Condition_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Condition_History_lastUpdated_idx" ON public."Condition_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Condition_Token_code_idx" ON public."Condition_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Condition_Token_resourceId_idx" ON public."Condition_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Condition_Token_system_idx" ON public."Condition_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Condition_Token_text_idx_tsv" ON public."Condition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Condition_Token_value_idx" ON public."Condition_Token" USING btree (value);');
  await client.query('CREATE INDEX "Condition__profile_idx" ON public."Condition" USING gin (_profile);');
  await client.query('CREATE INDEX "Condition__security_idx" ON public."Condition" USING gin (_security);');
  await client.query('CREATE INDEX "Condition__source_idx" ON public."Condition" USING btree (_source);');
  await client.query('CREATE INDEX "Condition__tag_idx" ON public."Condition" USING gin (_tag);');
  await client.query('CREATE INDEX "Condition_abatementAge_idx" ON public."Condition" USING btree ("abatementAge");');
  await client.query('CREATE INDEX "Condition_abatementDate_idx" ON public."Condition" USING btree ("abatementDate");');
  await client.query(
    'CREATE INDEX "Condition_abatementString_idx" ON public."Condition" USING btree ("abatementString");'
  );
  await client.query('CREATE INDEX "Condition_asserter_idx" ON public."Condition" USING btree (asserter);');
  await client.query('CREATE INDEX "Condition_compartments_idx" ON public."Condition" USING gin (compartments);');
  await client.query('CREATE INDEX "Condition_encounter_idx" ON public."Condition" USING btree (encounter);');
  await client.query('CREATE INDEX "Condition_evidenceDetail_idx" ON public."Condition" USING gin ("evidenceDetail");');
  await client.query('CREATE INDEX "Condition_lastUpdated_idx" ON public."Condition" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Condition_onsetAge_idx" ON public."Condition" USING btree ("onsetAge");');
  await client.query('CREATE INDEX "Condition_onsetDate_idx" ON public."Condition" USING btree ("onsetDate");');
  await client.query('CREATE INDEX "Condition_onsetInfo_idx" ON public."Condition" USING btree ("onsetInfo");');
  await client.query('CREATE INDEX "Condition_patient_idx" ON public."Condition" USING btree (patient);');
  await client.query('CREATE INDEX "Condition_projectId_idx" ON public."Condition" USING btree ("projectId");');
  await client.query('CREATE INDEX "Condition_recordedDate_idx" ON public."Condition" USING btree ("recordedDate");');
  await client.query('CREATE INDEX "Condition_subject_idx" ON public."Condition" USING btree (subject);');
  await client.query('CREATE INDEX "Consent_History_id_idx" ON public."Consent_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Consent_History_lastUpdated_idx" ON public."Consent_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Consent_Token_code_idx" ON public."Consent_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Consent_Token_resourceId_idx" ON public."Consent_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Consent_Token_system_idx" ON public."Consent_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Consent_Token_text_idx_tsv" ON public."Consent_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Consent_Token_value_idx" ON public."Consent_Token" USING btree (value);');
  await client.query('CREATE INDEX "Consent__profile_idx" ON public."Consent" USING gin (_profile);');
  await client.query('CREATE INDEX "Consent__security_idx" ON public."Consent" USING gin (_security);');
  await client.query('CREATE INDEX "Consent__source_idx" ON public."Consent" USING btree (_source);');
  await client.query('CREATE INDEX "Consent__tag_idx" ON public."Consent" USING gin (_tag);');
  await client.query('CREATE INDEX "Consent_actor_idx" ON public."Consent" USING gin (actor);');
  await client.query('CREATE INDEX "Consent_compartments_idx" ON public."Consent" USING gin (compartments);');
  await client.query('CREATE INDEX "Consent_consentor_idx" ON public."Consent" USING gin (consentor);');
  await client.query('CREATE INDEX "Consent_data_idx" ON public."Consent" USING gin (data);');
  await client.query('CREATE INDEX "Consent_date_idx" ON public."Consent" USING btree (date);');
  await client.query('CREATE INDEX "Consent_lastUpdated_idx" ON public."Consent" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Consent_organization_idx" ON public."Consent" USING gin (organization);');
  await client.query('CREATE INDEX "Consent_patient_idx" ON public."Consent" USING btree (patient);');
  await client.query('CREATE INDEX "Consent_period_idx" ON public."Consent" USING btree (period);');
  await client.query('CREATE INDEX "Consent_projectId_idx" ON public."Consent" USING btree ("projectId");');
  await client.query('CREATE INDEX "Consent_sourceReference_idx" ON public."Consent" USING btree ("sourceReference");');
  await client.query('CREATE INDEX "Consent_status_idx" ON public."Consent" USING btree (status);');
  await client.query('CREATE INDEX "ContactPoint_resourceId_idx" ON public."ContactPoint" USING btree ("resourceId");');
  await client.query('CREATE INDEX "ContactPoint_system_idx" ON public."ContactPoint" USING btree (system);');
  await client.query('CREATE INDEX "ContactPoint_value_idx" ON public."ContactPoint" USING btree (value);');
  await client.query('CREATE INDEX "Contract_History_id_idx" ON public."Contract_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Contract_History_lastUpdated_idx" ON public."Contract_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Contract_Token_code_idx" ON public."Contract_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Contract_Token_resourceId_idx" ON public."Contract_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Contract_Token_system_idx" ON public."Contract_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Contract_Token_text_idx_tsv" ON public."Contract_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Contract_Token_value_idx" ON public."Contract_Token" USING btree (value);');
  await client.query('CREATE INDEX "Contract__profile_idx" ON public."Contract" USING gin (_profile);');
  await client.query('CREATE INDEX "Contract__security_idx" ON public."Contract" USING gin (_security);');
  await client.query('CREATE INDEX "Contract__source_idx" ON public."Contract" USING btree (_source);');
  await client.query('CREATE INDEX "Contract__tag_idx" ON public."Contract" USING gin (_tag);');
  await client.query('CREATE INDEX "Contract_authority_idx" ON public."Contract" USING gin (authority);');
  await client.query('CREATE INDEX "Contract_compartments_idx" ON public."Contract" USING gin (compartments);');
  await client.query('CREATE INDEX "Contract_domain_idx" ON public."Contract" USING gin (domain);');
  await client.query('CREATE INDEX "Contract_instantiates_idx" ON public."Contract" USING btree (instantiates);');
  await client.query('CREATE INDEX "Contract_issued_idx" ON public."Contract" USING btree (issued);');
  await client.query('CREATE INDEX "Contract_lastUpdated_idx" ON public."Contract" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Contract_patient_idx" ON public."Contract" USING gin (patient);');
  await client.query('CREATE INDEX "Contract_projectId_idx" ON public."Contract" USING btree ("projectId");');
  await client.query('CREATE INDEX "Contract_signer_idx" ON public."Contract" USING gin (signer);');
  await client.query('CREATE INDEX "Contract_status_idx" ON public."Contract" USING btree (status);');
  await client.query('CREATE INDEX "Contract_subject_idx" ON public."Contract" USING gin (subject);');
  await client.query('CREATE INDEX "Contract_url_idx" ON public."Contract" USING btree (url);');
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_History_id_idx" ON public."CoverageEligibilityRequest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_History_lastUpdated_idx" ON public."CoverageEligibilityRequest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_Token_code_idx" ON public."CoverageEligibilityRequest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_Token_resourceId_idx" ON public."CoverageEligibilityRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_Token_system_idx" ON public."CoverageEligibilityRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_Token_text_idx_tsv" ON public."CoverageEligibilityRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_Token_value_idx" ON public."CoverageEligibilityRequest_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest__profile_idx" ON public."CoverageEligibilityRequest" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest__security_idx" ON public."CoverageEligibilityRequest" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest__source_idx" ON public."CoverageEligibilityRequest" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest__tag_idx" ON public."CoverageEligibilityRequest" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_compartments_idx" ON public."CoverageEligibilityRequest" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_created_idx" ON public."CoverageEligibilityRequest" USING btree (created);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_enterer_idx" ON public."CoverageEligibilityRequest" USING btree (enterer);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_facility_idx" ON public."CoverageEligibilityRequest" USING btree (facility);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_lastUpdated_idx" ON public."CoverageEligibilityRequest" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_patient_idx" ON public."CoverageEligibilityRequest" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_projectId_idx" ON public."CoverageEligibilityRequest" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_provider_idx" ON public."CoverageEligibilityRequest" USING btree (provider);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityRequest_status_idx" ON public."CoverageEligibilityRequest" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_History_id_idx" ON public."CoverageEligibilityResponse_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_History_lastUpdated_idx" ON public."CoverageEligibilityResponse_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_Token_code_idx" ON public."CoverageEligibilityResponse_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_Token_resourceId_idx" ON public."CoverageEligibilityResponse_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_Token_system_idx" ON public."CoverageEligibilityResponse_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_Token_text_idx_tsv" ON public."CoverageEligibilityResponse_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_Token_value_idx" ON public."CoverageEligibilityResponse_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse__profile_idx" ON public."CoverageEligibilityResponse" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse__security_idx" ON public."CoverageEligibilityResponse" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse__source_idx" ON public."CoverageEligibilityResponse" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse__tag_idx" ON public."CoverageEligibilityResponse" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_compartments_idx" ON public."CoverageEligibilityResponse" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_created_idx" ON public."CoverageEligibilityResponse" USING btree (created);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_disposition_idx" ON public."CoverageEligibilityResponse" USING btree (disposition);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_insurer_idx" ON public."CoverageEligibilityResponse" USING btree (insurer);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_lastUpdated_idx" ON public."CoverageEligibilityResponse" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_outcome_idx" ON public."CoverageEligibilityResponse" USING btree (outcome);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_patient_idx" ON public."CoverageEligibilityResponse" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_projectId_idx" ON public."CoverageEligibilityResponse" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_request_idx" ON public."CoverageEligibilityResponse" USING btree (request);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_requestor_idx" ON public."CoverageEligibilityResponse" USING btree (requestor);'
  );
  await client.query(
    'CREATE INDEX "CoverageEligibilityResponse_status_idx" ON public."CoverageEligibilityResponse" USING btree (status);'
  );
  await client.query('CREATE INDEX "Coverage_History_id_idx" ON public."Coverage_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Coverage_History_lastUpdated_idx" ON public."Coverage_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Coverage_Token_code_idx" ON public."Coverage_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Coverage_Token_resourceId_idx" ON public."Coverage_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Coverage_Token_system_idx" ON public."Coverage_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Coverage_Token_text_idx_tsv" ON public."Coverage_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Coverage_Token_value_idx" ON public."Coverage_Token" USING btree (value);');
  await client.query('CREATE INDEX "Coverage__profile_idx" ON public."Coverage" USING gin (_profile);');
  await client.query('CREATE INDEX "Coverage__security_idx" ON public."Coverage" USING gin (_security);');
  await client.query('CREATE INDEX "Coverage__source_idx" ON public."Coverage" USING btree (_source);');
  await client.query('CREATE INDEX "Coverage__tag_idx" ON public."Coverage" USING gin (_tag);');
  await client.query('CREATE INDEX "Coverage_beneficiary_idx" ON public."Coverage" USING btree (beneficiary);');
  await client.query('CREATE INDEX "Coverage_classValue_idx" ON public."Coverage" USING gin ("classValue");');
  await client.query('CREATE INDEX "Coverage_compartments_idx" ON public."Coverage" USING gin (compartments);');
  await client.query('CREATE INDEX "Coverage_dependent_idx" ON public."Coverage" USING btree (dependent);');
  await client.query('CREATE INDEX "Coverage_lastUpdated_idx" ON public."Coverage" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Coverage_patient_idx" ON public."Coverage" USING btree (patient);');
  await client.query('CREATE INDEX "Coverage_payor_idx" ON public."Coverage" USING gin (payor);');
  await client.query('CREATE INDEX "Coverage_policyHolder_idx" ON public."Coverage" USING btree ("policyHolder");');
  await client.query('CREATE INDEX "Coverage_projectId_idx" ON public."Coverage" USING btree ("projectId");');
  await client.query('CREATE INDEX "Coverage_status_idx" ON public."Coverage" USING btree (status);');
  await client.query('CREATE INDEX "Coverage_subscriber_idx" ON public."Coverage" USING btree (subscriber);');
  await client.query('CREATE INDEX "DetectedIssue_History_id_idx" ON public."DetectedIssue_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "DetectedIssue_History_lastUpdated_idx" ON public."DetectedIssue_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DetectedIssue_Token_code_idx" ON public."DetectedIssue_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "DetectedIssue_Token_resourceId_idx" ON public."DetectedIssue_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DetectedIssue_Token_system_idx" ON public."DetectedIssue_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DetectedIssue_Token_text_idx_tsv" ON public."DetectedIssue_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DetectedIssue_Token_value_idx" ON public."DetectedIssue_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "DetectedIssue__profile_idx" ON public."DetectedIssue" USING gin (_profile);');
  await client.query('CREATE INDEX "DetectedIssue__security_idx" ON public."DetectedIssue" USING gin (_security);');
  await client.query('CREATE INDEX "DetectedIssue__source_idx" ON public."DetectedIssue" USING btree (_source);');
  await client.query('CREATE INDEX "DetectedIssue__tag_idx" ON public."DetectedIssue" USING gin (_tag);');
  await client.query('CREATE INDEX "DetectedIssue_author_idx" ON public."DetectedIssue" USING btree (author);');
  await client.query(
    'CREATE INDEX "DetectedIssue_compartments_idx" ON public."DetectedIssue" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "DetectedIssue_identified_idx" ON public."DetectedIssue" USING btree (identified);');
  await client.query('CREATE INDEX "DetectedIssue_implicated_idx" ON public."DetectedIssue" USING gin (implicated);');
  await client.query(
    'CREATE INDEX "DetectedIssue_lastUpdated_idx" ON public."DetectedIssue" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DetectedIssue_patient_idx" ON public."DetectedIssue" USING btree (patient);');
  await client.query('CREATE INDEX "DetectedIssue_projectId_idx" ON public."DetectedIssue" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "DeviceDefinition_History_id_idx" ON public."DeviceDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "DeviceDefinition_History_lastUpdated_idx" ON public."DeviceDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DeviceDefinition_Token_code_idx" ON public."DeviceDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "DeviceDefinition_Token_resourceId_idx" ON public."DeviceDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DeviceDefinition_Token_system_idx" ON public."DeviceDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DeviceDefinition_Token_text_idx_tsv" ON public."DeviceDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DeviceDefinition_Token_value_idx" ON public."DeviceDefinition_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "DeviceDefinition__profile_idx" ON public."DeviceDefinition" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "DeviceDefinition__security_idx" ON public."DeviceDefinition" USING gin (_security);'
  );
  await client.query('CREATE INDEX "DeviceDefinition__source_idx" ON public."DeviceDefinition" USING btree (_source);');
  await client.query('CREATE INDEX "DeviceDefinition__tag_idx" ON public."DeviceDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "DeviceDefinition_compartments_idx" ON public."DeviceDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "DeviceDefinition_lastUpdated_idx" ON public."DeviceDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DeviceDefinition_parent_idx" ON public."DeviceDefinition" USING btree (parent);');
  await client.query(
    'CREATE INDEX "DeviceDefinition_projectId_idx" ON public."DeviceDefinition" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "DeviceMetric_History_id_idx" ON public."DeviceMetric_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "DeviceMetric_History_lastUpdated_idx" ON public."DeviceMetric_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DeviceMetric_Token_code_idx" ON public."DeviceMetric_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "DeviceMetric_Token_resourceId_idx" ON public."DeviceMetric_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DeviceMetric_Token_system_idx" ON public."DeviceMetric_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DeviceMetric_Token_text_idx_tsv" ON public."DeviceMetric_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "DeviceMetric_Token_value_idx" ON public."DeviceMetric_Token" USING btree (value);');
  await client.query('CREATE INDEX "DeviceMetric__profile_idx" ON public."DeviceMetric" USING gin (_profile);');
  await client.query('CREATE INDEX "DeviceMetric__security_idx" ON public."DeviceMetric" USING gin (_security);');
  await client.query('CREATE INDEX "DeviceMetric__source_idx" ON public."DeviceMetric" USING btree (_source);');
  await client.query('CREATE INDEX "DeviceMetric__tag_idx" ON public."DeviceMetric" USING gin (_tag);');
  await client.query('CREATE INDEX "DeviceMetric_category_idx" ON public."DeviceMetric" USING btree (category);');
  await client.query('CREATE INDEX "DeviceMetric_compartments_idx" ON public."DeviceMetric" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "DeviceMetric_lastUpdated_idx" ON public."DeviceMetric" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DeviceMetric_parent_idx" ON public."DeviceMetric" USING btree (parent);');
  await client.query('CREATE INDEX "DeviceMetric_projectId_idx" ON public."DeviceMetric" USING btree ("projectId");');
  await client.query('CREATE INDEX "DeviceMetric_source_idx" ON public."DeviceMetric" USING btree (source);');
  await client.query('CREATE INDEX "DeviceRequest_History_id_idx" ON public."DeviceRequest_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "DeviceRequest_History_lastUpdated_idx" ON public."DeviceRequest_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DeviceRequest_Token_code_idx" ON public."DeviceRequest_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "DeviceRequest_Token_resourceId_idx" ON public."DeviceRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DeviceRequest_Token_system_idx" ON public."DeviceRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DeviceRequest_Token_text_idx_tsv" ON public."DeviceRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DeviceRequest_Token_value_idx" ON public."DeviceRequest_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "DeviceRequest__profile_idx" ON public."DeviceRequest" USING gin (_profile);');
  await client.query('CREATE INDEX "DeviceRequest__security_idx" ON public."DeviceRequest" USING gin (_security);');
  await client.query('CREATE INDEX "DeviceRequest__source_idx" ON public."DeviceRequest" USING btree (_source);');
  await client.query('CREATE INDEX "DeviceRequest__tag_idx" ON public."DeviceRequest" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "DeviceRequest_authoredOn_idx" ON public."DeviceRequest" USING btree ("authoredOn");'
  );
  await client.query('CREATE INDEX "DeviceRequest_basedOn_idx" ON public."DeviceRequest" USING gin ("basedOn");');
  await client.query(
    'CREATE INDEX "DeviceRequest_compartments_idx" ON public."DeviceRequest" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "DeviceRequest_device_idx" ON public."DeviceRequest" USING btree (device);');
  await client.query('CREATE INDEX "DeviceRequest_encounter_idx" ON public."DeviceRequest" USING btree (encounter);');
  await client.query('CREATE INDEX "DeviceRequest_eventDate_idx" ON public."DeviceRequest" USING btree ("eventDate");');
  await client.query(
    'CREATE INDEX "DeviceRequest_groupIdentifier_idx" ON public."DeviceRequest" USING btree ("groupIdentifier");'
  );
  await client.query(
    'CREATE INDEX "DeviceRequest_instantiatesCanonical_idx" ON public."DeviceRequest" USING gin ("instantiatesCanonical");'
  );
  await client.query(
    'CREATE INDEX "DeviceRequest_instantiatesUri_idx" ON public."DeviceRequest" USING gin ("instantiatesUri");'
  );
  await client.query('CREATE INDEX "DeviceRequest_insurance_idx" ON public."DeviceRequest" USING gin (insurance);');
  await client.query('CREATE INDEX "DeviceRequest_intent_idx" ON public."DeviceRequest" USING btree (intent);');
  await client.query(
    'CREATE INDEX "DeviceRequest_lastUpdated_idx" ON public."DeviceRequest" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DeviceRequest_patient_idx" ON public."DeviceRequest" USING btree (patient);');
  await client.query('CREATE INDEX "DeviceRequest_performer_idx" ON public."DeviceRequest" USING btree (performer);');
  await client.query(
    'CREATE INDEX "DeviceRequest_priorRequest_idx" ON public."DeviceRequest" USING gin ("priorRequest");'
  );
  await client.query('CREATE INDEX "DeviceRequest_projectId_idx" ON public."DeviceRequest" USING btree ("projectId");');
  await client.query('CREATE INDEX "DeviceRequest_requester_idx" ON public."DeviceRequest" USING btree (requester);');
  await client.query('CREATE INDEX "DeviceRequest_status_idx" ON public."DeviceRequest" USING btree (status);');
  await client.query('CREATE INDEX "DeviceRequest_subject_idx" ON public."DeviceRequest" USING btree (subject);');
  await client.query(
    'CREATE INDEX "DeviceUseStatement_History_id_idx" ON public."DeviceUseStatement_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_History_lastUpdated_idx" ON public."DeviceUseStatement_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_Token_code_idx" ON public."DeviceUseStatement_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_Token_resourceId_idx" ON public."DeviceUseStatement_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_Token_system_idx" ON public."DeviceUseStatement_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_Token_text_idx_tsv" ON public."DeviceUseStatement_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_Token_value_idx" ON public."DeviceUseStatement_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement__profile_idx" ON public."DeviceUseStatement" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement__security_idx" ON public."DeviceUseStatement" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement__source_idx" ON public."DeviceUseStatement" USING btree (_source);'
  );
  await client.query('CREATE INDEX "DeviceUseStatement__tag_idx" ON public."DeviceUseStatement" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "DeviceUseStatement_compartments_idx" ON public."DeviceUseStatement" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_device_idx" ON public."DeviceUseStatement" USING btree (device);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_lastUpdated_idx" ON public."DeviceUseStatement" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_patient_idx" ON public."DeviceUseStatement" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_projectId_idx" ON public."DeviceUseStatement" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "DeviceUseStatement_subject_idx" ON public."DeviceUseStatement" USING btree (subject);'
  );
  await client.query('CREATE INDEX "Device_History_id_idx" ON public."Device_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Device_History_lastUpdated_idx" ON public."Device_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Device_Token_code_idx" ON public."Device_Token" USING btree (code);');
  await client.query('CREATE INDEX "Device_Token_resourceId_idx" ON public."Device_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Device_Token_system_idx" ON public."Device_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Device_Token_text_idx_tsv" ON public."Device_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Device_Token_value_idx" ON public."Device_Token" USING btree (value);');
  await client.query('CREATE INDEX "Device__profile_idx" ON public."Device" USING gin (_profile);');
  await client.query('CREATE INDEX "Device__security_idx" ON public."Device" USING gin (_security);');
  await client.query('CREATE INDEX "Device__source_idx" ON public."Device" USING btree (_source);');
  await client.query('CREATE INDEX "Device__tag_idx" ON public."Device" USING gin (_tag);');
  await client.query('CREATE INDEX "Device_compartments_idx" ON public."Device" USING gin (compartments);');
  await client.query('CREATE INDEX "Device_deviceName_idx" ON public."Device" USING gin ("deviceName");');
  await client.query('CREATE INDEX "Device_lastUpdated_idx" ON public."Device" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Device_location_idx" ON public."Device" USING btree (location);');
  await client.query('CREATE INDEX "Device_manufacturer_idx" ON public."Device" USING btree (manufacturer);');
  await client.query('CREATE INDEX "Device_model_idx" ON public."Device" USING btree (model);');
  await client.query('CREATE INDEX "Device_organization_idx" ON public."Device" USING btree (organization);');
  await client.query('CREATE INDEX "Device_patient_idx" ON public."Device" USING btree (patient);');
  await client.query('CREATE INDEX "Device_projectId_idx" ON public."Device" USING btree ("projectId");');
  await client.query('CREATE INDEX "Device_status_idx" ON public."Device" USING btree (status);');
  await client.query('CREATE INDEX "Device_udiCarrier_idx" ON public."Device" USING gin ("udiCarrier");');
  await client.query('CREATE INDEX "Device_udiDi_idx" ON public."Device" USING gin ("udiDi");');
  await client.query('CREATE INDEX "Device_url_idx" ON public."Device" USING btree (url);');
  await client.query(
    'CREATE INDEX "DiagnosticReport_History_id_idx" ON public."DiagnosticReport_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "DiagnosticReport_History_lastUpdated_idx" ON public."DiagnosticReport_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DiagnosticReport_Token_code_idx" ON public."DiagnosticReport_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "DiagnosticReport_Token_resourceId_idx" ON public."DiagnosticReport_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DiagnosticReport_Token_system_idx" ON public."DiagnosticReport_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DiagnosticReport_Token_text_idx_tsv" ON public."DiagnosticReport_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DiagnosticReport_Token_value_idx" ON public."DiagnosticReport_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "DiagnosticReport__profile_idx" ON public."DiagnosticReport" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "DiagnosticReport__security_idx" ON public."DiagnosticReport" USING gin (_security);'
  );
  await client.query('CREATE INDEX "DiagnosticReport__source_idx" ON public."DiagnosticReport" USING btree (_source);');
  await client.query('CREATE INDEX "DiagnosticReport__tag_idx" ON public."DiagnosticReport" USING gin (_tag);');
  await client.query('CREATE INDEX "DiagnosticReport_basedOn_idx" ON public."DiagnosticReport" USING gin ("basedOn");');
  await client.query(
    'CREATE INDEX "DiagnosticReport_compartments_idx" ON public."DiagnosticReport" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "DiagnosticReport_date_idx" ON public."DiagnosticReport" USING btree (date);');
  await client.query(
    'CREATE INDEX "DiagnosticReport_encounter_idx" ON public."DiagnosticReport" USING btree (encounter);'
  );
  await client.query('CREATE INDEX "DiagnosticReport_issued_idx" ON public."DiagnosticReport" USING btree (issued);');
  await client.query(
    'CREATE INDEX "DiagnosticReport_lastUpdated_idx" ON public."DiagnosticReport" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DiagnosticReport_media_idx" ON public."DiagnosticReport" USING gin (media);');
  await client.query('CREATE INDEX "DiagnosticReport_patient_idx" ON public."DiagnosticReport" USING btree (patient);');
  await client.query(
    'CREATE INDEX "DiagnosticReport_performer_idx" ON public."DiagnosticReport" USING gin (performer);'
  );
  await client.query(
    'CREATE INDEX "DiagnosticReport_projectId_idx" ON public."DiagnosticReport" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "DiagnosticReport_result_idx" ON public."DiagnosticReport" USING gin (result);');
  await client.query(
    'CREATE INDEX "DiagnosticReport_resultsInterpreter_idx" ON public."DiagnosticReport" USING gin ("resultsInterpreter");'
  );
  await client.query('CREATE INDEX "DiagnosticReport_specimen_idx" ON public."DiagnosticReport" USING gin (specimen);');
  await client.query('CREATE INDEX "DiagnosticReport_status_idx" ON public."DiagnosticReport" USING btree (status);');
  await client.query('CREATE INDEX "DiagnosticReport_subject_idx" ON public."DiagnosticReport" USING btree (subject);');
  await client.query(
    'CREATE INDEX "DocumentManifest_History_id_idx" ON public."DocumentManifest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_History_lastUpdated_idx" ON public."DocumentManifest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_Token_code_idx" ON public."DocumentManifest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_Token_resourceId_idx" ON public."DocumentManifest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_Token_system_idx" ON public."DocumentManifest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_Token_text_idx_tsv" ON public."DocumentManifest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_Token_value_idx" ON public."DocumentManifest_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "DocumentManifest__profile_idx" ON public."DocumentManifest" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "DocumentManifest__security_idx" ON public."DocumentManifest" USING gin (_security);'
  );
  await client.query('CREATE INDEX "DocumentManifest__source_idx" ON public."DocumentManifest" USING btree (_source);');
  await client.query('CREATE INDEX "DocumentManifest__tag_idx" ON public."DocumentManifest" USING gin (_tag);');
  await client.query('CREATE INDEX "DocumentManifest_author_idx" ON public."DocumentManifest" USING gin (author);');
  await client.query(
    'CREATE INDEX "DocumentManifest_compartments_idx" ON public."DocumentManifest" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "DocumentManifest_created_idx" ON public."DocumentManifest" USING btree (created);');
  await client.query(
    'CREATE INDEX "DocumentManifest_description_idx" ON public."DocumentManifest" USING btree (description);'
  );
  await client.query('CREATE INDEX "DocumentManifest_item_idx" ON public."DocumentManifest" USING gin (item);');
  await client.query(
    'CREATE INDEX "DocumentManifest_lastUpdated_idx" ON public."DocumentManifest" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "DocumentManifest_patient_idx" ON public."DocumentManifest" USING btree (patient);');
  await client.query(
    'CREATE INDEX "DocumentManifest_projectId_idx" ON public."DocumentManifest" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_recipient_idx" ON public."DocumentManifest" USING gin (recipient);'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_relatedId_idx" ON public."DocumentManifest" USING gin ("relatedId");'
  );
  await client.query(
    'CREATE INDEX "DocumentManifest_relatedRef_idx" ON public."DocumentManifest" USING gin ("relatedRef");'
  );
  await client.query('CREATE INDEX "DocumentManifest_source_idx" ON public."DocumentManifest" USING btree (source);');
  await client.query('CREATE INDEX "DocumentManifest_status_idx" ON public."DocumentManifest" USING btree (status);');
  await client.query('CREATE INDEX "DocumentManifest_subject_idx" ON public."DocumentManifest" USING btree (subject);');
  await client.query(
    'CREATE INDEX "DocumentReference_History_id_idx" ON public."DocumentReference_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_History_lastUpdated_idx" ON public."DocumentReference_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_Token_code_idx" ON public."DocumentReference_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_Token_resourceId_idx" ON public."DocumentReference_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_Token_system_idx" ON public."DocumentReference_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_Token_text_idx_tsv" ON public."DocumentReference_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_Token_value_idx" ON public."DocumentReference_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference__profile_idx" ON public."DocumentReference" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference__security_idx" ON public."DocumentReference" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference__source_idx" ON public."DocumentReference" USING btree (_source);'
  );
  await client.query('CREATE INDEX "DocumentReference__tag_idx" ON public."DocumentReference" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "DocumentReference_authenticator_idx" ON public."DocumentReference" USING btree (authenticator);'
  );
  await client.query('CREATE INDEX "DocumentReference_author_idx" ON public."DocumentReference" USING gin (author);');
  await client.query(
    'CREATE INDEX "DocumentReference_compartments_idx" ON public."DocumentReference" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_contenttype_idx" ON public."DocumentReference" USING gin (contenttype);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_custodian_idx" ON public."DocumentReference" USING btree (custodian);'
  );
  await client.query('CREATE INDEX "DocumentReference_date_idx" ON public."DocumentReference" USING btree (date);');
  await client.query(
    'CREATE INDEX "DocumentReference_description_idx" ON public."DocumentReference" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_encounter_idx" ON public."DocumentReference" USING gin (encounter);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_language_idx" ON public."DocumentReference" USING gin (language);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_lastUpdated_idx" ON public."DocumentReference" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_location_idx" ON public."DocumentReference" USING gin (location);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_patient_idx" ON public."DocumentReference" USING btree (patient);'
  );
  await client.query('CREATE INDEX "DocumentReference_period_idx" ON public."DocumentReference" USING btree (period);');
  await client.query(
    'CREATE INDEX "DocumentReference_projectId_idx" ON public."DocumentReference" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "DocumentReference_related_idx" ON public."DocumentReference" USING gin (related);');
  await client.query(
    'CREATE INDEX "DocumentReference_relatesto_idx" ON public."DocumentReference" USING gin (relatesto);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_relation_idx" ON public."DocumentReference" USING gin (relation);'
  );
  await client.query(
    'CREATE INDEX "DocumentReference_relationship_idx" ON public."DocumentReference" USING gin (relationship);'
  );
  await client.query('CREATE INDEX "DocumentReference_status_idx" ON public."DocumentReference" USING btree (status);');
  await client.query(
    'CREATE INDEX "DocumentReference_subject_idx" ON public."DocumentReference" USING btree (subject);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_History_id_idx" ON public."DomainConfiguration_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_History_lastUpdated_idx" ON public."DomainConfiguration_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_Token_code_idx" ON public."DomainConfiguration_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_Token_resourceId_idx" ON public."DomainConfiguration_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_Token_system_idx" ON public."DomainConfiguration_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_Token_text_idx_tsv" ON public."DomainConfiguration_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_Token_value_idx" ON public."DomainConfiguration_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration__profile_idx" ON public."DomainConfiguration" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration__security_idx" ON public."DomainConfiguration" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration__source_idx" ON public."DomainConfiguration" USING btree (_source);'
  );
  await client.query('CREATE INDEX "DomainConfiguration__tag_idx" ON public."DomainConfiguration" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "DomainConfiguration_compartments_idx" ON public."DomainConfiguration" USING gin (compartments);'
  );
  await client.query(
    'CREATE UNIQUE INDEX "DomainConfiguration_domain_idx" ON public."DomainConfiguration" USING btree (domain);'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_lastUpdated_idx" ON public."DomainConfiguration" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "DomainConfiguration_projectId_idx" ON public."DomainConfiguration" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_History_id_idx" ON public."EffectEvidenceSynthesis_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_History_lastUpdated_idx" ON public."EffectEvidenceSynthesis_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_Token_code_idx" ON public."EffectEvidenceSynthesis_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_Token_resourceId_idx" ON public."EffectEvidenceSynthesis_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_Token_system_idx" ON public."EffectEvidenceSynthesis_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_Token_text_idx_tsv" ON public."EffectEvidenceSynthesis_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_Token_value_idx" ON public."EffectEvidenceSynthesis_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis__profile_idx" ON public."EffectEvidenceSynthesis" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis__security_idx" ON public."EffectEvidenceSynthesis" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis__source_idx" ON public."EffectEvidenceSynthesis" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis__tag_idx" ON public."EffectEvidenceSynthesis" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_compartments_idx" ON public."EffectEvidenceSynthesis" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_contextQuantity_idx" ON public."EffectEvidenceSynthesis" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_contextTypeQuantity_idx" ON public."EffectEvidenceSynthesis" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_contextTypeValue_idx" ON public."EffectEvidenceSynthesis" USING gin ("contextTypeValue");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_date_idx" ON public."EffectEvidenceSynthesis" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_description_idx" ON public."EffectEvidenceSynthesis" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_effective_idx" ON public."EffectEvidenceSynthesis" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_lastUpdated_idx" ON public."EffectEvidenceSynthesis" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_name_idx" ON public."EffectEvidenceSynthesis" USING btree (name);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_projectId_idx" ON public."EffectEvidenceSynthesis" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_publisher_idx" ON public."EffectEvidenceSynthesis" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_status_idx" ON public."EffectEvidenceSynthesis" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_title_idx" ON public."EffectEvidenceSynthesis" USING btree (title);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_url_idx" ON public."EffectEvidenceSynthesis" USING btree (url);'
  );
  await client.query(
    'CREATE INDEX "EffectEvidenceSynthesis_version_idx" ON public."EffectEvidenceSynthesis" USING btree (version);'
  );
  await client.query('CREATE INDEX "Encounter_History_id_idx" ON public."Encounter_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Encounter_History_lastUpdated_idx" ON public."Encounter_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Encounter_Token_code_idx" ON public."Encounter_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Encounter_Token_resourceId_idx" ON public."Encounter_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Encounter_Token_system_idx" ON public."Encounter_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Encounter_Token_text_idx_tsv" ON public."Encounter_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Encounter_Token_value_idx" ON public."Encounter_Token" USING btree (value);');
  await client.query('CREATE INDEX "Encounter__profile_idx" ON public."Encounter" USING gin (_profile);');
  await client.query('CREATE INDEX "Encounter__security_idx" ON public."Encounter" USING gin (_security);');
  await client.query('CREATE INDEX "Encounter__source_idx" ON public."Encounter" USING btree (_source);');
  await client.query('CREATE INDEX "Encounter__tag_idx" ON public."Encounter" USING gin (_tag);');
  await client.query('CREATE INDEX "Encounter_account_idx" ON public."Encounter" USING gin (account);');
  await client.query('CREATE INDEX "Encounter_appointment_idx" ON public."Encounter" USING gin (appointment);');
  await client.query('CREATE INDEX "Encounter_basedOn_idx" ON public."Encounter" USING gin ("basedOn");');
  await client.query('CREATE INDEX "Encounter_compartments_idx" ON public."Encounter" USING gin (compartments);');
  await client.query('CREATE INDEX "Encounter_date_idx" ON public."Encounter" USING btree (date);');
  await client.query('CREATE INDEX "Encounter_diagnosis_idx" ON public."Encounter" USING gin (diagnosis);');
  await client.query('CREATE INDEX "Encounter_episodeOfCare_idx" ON public."Encounter" USING gin ("episodeOfCare");');
  await client.query('CREATE INDEX "Encounter_lastUpdated_idx" ON public."Encounter" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Encounter_length_idx" ON public."Encounter" USING btree (length);');
  await client.query('CREATE INDEX "Encounter_locationPeriod_idx" ON public."Encounter" USING gin ("locationPeriod");');
  await client.query('CREATE INDEX "Encounter_location_idx" ON public."Encounter" USING gin (location);');
  await client.query('CREATE INDEX "Encounter_partOf_idx" ON public."Encounter" USING btree ("partOf");');
  await client.query('CREATE INDEX "Encounter_participant_idx" ON public."Encounter" USING gin (participant);');
  await client.query('CREATE INDEX "Encounter_patient_idx" ON public."Encounter" USING btree (patient);');
  await client.query('CREATE INDEX "Encounter_practitioner_idx" ON public."Encounter" USING gin (practitioner);');
  await client.query('CREATE INDEX "Encounter_projectId_idx" ON public."Encounter" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "Encounter_reasonReference_idx" ON public."Encounter" USING gin ("reasonReference");'
  );
  await client.query(
    'CREATE INDEX "Encounter_serviceProvider_idx" ON public."Encounter" USING btree ("serviceProvider");'
  );
  await client.query('CREATE INDEX "Encounter_status_idx" ON public."Encounter" USING btree (status);');
  await client.query('CREATE INDEX "Encounter_subject_idx" ON public."Encounter" USING btree (subject);');
  await client.query('CREATE INDEX "Endpoint_History_id_idx" ON public."Endpoint_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Endpoint_History_lastUpdated_idx" ON public."Endpoint_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Endpoint_Token_code_idx" ON public."Endpoint_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Endpoint_Token_resourceId_idx" ON public."Endpoint_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Endpoint_Token_system_idx" ON public."Endpoint_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Endpoint_Token_text_idx_tsv" ON public."Endpoint_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Endpoint_Token_value_idx" ON public."Endpoint_Token" USING btree (value);');
  await client.query('CREATE INDEX "Endpoint__profile_idx" ON public."Endpoint" USING gin (_profile);');
  await client.query('CREATE INDEX "Endpoint__security_idx" ON public."Endpoint" USING gin (_security);');
  await client.query('CREATE INDEX "Endpoint__source_idx" ON public."Endpoint" USING btree (_source);');
  await client.query('CREATE INDEX "Endpoint__tag_idx" ON public."Endpoint" USING gin (_tag);');
  await client.query('CREATE INDEX "Endpoint_compartments_idx" ON public."Endpoint" USING gin (compartments);');
  await client.query('CREATE INDEX "Endpoint_lastUpdated_idx" ON public."Endpoint" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Endpoint_name_idx" ON public."Endpoint" USING btree (name);');
  await client.query('CREATE INDEX "Endpoint_organization_idx" ON public."Endpoint" USING btree (organization);');
  await client.query('CREATE INDEX "Endpoint_projectId_idx" ON public."Endpoint" USING btree ("projectId");');
  await client.query('CREATE INDEX "Endpoint_status_idx" ON public."Endpoint" USING btree (status);');
  await client.query(
    'CREATE INDEX "EnrollmentRequest_History_id_idx" ON public."EnrollmentRequest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_History_lastUpdated_idx" ON public."EnrollmentRequest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_Token_code_idx" ON public."EnrollmentRequest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_Token_resourceId_idx" ON public."EnrollmentRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_Token_system_idx" ON public."EnrollmentRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_Token_text_idx_tsv" ON public."EnrollmentRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_Token_value_idx" ON public."EnrollmentRequest_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest__profile_idx" ON public."EnrollmentRequest" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest__security_idx" ON public."EnrollmentRequest" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest__source_idx" ON public."EnrollmentRequest" USING btree (_source);'
  );
  await client.query('CREATE INDEX "EnrollmentRequest__tag_idx" ON public."EnrollmentRequest" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "EnrollmentRequest_compartments_idx" ON public."EnrollmentRequest" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_lastUpdated_idx" ON public."EnrollmentRequest" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_patient_idx" ON public."EnrollmentRequest" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentRequest_projectId_idx" ON public."EnrollmentRequest" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "EnrollmentRequest_status_idx" ON public."EnrollmentRequest" USING btree (status);');
  await client.query(
    'CREATE INDEX "EnrollmentRequest_subject_idx" ON public."EnrollmentRequest" USING btree (subject);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_History_id_idx" ON public."EnrollmentResponse_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_History_lastUpdated_idx" ON public."EnrollmentResponse_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_Token_code_idx" ON public."EnrollmentResponse_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_Token_resourceId_idx" ON public."EnrollmentResponse_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_Token_system_idx" ON public."EnrollmentResponse_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_Token_text_idx_tsv" ON public."EnrollmentResponse_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_Token_value_idx" ON public."EnrollmentResponse_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse__profile_idx" ON public."EnrollmentResponse" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse__security_idx" ON public."EnrollmentResponse" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse__source_idx" ON public."EnrollmentResponse" USING btree (_source);'
  );
  await client.query('CREATE INDEX "EnrollmentResponse__tag_idx" ON public."EnrollmentResponse" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "EnrollmentResponse_compartments_idx" ON public."EnrollmentResponse" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_lastUpdated_idx" ON public."EnrollmentResponse" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_projectId_idx" ON public."EnrollmentResponse" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_request_idx" ON public."EnrollmentResponse" USING btree (request);'
  );
  await client.query(
    'CREATE INDEX "EnrollmentResponse_status_idx" ON public."EnrollmentResponse" USING btree (status);'
  );
  await client.query('CREATE INDEX "EpisodeOfCare_History_id_idx" ON public."EpisodeOfCare_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "EpisodeOfCare_History_lastUpdated_idx" ON public."EpisodeOfCare_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "EpisodeOfCare_Token_code_idx" ON public."EpisodeOfCare_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "EpisodeOfCare_Token_resourceId_idx" ON public."EpisodeOfCare_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "EpisodeOfCare_Token_system_idx" ON public."EpisodeOfCare_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "EpisodeOfCare_Token_text_idx_tsv" ON public."EpisodeOfCare_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "EpisodeOfCare_Token_value_idx" ON public."EpisodeOfCare_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "EpisodeOfCare__profile_idx" ON public."EpisodeOfCare" USING gin (_profile);');
  await client.query('CREATE INDEX "EpisodeOfCare__security_idx" ON public."EpisodeOfCare" USING gin (_security);');
  await client.query('CREATE INDEX "EpisodeOfCare__source_idx" ON public."EpisodeOfCare" USING btree (_source);');
  await client.query('CREATE INDEX "EpisodeOfCare__tag_idx" ON public."EpisodeOfCare" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "EpisodeOfCare_careManager_idx" ON public."EpisodeOfCare" USING btree ("careManager");'
  );
  await client.query(
    'CREATE INDEX "EpisodeOfCare_compartments_idx" ON public."EpisodeOfCare" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "EpisodeOfCare_condition_idx" ON public."EpisodeOfCare" USING gin (condition);');
  await client.query('CREATE INDEX "EpisodeOfCare_date_idx" ON public."EpisodeOfCare" USING btree (date);');
  await client.query(
    'CREATE INDEX "EpisodeOfCare_incomingReferral_idx" ON public."EpisodeOfCare" USING gin ("incomingReferral");'
  );
  await client.query(
    'CREATE INDEX "EpisodeOfCare_lastUpdated_idx" ON public."EpisodeOfCare" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EpisodeOfCare_organization_idx" ON public."EpisodeOfCare" USING btree (organization);'
  );
  await client.query('CREATE INDEX "EpisodeOfCare_patient_idx" ON public."EpisodeOfCare" USING btree (patient);');
  await client.query('CREATE INDEX "EpisodeOfCare_projectId_idx" ON public."EpisodeOfCare" USING btree ("projectId");');
  await client.query('CREATE INDEX "EpisodeOfCare_status_idx" ON public."EpisodeOfCare" USING btree (status);');
  await client.query(
    'CREATE INDEX "EventDefinition_History_id_idx" ON public."EventDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_History_lastUpdated_idx" ON public."EventDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_Token_code_idx" ON public."EventDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_Token_resourceId_idx" ON public."EventDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_Token_system_idx" ON public."EventDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_Token_text_idx_tsv" ON public."EventDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_Token_value_idx" ON public."EventDefinition_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "EventDefinition__profile_idx" ON public."EventDefinition" USING gin (_profile);');
  await client.query('CREATE INDEX "EventDefinition__security_idx" ON public."EventDefinition" USING gin (_security);');
  await client.query('CREATE INDEX "EventDefinition__source_idx" ON public."EventDefinition" USING btree (_source);');
  await client.query('CREATE INDEX "EventDefinition__tag_idx" ON public."EventDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "EventDefinition_compartments_idx" ON public."EventDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_composedOf_idx" ON public."EventDefinition" USING gin ("composedOf");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_contextQuantity_idx" ON public."EventDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_contextTypeQuantity_idx" ON public."EventDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_contextTypeValue_idx" ON public."EventDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "EventDefinition_date_idx" ON public."EventDefinition" USING btree (date);');
  await client.query(
    'CREATE INDEX "EventDefinition_dependsOn_idx" ON public."EventDefinition" USING gin ("dependsOn");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_derivedFrom_idx" ON public."EventDefinition" USING gin ("derivedFrom");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_description_idx" ON public."EventDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_effective_idx" ON public."EventDefinition" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_lastUpdated_idx" ON public."EventDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "EventDefinition_name_idx" ON public."EventDefinition" USING btree (name);');
  await client.query(
    'CREATE INDEX "EventDefinition_predecessor_idx" ON public."EventDefinition" USING gin (predecessor);'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_projectId_idx" ON public."EventDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "EventDefinition_publisher_idx" ON public."EventDefinition" USING btree (publisher);'
  );
  await client.query('CREATE INDEX "EventDefinition_status_idx" ON public."EventDefinition" USING btree (status);');
  await client.query('CREATE INDEX "EventDefinition_successor_idx" ON public."EventDefinition" USING gin (successor);');
  await client.query('CREATE INDEX "EventDefinition_title_idx" ON public."EventDefinition" USING btree (title);');
  await client.query('CREATE INDEX "EventDefinition_url_idx" ON public."EventDefinition" USING btree (url);');
  await client.query('CREATE INDEX "EventDefinition_version_idx" ON public."EventDefinition" USING btree (version);');
  await client.query(
    'CREATE INDEX "EvidenceVariable_History_id_idx" ON public."EvidenceVariable_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_History_lastUpdated_idx" ON public."EvidenceVariable_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_Token_code_idx" ON public."EvidenceVariable_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_Token_resourceId_idx" ON public."EvidenceVariable_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_Token_system_idx" ON public."EvidenceVariable_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_Token_text_idx_tsv" ON public."EvidenceVariable_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_Token_value_idx" ON public."EvidenceVariable_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "EvidenceVariable__profile_idx" ON public."EvidenceVariable" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "EvidenceVariable__security_idx" ON public."EvidenceVariable" USING gin (_security);'
  );
  await client.query('CREATE INDEX "EvidenceVariable__source_idx" ON public."EvidenceVariable" USING btree (_source);');
  await client.query('CREATE INDEX "EvidenceVariable__tag_idx" ON public."EvidenceVariable" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "EvidenceVariable_compartments_idx" ON public."EvidenceVariable" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_composedOf_idx" ON public."EvidenceVariable" USING gin ("composedOf");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_contextQuantity_idx" ON public."EvidenceVariable" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_contextTypeQuantity_idx" ON public."EvidenceVariable" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_contextTypeValue_idx" ON public."EvidenceVariable" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "EvidenceVariable_date_idx" ON public."EvidenceVariable" USING btree (date);');
  await client.query(
    'CREATE INDEX "EvidenceVariable_dependsOn_idx" ON public."EvidenceVariable" USING gin ("dependsOn");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_derivedFrom_idx" ON public."EvidenceVariable" USING gin ("derivedFrom");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_description_idx" ON public."EvidenceVariable" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_effective_idx" ON public."EvidenceVariable" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_lastUpdated_idx" ON public."EvidenceVariable" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "EvidenceVariable_name_idx" ON public."EvidenceVariable" USING btree (name);');
  await client.query(
    'CREATE INDEX "EvidenceVariable_predecessor_idx" ON public."EvidenceVariable" USING gin (predecessor);'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_projectId_idx" ON public."EvidenceVariable" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "EvidenceVariable_publisher_idx" ON public."EvidenceVariable" USING btree (publisher);'
  );
  await client.query('CREATE INDEX "EvidenceVariable_status_idx" ON public."EvidenceVariable" USING btree (status);');
  await client.query(
    'CREATE INDEX "EvidenceVariable_successor_idx" ON public."EvidenceVariable" USING gin (successor);'
  );
  await client.query('CREATE INDEX "EvidenceVariable_title_idx" ON public."EvidenceVariable" USING btree (title);');
  await client.query('CREATE INDEX "EvidenceVariable_url_idx" ON public."EvidenceVariable" USING btree (url);');
  await client.query('CREATE INDEX "EvidenceVariable_version_idx" ON public."EvidenceVariable" USING btree (version);');
  await client.query('CREATE INDEX "Evidence_History_id_idx" ON public."Evidence_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Evidence_History_lastUpdated_idx" ON public."Evidence_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Evidence_Token_code_idx" ON public."Evidence_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Evidence_Token_resourceId_idx" ON public."Evidence_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Evidence_Token_system_idx" ON public."Evidence_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Evidence_Token_text_idx_tsv" ON public."Evidence_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Evidence_Token_value_idx" ON public."Evidence_Token" USING btree (value);');
  await client.query('CREATE INDEX "Evidence__profile_idx" ON public."Evidence" USING gin (_profile);');
  await client.query('CREATE INDEX "Evidence__security_idx" ON public."Evidence" USING gin (_security);');
  await client.query('CREATE INDEX "Evidence__source_idx" ON public."Evidence" USING btree (_source);');
  await client.query('CREATE INDEX "Evidence__tag_idx" ON public."Evidence" USING gin (_tag);');
  await client.query('CREATE INDEX "Evidence_compartments_idx" ON public."Evidence" USING gin (compartments);');
  await client.query('CREATE INDEX "Evidence_composedOf_idx" ON public."Evidence" USING gin ("composedOf");');
  await client.query('CREATE INDEX "Evidence_contextQuantity_idx" ON public."Evidence" USING gin ("contextQuantity");');
  await client.query(
    'CREATE INDEX "Evidence_contextTypeQuantity_idx" ON public."Evidence" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "Evidence_contextTypeValue_idx" ON public."Evidence" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "Evidence_date_idx" ON public."Evidence" USING btree (date);');
  await client.query('CREATE INDEX "Evidence_dependsOn_idx" ON public."Evidence" USING gin ("dependsOn");');
  await client.query('CREATE INDEX "Evidence_derivedFrom_idx" ON public."Evidence" USING gin ("derivedFrom");');
  await client.query('CREATE INDEX "Evidence_description_idx" ON public."Evidence" USING btree (description);');
  await client.query('CREATE INDEX "Evidence_effective_idx" ON public."Evidence" USING btree (effective);');
  await client.query('CREATE INDEX "Evidence_lastUpdated_idx" ON public."Evidence" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Evidence_name_idx" ON public."Evidence" USING btree (name);');
  await client.query('CREATE INDEX "Evidence_predecessor_idx" ON public."Evidence" USING gin (predecessor);');
  await client.query('CREATE INDEX "Evidence_projectId_idx" ON public."Evidence" USING btree ("projectId");');
  await client.query('CREATE INDEX "Evidence_publisher_idx" ON public."Evidence" USING btree (publisher);');
  await client.query('CREATE INDEX "Evidence_status_idx" ON public."Evidence" USING btree (status);');
  await client.query('CREATE INDEX "Evidence_successor_idx" ON public."Evidence" USING gin (successor);');
  await client.query('CREATE INDEX "Evidence_title_idx" ON public."Evidence" USING btree (title);');
  await client.query('CREATE INDEX "Evidence_url_idx" ON public."Evidence" USING btree (url);');
  await client.query('CREATE INDEX "Evidence_version_idx" ON public."Evidence" USING btree (version);');
  await client.query(
    'CREATE INDEX "ExampleScenario_History_id_idx" ON public."ExampleScenario_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_History_lastUpdated_idx" ON public."ExampleScenario_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_Token_code_idx" ON public."ExampleScenario_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_Token_resourceId_idx" ON public."ExampleScenario_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_Token_system_idx" ON public."ExampleScenario_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_Token_text_idx_tsv" ON public."ExampleScenario_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_Token_value_idx" ON public."ExampleScenario_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "ExampleScenario__profile_idx" ON public."ExampleScenario" USING gin (_profile);');
  await client.query('CREATE INDEX "ExampleScenario__security_idx" ON public."ExampleScenario" USING gin (_security);');
  await client.query('CREATE INDEX "ExampleScenario__source_idx" ON public."ExampleScenario" USING btree (_source);');
  await client.query('CREATE INDEX "ExampleScenario__tag_idx" ON public."ExampleScenario" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ExampleScenario_compartments_idx" ON public."ExampleScenario" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_contextQuantity_idx" ON public."ExampleScenario" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_contextTypeQuantity_idx" ON public."ExampleScenario" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_contextTypeValue_idx" ON public."ExampleScenario" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "ExampleScenario_date_idx" ON public."ExampleScenario" USING btree (date);');
  await client.query(
    'CREATE INDEX "ExampleScenario_lastUpdated_idx" ON public."ExampleScenario" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ExampleScenario_name_idx" ON public."ExampleScenario" USING btree (name);');
  await client.query(
    'CREATE INDEX "ExampleScenario_projectId_idx" ON public."ExampleScenario" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ExampleScenario_publisher_idx" ON public."ExampleScenario" USING btree (publisher);'
  );
  await client.query('CREATE INDEX "ExampleScenario_status_idx" ON public."ExampleScenario" USING btree (status);');
  await client.query('CREATE INDEX "ExampleScenario_url_idx" ON public."ExampleScenario" USING btree (url);');
  await client.query('CREATE INDEX "ExampleScenario_version_idx" ON public."ExampleScenario" USING btree (version);');
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_History_id_idx" ON public."ExplanationOfBenefit_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_History_lastUpdated_idx" ON public."ExplanationOfBenefit_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_Token_code_idx" ON public."ExplanationOfBenefit_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_Token_resourceId_idx" ON public."ExplanationOfBenefit_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_Token_system_idx" ON public."ExplanationOfBenefit_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_Token_text_idx_tsv" ON public."ExplanationOfBenefit_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_Token_value_idx" ON public."ExplanationOfBenefit_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit__profile_idx" ON public."ExplanationOfBenefit" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit__security_idx" ON public."ExplanationOfBenefit" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit__source_idx" ON public."ExplanationOfBenefit" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ExplanationOfBenefit__tag_idx" ON public."ExplanationOfBenefit" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_careTeam_idx" ON public."ExplanationOfBenefit" USING gin ("careTeam");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_claim_idx" ON public."ExplanationOfBenefit" USING btree (claim);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_compartments_idx" ON public."ExplanationOfBenefit" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_coverage_idx" ON public."ExplanationOfBenefit" USING gin (coverage);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_created_idx" ON public."ExplanationOfBenefit" USING btree (created);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_detailUdi_idx" ON public."ExplanationOfBenefit" USING gin ("detailUdi");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_disposition_idx" ON public."ExplanationOfBenefit" USING btree (disposition);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_encounter_idx" ON public."ExplanationOfBenefit" USING gin (encounter);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_enterer_idx" ON public."ExplanationOfBenefit" USING btree (enterer);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_facility_idx" ON public."ExplanationOfBenefit" USING btree (facility);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_itemUdi_idx" ON public."ExplanationOfBenefit" USING gin ("itemUdi");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_lastUpdated_idx" ON public."ExplanationOfBenefit" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_patient_idx" ON public."ExplanationOfBenefit" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_payee_idx" ON public."ExplanationOfBenefit" USING btree (payee);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_procedureUdi_idx" ON public."ExplanationOfBenefit" USING gin ("procedureUdi");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_projectId_idx" ON public."ExplanationOfBenefit" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_provider_idx" ON public."ExplanationOfBenefit" USING btree (provider);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_status_idx" ON public."ExplanationOfBenefit" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ExplanationOfBenefit_subdetailUdi_idx" ON public."ExplanationOfBenefit" USING gin ("subdetailUdi");'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_History_id_idx" ON public."FamilyMemberHistory_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_History_lastUpdated_idx" ON public."FamilyMemberHistory_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_Token_code_idx" ON public."FamilyMemberHistory_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_Token_resourceId_idx" ON public."FamilyMemberHistory_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_Token_system_idx" ON public."FamilyMemberHistory_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_Token_text_idx_tsv" ON public."FamilyMemberHistory_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_Token_value_idx" ON public."FamilyMemberHistory_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory__profile_idx" ON public."FamilyMemberHistory" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory__security_idx" ON public."FamilyMemberHistory" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory__source_idx" ON public."FamilyMemberHistory" USING btree (_source);'
  );
  await client.query('CREATE INDEX "FamilyMemberHistory__tag_idx" ON public."FamilyMemberHistory" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_compartments_idx" ON public."FamilyMemberHistory" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "FamilyMemberHistory_date_idx" ON public."FamilyMemberHistory" USING btree (date);');
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_instantiatesCanonical_idx" ON public."FamilyMemberHistory" USING gin ("instantiatesCanonical");'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_instantiatesUri_idx" ON public."FamilyMemberHistory" USING gin ("instantiatesUri");'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_lastUpdated_idx" ON public."FamilyMemberHistory" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_patient_idx" ON public."FamilyMemberHistory" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_projectId_idx" ON public."FamilyMemberHistory" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "FamilyMemberHistory_status_idx" ON public."FamilyMemberHistory" USING btree (status);'
  );
  await client.query('CREATE INDEX "Flag_History_id_idx" ON public."Flag_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Flag_History_lastUpdated_idx" ON public."Flag_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Flag_Token_code_idx" ON public."Flag_Token" USING btree (code);');
  await client.query('CREATE INDEX "Flag_Token_resourceId_idx" ON public."Flag_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Flag_Token_system_idx" ON public."Flag_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Flag_Token_text_idx_tsv" ON public."Flag_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Flag_Token_value_idx" ON public."Flag_Token" USING btree (value);');
  await client.query('CREATE INDEX "Flag__profile_idx" ON public."Flag" USING gin (_profile);');
  await client.query('CREATE INDEX "Flag__security_idx" ON public."Flag" USING gin (_security);');
  await client.query('CREATE INDEX "Flag__source_idx" ON public."Flag" USING btree (_source);');
  await client.query('CREATE INDEX "Flag__tag_idx" ON public."Flag" USING gin (_tag);');
  await client.query('CREATE INDEX "Flag_author_idx" ON public."Flag" USING btree (author);');
  await client.query('CREATE INDEX "Flag_compartments_idx" ON public."Flag" USING gin (compartments);');
  await client.query('CREATE INDEX "Flag_date_idx" ON public."Flag" USING btree (date);');
  await client.query('CREATE INDEX "Flag_encounter_idx" ON public."Flag" USING btree (encounter);');
  await client.query('CREATE INDEX "Flag_lastUpdated_idx" ON public."Flag" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Flag_patient_idx" ON public."Flag" USING btree (patient);');
  await client.query('CREATE INDEX "Flag_projectId_idx" ON public."Flag" USING btree ("projectId");');
  await client.query('CREATE INDEX "Flag_subject_idx" ON public."Flag" USING btree (subject);');
  await client.query('CREATE INDEX "Goal_History_id_idx" ON public."Goal_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Goal_History_lastUpdated_idx" ON public."Goal_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Goal_Token_code_idx" ON public."Goal_Token" USING btree (code);');
  await client.query('CREATE INDEX "Goal_Token_resourceId_idx" ON public."Goal_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Goal_Token_system_idx" ON public."Goal_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Goal_Token_text_idx_tsv" ON public."Goal_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Goal_Token_value_idx" ON public."Goal_Token" USING btree (value);');
  await client.query('CREATE INDEX "Goal__profile_idx" ON public."Goal" USING gin (_profile);');
  await client.query('CREATE INDEX "Goal__security_idx" ON public."Goal" USING gin (_security);');
  await client.query('CREATE INDEX "Goal__source_idx" ON public."Goal" USING btree (_source);');
  await client.query('CREATE INDEX "Goal__tag_idx" ON public."Goal" USING gin (_tag);');
  await client.query('CREATE INDEX "Goal_compartments_idx" ON public."Goal" USING gin (compartments);');
  await client.query('CREATE INDEX "Goal_lastUpdated_idx" ON public."Goal" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Goal_lifecycleStatus_idx" ON public."Goal" USING btree ("lifecycleStatus");');
  await client.query('CREATE INDEX "Goal_patient_idx" ON public."Goal" USING btree (patient);');
  await client.query('CREATE INDEX "Goal_projectId_idx" ON public."Goal" USING btree ("projectId");');
  await client.query('CREATE INDEX "Goal_startDate_idx" ON public."Goal" USING btree ("startDate");');
  await client.query('CREATE INDEX "Goal_subject_idx" ON public."Goal" USING btree (subject);');
  await client.query('CREATE INDEX "Goal_targetDate_idx" ON public."Goal" USING gin ("targetDate");');
  await client.query(
    'CREATE INDEX "GraphDefinition_History_id_idx" ON public."GraphDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_History_lastUpdated_idx" ON public."GraphDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_Token_code_idx" ON public."GraphDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_Token_resourceId_idx" ON public."GraphDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_Token_system_idx" ON public."GraphDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_Token_text_idx_tsv" ON public."GraphDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_Token_value_idx" ON public."GraphDefinition_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "GraphDefinition__profile_idx" ON public."GraphDefinition" USING gin (_profile);');
  await client.query('CREATE INDEX "GraphDefinition__security_idx" ON public."GraphDefinition" USING gin (_security);');
  await client.query('CREATE INDEX "GraphDefinition__source_idx" ON public."GraphDefinition" USING btree (_source);');
  await client.query('CREATE INDEX "GraphDefinition__tag_idx" ON public."GraphDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "GraphDefinition_compartments_idx" ON public."GraphDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_contextQuantity_idx" ON public."GraphDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_contextTypeQuantity_idx" ON public."GraphDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_contextTypeValue_idx" ON public."GraphDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "GraphDefinition_date_idx" ON public."GraphDefinition" USING btree (date);');
  await client.query(
    'CREATE INDEX "GraphDefinition_description_idx" ON public."GraphDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_lastUpdated_idx" ON public."GraphDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "GraphDefinition_name_idx" ON public."GraphDefinition" USING btree (name);');
  await client.query(
    'CREATE INDEX "GraphDefinition_projectId_idx" ON public."GraphDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "GraphDefinition_publisher_idx" ON public."GraphDefinition" USING btree (publisher);'
  );
  await client.query('CREATE INDEX "GraphDefinition_start_idx" ON public."GraphDefinition" USING btree (start);');
  await client.query('CREATE INDEX "GraphDefinition_status_idx" ON public."GraphDefinition" USING btree (status);');
  await client.query('CREATE INDEX "GraphDefinition_url_idx" ON public."GraphDefinition" USING btree (url);');
  await client.query('CREATE INDEX "GraphDefinition_version_idx" ON public."GraphDefinition" USING btree (version);');
  await client.query('CREATE INDEX "Group_History_id_idx" ON public."Group_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Group_History_lastUpdated_idx" ON public."Group_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Group_Token_code_idx" ON public."Group_Token" USING btree (code);');
  await client.query('CREATE INDEX "Group_Token_resourceId_idx" ON public."Group_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Group_Token_system_idx" ON public."Group_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Group_Token_text_idx_tsv" ON public."Group_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Group_Token_value_idx" ON public."Group_Token" USING btree (value);');
  await client.query('CREATE INDEX "Group__profile_idx" ON public."Group" USING gin (_profile);');
  await client.query('CREATE INDEX "Group__security_idx" ON public."Group" USING gin (_security);');
  await client.query('CREATE INDEX "Group__source_idx" ON public."Group" USING btree (_source);');
  await client.query('CREATE INDEX "Group__tag_idx" ON public."Group" USING gin (_tag);');
  await client.query('CREATE INDEX "Group_actual_idx" ON public."Group" USING btree (actual);');
  await client.query(
    'CREATE INDEX "Group_characteristicValue_idx" ON public."Group" USING gin ("characteristicValue");'
  );
  await client.query('CREATE INDEX "Group_compartments_idx" ON public."Group" USING gin (compartments);');
  await client.query('CREATE INDEX "Group_exclude_idx" ON public."Group" USING gin (exclude);');
  await client.query('CREATE INDEX "Group_lastUpdated_idx" ON public."Group" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Group_managingEntity_idx" ON public."Group" USING btree ("managingEntity");');
  await client.query('CREATE INDEX "Group_member_idx" ON public."Group" USING gin (member);');
  await client.query('CREATE INDEX "Group_projectId_idx" ON public."Group" USING btree ("projectId");');
  await client.query('CREATE INDEX "Group_type_idx" ON public."Group" USING btree (type);');
  await client.query(
    'CREATE INDEX "GuidanceResponse_History_id_idx" ON public."GuidanceResponse_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "GuidanceResponse_History_lastUpdated_idx" ON public."GuidanceResponse_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "GuidanceResponse_Token_code_idx" ON public."GuidanceResponse_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "GuidanceResponse_Token_resourceId_idx" ON public."GuidanceResponse_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "GuidanceResponse_Token_system_idx" ON public."GuidanceResponse_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "GuidanceResponse_Token_text_idx_tsv" ON public."GuidanceResponse_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "GuidanceResponse_Token_value_idx" ON public."GuidanceResponse_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "GuidanceResponse__profile_idx" ON public."GuidanceResponse" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "GuidanceResponse__security_idx" ON public."GuidanceResponse" USING gin (_security);'
  );
  await client.query('CREATE INDEX "GuidanceResponse__source_idx" ON public."GuidanceResponse" USING btree (_source);');
  await client.query('CREATE INDEX "GuidanceResponse__tag_idx" ON public."GuidanceResponse" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "GuidanceResponse_compartments_idx" ON public."GuidanceResponse" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "GuidanceResponse_lastUpdated_idx" ON public."GuidanceResponse" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "GuidanceResponse_patient_idx" ON public."GuidanceResponse" USING btree (patient);');
  await client.query(
    'CREATE INDEX "GuidanceResponse_projectId_idx" ON public."GuidanceResponse" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "GuidanceResponse_request_idx" ON public."GuidanceResponse" USING btree (request);');
  await client.query('CREATE INDEX "GuidanceResponse_subject_idx" ON public."GuidanceResponse" USING btree (subject);');
  await client.query(
    'CREATE INDEX "HealthcareService_History_id_idx" ON public."HealthcareService_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_History_lastUpdated_idx" ON public."HealthcareService_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_Token_code_idx" ON public."HealthcareService_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_Token_resourceId_idx" ON public."HealthcareService_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_Token_system_idx" ON public."HealthcareService_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_Token_text_idx_tsv" ON public."HealthcareService_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_Token_value_idx" ON public."HealthcareService_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService__profile_idx" ON public."HealthcareService" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService__security_idx" ON public."HealthcareService" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService__source_idx" ON public."HealthcareService" USING btree (_source);'
  );
  await client.query('CREATE INDEX "HealthcareService__tag_idx" ON public."HealthcareService" USING gin (_tag);');
  await client.query('CREATE INDEX "HealthcareService_active_idx" ON public."HealthcareService" USING btree (active);');
  await client.query(
    'CREATE INDEX "HealthcareService_compartments_idx" ON public."HealthcareService" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_coverageArea_idx" ON public."HealthcareService" USING gin ("coverageArea");'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_endpoint_idx" ON public."HealthcareService" USING gin (endpoint);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_lastUpdated_idx" ON public."HealthcareService" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_location_idx" ON public."HealthcareService" USING gin (location);'
  );
  await client.query('CREATE INDEX "HealthcareService_name_idx" ON public."HealthcareService" USING btree (name);');
  await client.query(
    'CREATE INDEX "HealthcareService_organization_idx" ON public."HealthcareService" USING btree (organization);'
  );
  await client.query(
    'CREATE INDEX "HealthcareService_projectId_idx" ON public."HealthcareService" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "HumanName_family_idx" ON public."HumanName" USING btree (family);');
  await client.query(
    'CREATE INDEX "HumanName_family_idx_tsv" ON public."HumanName" USING gin (to_tsvector(\'simple\'::regconfig, family));'
  );
  await client.query('CREATE INDEX "HumanName_given_idx" ON public."HumanName" USING btree (given);');
  await client.query(
    'CREATE INDEX "HumanName_given_idx_tsv" ON public."HumanName" USING gin (to_tsvector(\'simple\'::regconfig, given));'
  );
  await client.query('CREATE INDEX "HumanName_name_idx" ON public."HumanName" USING btree (name);');
  await client.query(
    'CREATE INDEX "HumanName_name_idx_tsv" ON public."HumanName" USING gin (to_tsvector(\'simple\'::regconfig, name));'
  );
  await client.query('CREATE INDEX "HumanName_resourceId_idx" ON public."HumanName" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Identifier_resourceId_idx" ON public."Identifier" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Identifier_system_idx" ON public."Identifier" USING btree (system);');
  await client.query('CREATE INDEX "Identifier_value_idx" ON public."Identifier" USING btree (value);');
  await client.query('CREATE INDEX "ImagingStudy_History_id_idx" ON public."ImagingStudy_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "ImagingStudy_History_lastUpdated_idx" ON public."ImagingStudy_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ImagingStudy_Token_code_idx" ON public."ImagingStudy_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "ImagingStudy_Token_resourceId_idx" ON public."ImagingStudy_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ImagingStudy_Token_system_idx" ON public."ImagingStudy_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ImagingStudy_Token_text_idx_tsv" ON public."ImagingStudy_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "ImagingStudy_Token_value_idx" ON public."ImagingStudy_Token" USING btree (value);');
  await client.query('CREATE INDEX "ImagingStudy__profile_idx" ON public."ImagingStudy" USING gin (_profile);');
  await client.query('CREATE INDEX "ImagingStudy__security_idx" ON public."ImagingStudy" USING gin (_security);');
  await client.query('CREATE INDEX "ImagingStudy__source_idx" ON public."ImagingStudy" USING btree (_source);');
  await client.query('CREATE INDEX "ImagingStudy__tag_idx" ON public."ImagingStudy" USING gin (_tag);');
  await client.query('CREATE INDEX "ImagingStudy_basedon_idx" ON public."ImagingStudy" USING gin (basedon);');
  await client.query('CREATE INDEX "ImagingStudy_compartments_idx" ON public."ImagingStudy" USING gin (compartments);');
  await client.query('CREATE INDEX "ImagingStudy_encounter_idx" ON public."ImagingStudy" USING btree (encounter);');
  await client.query('CREATE INDEX "ImagingStudy_endpoint_idx" ON public."ImagingStudy" USING gin (endpoint);');
  await client.query('CREATE INDEX "ImagingStudy_instance_idx" ON public."ImagingStudy" USING gin (instance);');
  await client.query('CREATE INDEX "ImagingStudy_interpreter_idx" ON public."ImagingStudy" USING gin (interpreter);');
  await client.query(
    'CREATE INDEX "ImagingStudy_lastUpdated_idx" ON public."ImagingStudy" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ImagingStudy_patient_idx" ON public."ImagingStudy" USING btree (patient);');
  await client.query('CREATE INDEX "ImagingStudy_performer_idx" ON public."ImagingStudy" USING gin (performer);');
  await client.query('CREATE INDEX "ImagingStudy_projectId_idx" ON public."ImagingStudy" USING btree ("projectId");');
  await client.query('CREATE INDEX "ImagingStudy_referrer_idx" ON public."ImagingStudy" USING btree (referrer);');
  await client.query('CREATE INDEX "ImagingStudy_series_idx" ON public."ImagingStudy" USING gin (series);');
  await client.query('CREATE INDEX "ImagingStudy_started_idx" ON public."ImagingStudy" USING btree (started);');
  await client.query('CREATE INDEX "ImagingStudy_status_idx" ON public."ImagingStudy" USING btree (status);');
  await client.query('CREATE INDEX "ImagingStudy_subject_idx" ON public."ImagingStudy" USING btree (subject);');
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_History_id_idx" ON public."ImmunizationEvaluation_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_History_lastUpdated_idx" ON public."ImmunizationEvaluation_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_Token_code_idx" ON public."ImmunizationEvaluation_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_Token_resourceId_idx" ON public."ImmunizationEvaluation_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_Token_system_idx" ON public."ImmunizationEvaluation_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_Token_text_idx_tsv" ON public."ImmunizationEvaluation_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_Token_value_idx" ON public."ImmunizationEvaluation_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation__profile_idx" ON public."ImmunizationEvaluation" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation__security_idx" ON public."ImmunizationEvaluation" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation__source_idx" ON public."ImmunizationEvaluation" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation__tag_idx" ON public."ImmunizationEvaluation" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_compartments_idx" ON public."ImmunizationEvaluation" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_date_idx" ON public."ImmunizationEvaluation" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_immunizationEvent_idx" ON public."ImmunizationEvaluation" USING btree ("immunizationEvent");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_lastUpdated_idx" ON public."ImmunizationEvaluation" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_patient_idx" ON public."ImmunizationEvaluation" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_projectId_idx" ON public."ImmunizationEvaluation" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationEvaluation_status_idx" ON public."ImmunizationEvaluation" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_History_id_idx" ON public."ImmunizationRecommendation_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_History_lastUpdated_idx" ON public."ImmunizationRecommendation_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_Token_code_idx" ON public."ImmunizationRecommendation_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_Token_resourceId_idx" ON public."ImmunizationRecommendation_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_Token_system_idx" ON public."ImmunizationRecommendation_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_Token_text_idx_tsv" ON public."ImmunizationRecommendation_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_Token_value_idx" ON public."ImmunizationRecommendation_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation__profile_idx" ON public."ImmunizationRecommendation" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation__security_idx" ON public."ImmunizationRecommendation" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation__source_idx" ON public."ImmunizationRecommendation" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation__tag_idx" ON public."ImmunizationRecommendation" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_compartments_idx" ON public."ImmunizationRecommendation" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_date_idx" ON public."ImmunizationRecommendation" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_information_idx" ON public."ImmunizationRecommendation" USING gin (information);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_lastUpdated_idx" ON public."ImmunizationRecommendation" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_patient_idx" ON public."ImmunizationRecommendation" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_projectId_idx" ON public."ImmunizationRecommendation" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ImmunizationRecommendation_support_idx" ON public."ImmunizationRecommendation" USING gin (support);'
  );
  await client.query('CREATE INDEX "Immunization_History_id_idx" ON public."Immunization_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Immunization_History_lastUpdated_idx" ON public."Immunization_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Immunization_Token_code_idx" ON public."Immunization_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Immunization_Token_resourceId_idx" ON public."Immunization_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "Immunization_Token_system_idx" ON public."Immunization_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "Immunization_Token_text_idx_tsv" ON public."Immunization_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Immunization_Token_value_idx" ON public."Immunization_Token" USING btree (value);');
  await client.query('CREATE INDEX "Immunization__profile_idx" ON public."Immunization" USING gin (_profile);');
  await client.query('CREATE INDEX "Immunization__security_idx" ON public."Immunization" USING gin (_security);');
  await client.query('CREATE INDEX "Immunization__source_idx" ON public."Immunization" USING btree (_source);');
  await client.query('CREATE INDEX "Immunization__tag_idx" ON public."Immunization" USING gin (_tag);');
  await client.query('CREATE INDEX "Immunization_compartments_idx" ON public."Immunization" USING gin (compartments);');
  await client.query('CREATE INDEX "Immunization_date_idx" ON public."Immunization" USING btree (date);');
  await client.query(
    'CREATE INDEX "Immunization_lastUpdated_idx" ON public."Immunization" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Immunization_location_idx" ON public."Immunization" USING btree (location);');
  await client.query('CREATE INDEX "Immunization_lotNumber_idx" ON public."Immunization" USING btree ("lotNumber");');
  await client.query(
    'CREATE INDEX "Immunization_manufacturer_idx" ON public."Immunization" USING btree (manufacturer);'
  );
  await client.query('CREATE INDEX "Immunization_patient_idx" ON public."Immunization" USING btree (patient);');
  await client.query('CREATE INDEX "Immunization_performer_idx" ON public."Immunization" USING gin (performer);');
  await client.query('CREATE INDEX "Immunization_projectId_idx" ON public."Immunization" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "Immunization_reactionDate_idx" ON public."Immunization" USING gin ("reactionDate");'
  );
  await client.query('CREATE INDEX "Immunization_reaction_idx" ON public."Immunization" USING gin (reaction);');
  await client.query(
    'CREATE INDEX "Immunization_reasonReference_idx" ON public."Immunization" USING gin ("reasonReference");'
  );
  await client.query('CREATE INDEX "Immunization_series_idx" ON public."Immunization" USING gin (series);');
  await client.query('CREATE INDEX "Immunization_status_idx" ON public."Immunization" USING btree (status);');
  await client.query(
    'CREATE INDEX "ImplementationGuide_History_id_idx" ON public."ImplementationGuide_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_History_lastUpdated_idx" ON public."ImplementationGuide_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_Token_code_idx" ON public."ImplementationGuide_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_Token_resourceId_idx" ON public."ImplementationGuide_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_Token_system_idx" ON public."ImplementationGuide_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_Token_text_idx_tsv" ON public."ImplementationGuide_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_Token_value_idx" ON public."ImplementationGuide_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide__profile_idx" ON public."ImplementationGuide" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide__security_idx" ON public."ImplementationGuide" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide__source_idx" ON public."ImplementationGuide" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ImplementationGuide__tag_idx" ON public."ImplementationGuide" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ImplementationGuide_compartments_idx" ON public."ImplementationGuide" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_contextQuantity_idx" ON public."ImplementationGuide" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_contextTypeQuantity_idx" ON public."ImplementationGuide" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_contextTypeValue_idx" ON public."ImplementationGuide" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "ImplementationGuide_date_idx" ON public."ImplementationGuide" USING btree (date);');
  await client.query(
    'CREATE INDEX "ImplementationGuide_dependsOn_idx" ON public."ImplementationGuide" USING gin ("dependsOn");'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_description_idx" ON public."ImplementationGuide" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_experimental_idx" ON public."ImplementationGuide" USING btree (experimental);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_global_idx" ON public."ImplementationGuide" USING gin (global);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_lastUpdated_idx" ON public."ImplementationGuide" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ImplementationGuide_name_idx" ON public."ImplementationGuide" USING btree (name);');
  await client.query(
    'CREATE INDEX "ImplementationGuide_projectId_idx" ON public."ImplementationGuide" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_publisher_idx" ON public."ImplementationGuide" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_resource_idx" ON public."ImplementationGuide" USING gin (resource);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_status_idx" ON public."ImplementationGuide" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ImplementationGuide_title_idx" ON public."ImplementationGuide" USING btree (title);'
  );
  await client.query('CREATE INDEX "ImplementationGuide_url_idx" ON public."ImplementationGuide" USING btree (url);');
  await client.query(
    'CREATE INDEX "ImplementationGuide_version_idx" ON public."ImplementationGuide" USING btree (version);'
  );
  await client.query('CREATE INDEX "InsurancePlan_History_id_idx" ON public."InsurancePlan_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "InsurancePlan_History_lastUpdated_idx" ON public."InsurancePlan_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "InsurancePlan_Token_code_idx" ON public."InsurancePlan_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "InsurancePlan_Token_resourceId_idx" ON public."InsurancePlan_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "InsurancePlan_Token_system_idx" ON public."InsurancePlan_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "InsurancePlan_Token_text_idx_tsv" ON public."InsurancePlan_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "InsurancePlan_Token_value_idx" ON public."InsurancePlan_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "InsurancePlan__profile_idx" ON public."InsurancePlan" USING gin (_profile);');
  await client.query('CREATE INDEX "InsurancePlan__security_idx" ON public."InsurancePlan" USING gin (_security);');
  await client.query('CREATE INDEX "InsurancePlan__source_idx" ON public."InsurancePlan" USING btree (_source);');
  await client.query('CREATE INDEX "InsurancePlan__tag_idx" ON public."InsurancePlan" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "InsurancePlan_administeredBy_idx" ON public."InsurancePlan" USING btree ("administeredBy");'
  );
  await client.query(
    'CREATE INDEX "InsurancePlan_compartments_idx" ON public."InsurancePlan" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "InsurancePlan_endpoint_idx" ON public."InsurancePlan" USING gin (endpoint);');
  await client.query(
    'CREATE INDEX "InsurancePlan_lastUpdated_idx" ON public."InsurancePlan" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "InsurancePlan_name_idx" ON public."InsurancePlan" USING btree (name);');
  await client.query('CREATE INDEX "InsurancePlan_ownedBy_idx" ON public."InsurancePlan" USING btree ("ownedBy");');
  await client.query('CREATE INDEX "InsurancePlan_phonetic_idx" ON public."InsurancePlan" USING btree (phonetic);');
  await client.query('CREATE INDEX "InsurancePlan_projectId_idx" ON public."InsurancePlan" USING btree ("projectId");');
  await client.query('CREATE INDEX "InsurancePlan_status_idx" ON public."InsurancePlan" USING btree (status);');
  await client.query('CREATE INDEX "Invoice_History_id_idx" ON public."Invoice_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Invoice_History_lastUpdated_idx" ON public."Invoice_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Invoice_Token_code_idx" ON public."Invoice_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Invoice_Token_resourceId_idx" ON public."Invoice_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Invoice_Token_system_idx" ON public."Invoice_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Invoice_Token_text_idx_tsv" ON public."Invoice_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Invoice_Token_value_idx" ON public."Invoice_Token" USING btree (value);');
  await client.query('CREATE INDEX "Invoice__profile_idx" ON public."Invoice" USING gin (_profile);');
  await client.query('CREATE INDEX "Invoice__security_idx" ON public."Invoice" USING gin (_security);');
  await client.query('CREATE INDEX "Invoice__source_idx" ON public."Invoice" USING btree (_source);');
  await client.query('CREATE INDEX "Invoice__tag_idx" ON public."Invoice" USING gin (_tag);');
  await client.query('CREATE INDEX "Invoice_account_idx" ON public."Invoice" USING btree (account);');
  await client.query('CREATE INDEX "Invoice_compartments_idx" ON public."Invoice" USING gin (compartments);');
  await client.query('CREATE INDEX "Invoice_date_idx" ON public."Invoice" USING btree (date);');
  await client.query('CREATE INDEX "Invoice_issuer_idx" ON public."Invoice" USING btree (issuer);');
  await client.query('CREATE INDEX "Invoice_lastUpdated_idx" ON public."Invoice" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Invoice_participant_idx" ON public."Invoice" USING gin (participant);');
  await client.query('CREATE INDEX "Invoice_patient_idx" ON public."Invoice" USING btree (patient);');
  await client.query('CREATE INDEX "Invoice_projectId_idx" ON public."Invoice" USING btree ("projectId");');
  await client.query('CREATE INDEX "Invoice_recipient_idx" ON public."Invoice" USING btree (recipient);');
  await client.query('CREATE INDEX "Invoice_status_idx" ON public."Invoice" USING btree (status);');
  await client.query('CREATE INDEX "Invoice_subject_idx" ON public."Invoice" USING btree (subject);');
  await client.query('CREATE INDEX "Invoice_totalgross_idx" ON public."Invoice" USING btree (totalgross);');
  await client.query('CREATE INDEX "Invoice_totalnet_idx" ON public."Invoice" USING btree (totalnet);');
  await client.query('CREATE INDEX "JsonWebKey_History_id_idx" ON public."JsonWebKey_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "JsonWebKey_History_lastUpdated_idx" ON public."JsonWebKey_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "JsonWebKey_Token_code_idx" ON public."JsonWebKey_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "JsonWebKey_Token_resourceId_idx" ON public."JsonWebKey_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "JsonWebKey_Token_system_idx" ON public."JsonWebKey_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "JsonWebKey_Token_text_idx_tsv" ON public."JsonWebKey_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "JsonWebKey_Token_value_idx" ON public."JsonWebKey_Token" USING btree (value);');
  await client.query('CREATE INDEX "JsonWebKey__profile_idx" ON public."JsonWebKey" USING gin (_profile);');
  await client.query('CREATE INDEX "JsonWebKey__security_idx" ON public."JsonWebKey" USING gin (_security);');
  await client.query('CREATE INDEX "JsonWebKey__source_idx" ON public."JsonWebKey" USING btree (_source);');
  await client.query('CREATE INDEX "JsonWebKey__tag_idx" ON public."JsonWebKey" USING gin (_tag);');
  await client.query('CREATE INDEX "JsonWebKey_active_idx" ON public."JsonWebKey" USING btree (active);');
  await client.query('CREATE INDEX "JsonWebKey_compartments_idx" ON public."JsonWebKey" USING gin (compartments);');
  await client.query('CREATE INDEX "JsonWebKey_lastUpdated_idx" ON public."JsonWebKey" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "JsonWebKey_projectId_idx" ON public."JsonWebKey" USING btree ("projectId");');
  await client.query('CREATE INDEX "Library_History_id_idx" ON public."Library_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Library_History_lastUpdated_idx" ON public."Library_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Library_Token_code_idx" ON public."Library_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Library_Token_resourceId_idx" ON public."Library_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Library_Token_system_idx" ON public."Library_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Library_Token_text_idx_tsv" ON public."Library_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Library_Token_value_idx" ON public."Library_Token" USING btree (value);');
  await client.query('CREATE INDEX "Library__profile_idx" ON public."Library" USING gin (_profile);');
  await client.query('CREATE INDEX "Library__security_idx" ON public."Library" USING gin (_security);');
  await client.query('CREATE INDEX "Library__source_idx" ON public."Library" USING btree (_source);');
  await client.query('CREATE INDEX "Library__tag_idx" ON public."Library" USING gin (_tag);');
  await client.query('CREATE INDEX "Library_compartments_idx" ON public."Library" USING gin (compartments);');
  await client.query('CREATE INDEX "Library_composedOf_idx" ON public."Library" USING gin ("composedOf");');
  await client.query('CREATE INDEX "Library_contentType_idx" ON public."Library" USING gin ("contentType");');
  await client.query('CREATE INDEX "Library_contextQuantity_idx" ON public."Library" USING gin ("contextQuantity");');
  await client.query(
    'CREATE INDEX "Library_contextTypeQuantity_idx" ON public."Library" USING gin ("contextTypeQuantity");'
  );
  await client.query('CREATE INDEX "Library_contextTypeValue_idx" ON public."Library" USING gin ("contextTypeValue");');
  await client.query('CREATE INDEX "Library_date_idx" ON public."Library" USING btree (date);');
  await client.query('CREATE INDEX "Library_dependsOn_idx" ON public."Library" USING gin ("dependsOn");');
  await client.query('CREATE INDEX "Library_derivedFrom_idx" ON public."Library" USING gin ("derivedFrom");');
  await client.query('CREATE INDEX "Library_description_idx" ON public."Library" USING btree (description);');
  await client.query('CREATE INDEX "Library_effective_idx" ON public."Library" USING btree (effective);');
  await client.query('CREATE INDEX "Library_lastUpdated_idx" ON public."Library" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Library_name_idx" ON public."Library" USING btree (name);');
  await client.query('CREATE INDEX "Library_predecessor_idx" ON public."Library" USING gin (predecessor);');
  await client.query('CREATE INDEX "Library_projectId_idx" ON public."Library" USING btree ("projectId");');
  await client.query('CREATE INDEX "Library_publisher_idx" ON public."Library" USING btree (publisher);');
  await client.query('CREATE INDEX "Library_status_idx" ON public."Library" USING btree (status);');
  await client.query('CREATE INDEX "Library_successor_idx" ON public."Library" USING gin (successor);');
  await client.query('CREATE INDEX "Library_title_idx" ON public."Library" USING btree (title);');
  await client.query('CREATE INDEX "Library_url_idx" ON public."Library" USING btree (url);');
  await client.query('CREATE INDEX "Library_version_idx" ON public."Library" USING btree (version);');
  await client.query('CREATE INDEX "Linkage_History_id_idx" ON public."Linkage_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Linkage_History_lastUpdated_idx" ON public."Linkage_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Linkage_Token_code_idx" ON public."Linkage_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Linkage_Token_resourceId_idx" ON public."Linkage_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Linkage_Token_system_idx" ON public."Linkage_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Linkage_Token_text_idx_tsv" ON public."Linkage_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Linkage_Token_value_idx" ON public."Linkage_Token" USING btree (value);');
  await client.query('CREATE INDEX "Linkage__profile_idx" ON public."Linkage" USING gin (_profile);');
  await client.query('CREATE INDEX "Linkage__security_idx" ON public."Linkage" USING gin (_security);');
  await client.query('CREATE INDEX "Linkage__source_idx" ON public."Linkage" USING btree (_source);');
  await client.query('CREATE INDEX "Linkage__tag_idx" ON public."Linkage" USING gin (_tag);');
  await client.query('CREATE INDEX "Linkage_author_idx" ON public."Linkage" USING btree (author);');
  await client.query('CREATE INDEX "Linkage_compartments_idx" ON public."Linkage" USING gin (compartments);');
  await client.query('CREATE INDEX "Linkage_item_idx" ON public."Linkage" USING gin (item);');
  await client.query('CREATE INDEX "Linkage_lastUpdated_idx" ON public."Linkage" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Linkage_projectId_idx" ON public."Linkage" USING btree ("projectId");');
  await client.query('CREATE INDEX "Linkage_source_idx" ON public."Linkage" USING gin (source);');
  await client.query('CREATE INDEX "List_History_id_idx" ON public."List_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "List_History_lastUpdated_idx" ON public."List_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "List_Token_code_idx" ON public."List_Token" USING btree (code);');
  await client.query('CREATE INDEX "List_Token_resourceId_idx" ON public."List_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "List_Token_system_idx" ON public."List_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "List_Token_text_idx_tsv" ON public."List_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "List_Token_value_idx" ON public."List_Token" USING btree (value);');
  await client.query('CREATE INDEX "List__profile_idx" ON public."List" USING gin (_profile);');
  await client.query('CREATE INDEX "List__security_idx" ON public."List" USING gin (_security);');
  await client.query('CREATE INDEX "List__source_idx" ON public."List" USING btree (_source);');
  await client.query('CREATE INDEX "List__tag_idx" ON public."List" USING gin (_tag);');
  await client.query('CREATE INDEX "List_compartments_idx" ON public."List" USING gin (compartments);');
  await client.query('CREATE INDEX "List_date_idx" ON public."List" USING btree (date);');
  await client.query('CREATE INDEX "List_encounter_idx" ON public."List" USING btree (encounter);');
  await client.query('CREATE INDEX "List_item_idx" ON public."List" USING gin (item);');
  await client.query('CREATE INDEX "List_lastUpdated_idx" ON public."List" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "List_notes_idx" ON public."List" USING gin (notes);');
  await client.query('CREATE INDEX "List_patient_idx" ON public."List" USING btree (patient);');
  await client.query('CREATE INDEX "List_projectId_idx" ON public."List" USING btree ("projectId");');
  await client.query('CREATE INDEX "List_source_idx" ON public."List" USING btree (source);');
  await client.query('CREATE INDEX "List_status_idx" ON public."List" USING btree (status);');
  await client.query('CREATE INDEX "List_subject_idx" ON public."List" USING btree (subject);');
  await client.query('CREATE INDEX "List_title_idx" ON public."List" USING btree (title);');
  await client.query('CREATE INDEX "Location_History_id_idx" ON public."Location_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Location_History_lastUpdated_idx" ON public."Location_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Location_Token_code_idx" ON public."Location_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Location_Token_resourceId_idx" ON public."Location_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Location_Token_system_idx" ON public."Location_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Location_Token_text_idx_tsv" ON public."Location_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Location_Token_value_idx" ON public."Location_Token" USING btree (value);');
  await client.query('CREATE INDEX "Location__profile_idx" ON public."Location" USING gin (_profile);');
  await client.query('CREATE INDEX "Location__security_idx" ON public."Location" USING gin (_security);');
  await client.query('CREATE INDEX "Location__source_idx" ON public."Location" USING btree (_source);');
  await client.query('CREATE INDEX "Location__tag_idx" ON public."Location" USING gin (_tag);');
  await client.query('CREATE INDEX "Location_compartments_idx" ON public."Location" USING gin (compartments);');
  await client.query('CREATE INDEX "Location_endpoint_idx" ON public."Location" USING gin (endpoint);');
  await client.query('CREATE INDEX "Location_lastUpdated_idx" ON public."Location" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Location_name_idx" ON public."Location" USING gin (name);');
  await client.query('CREATE INDEX "Location_near_idx" ON public."Location" USING btree (near);');
  await client.query('CREATE INDEX "Location_organization_idx" ON public."Location" USING btree (organization);');
  await client.query('CREATE INDEX "Location_partof_idx" ON public."Location" USING btree (partof);');
  await client.query('CREATE INDEX "Location_projectId_idx" ON public."Location" USING btree ("projectId");');
  await client.query('CREATE INDEX "Location_status_idx" ON public."Location" USING btree (status);');
  await client.query('CREATE INDEX "Login_History_id_idx" ON public."Login_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Login_History_lastUpdated_idx" ON public."Login_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Login_Token_code_idx" ON public."Login_Token" USING btree (code);');
  await client.query('CREATE INDEX "Login_Token_resourceId_idx" ON public."Login_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Login_Token_system_idx" ON public."Login_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Login_Token_text_idx_tsv" ON public."Login_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Login_Token_value_idx" ON public."Login_Token" USING btree (value);');
  await client.query('CREATE INDEX "Login__profile_idx" ON public."Login" USING gin (_profile);');
  await client.query('CREATE INDEX "Login__security_idx" ON public."Login" USING gin (_security);');
  await client.query('CREATE INDEX "Login__source_idx" ON public."Login" USING btree (_source);');
  await client.query('CREATE INDEX "Login__tag_idx" ON public."Login" USING gin (_tag);');
  await client.query('CREATE INDEX "Login_code_idx" ON public."Login" USING btree (code);');
  await client.query('CREATE INDEX "Login_compartments_idx" ON public."Login" USING gin (compartments);');
  await client.query('CREATE INDEX "Login_cookie_idx" ON public."Login" USING btree (cookie);');
  await client.query('CREATE INDEX "Login_lastUpdated_idx" ON public."Login" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Login_projectId_idx" ON public."Login" USING btree ("projectId");');
  await client.query('CREATE INDEX "Login_user_idx" ON public."Login" USING btree ("user");');
  await client.query('CREATE INDEX "MeasureReport_History_id_idx" ON public."MeasureReport_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "MeasureReport_History_lastUpdated_idx" ON public."MeasureReport_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "MeasureReport_Token_code_idx" ON public."MeasureReport_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "MeasureReport_Token_resourceId_idx" ON public."MeasureReport_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MeasureReport_Token_system_idx" ON public."MeasureReport_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MeasureReport_Token_text_idx_tsv" ON public."MeasureReport_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MeasureReport_Token_value_idx" ON public."MeasureReport_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "MeasureReport__profile_idx" ON public."MeasureReport" USING gin (_profile);');
  await client.query('CREATE INDEX "MeasureReport__security_idx" ON public."MeasureReport" USING gin (_security);');
  await client.query('CREATE INDEX "MeasureReport__source_idx" ON public."MeasureReport" USING btree (_source);');
  await client.query('CREATE INDEX "MeasureReport__tag_idx" ON public."MeasureReport" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MeasureReport_compartments_idx" ON public."MeasureReport" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "MeasureReport_date_idx" ON public."MeasureReport" USING btree (date);');
  await client.query(
    'CREATE INDEX "MeasureReport_evaluatedResource_idx" ON public."MeasureReport" USING gin ("evaluatedResource");'
  );
  await client.query(
    'CREATE INDEX "MeasureReport_lastUpdated_idx" ON public."MeasureReport" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "MeasureReport_measure_idx" ON public."MeasureReport" USING btree (measure);');
  await client.query('CREATE INDEX "MeasureReport_patient_idx" ON public."MeasureReport" USING btree (patient);');
  await client.query('CREATE INDEX "MeasureReport_period_idx" ON public."MeasureReport" USING btree (period);');
  await client.query(
    'CREATE INDEX "MeasureReport_period_range_idx" ON public."MeasureReport" USING gist (period_range);'
  );
  await client.query('CREATE INDEX "MeasureReport_projectId_idx" ON public."MeasureReport" USING btree ("projectId");');
  await client.query('CREATE INDEX "MeasureReport_reporter_idx" ON public."MeasureReport" USING btree (reporter);');
  await client.query('CREATE INDEX "MeasureReport_status_idx" ON public."MeasureReport" USING btree (status);');
  await client.query('CREATE INDEX "MeasureReport_subject_idx" ON public."MeasureReport" USING btree (subject);');
  await client.query('CREATE INDEX "Measure_History_id_idx" ON public."Measure_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Measure_History_lastUpdated_idx" ON public."Measure_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Measure_Token_code_idx" ON public."Measure_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Measure_Token_resourceId_idx" ON public."Measure_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Measure_Token_system_idx" ON public."Measure_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Measure_Token_text_idx_tsv" ON public."Measure_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Measure_Token_value_idx" ON public."Measure_Token" USING btree (value);');
  await client.query('CREATE INDEX "Measure__profile_idx" ON public."Measure" USING gin (_profile);');
  await client.query('CREATE INDEX "Measure__security_idx" ON public."Measure" USING gin (_security);');
  await client.query('CREATE INDEX "Measure__source_idx" ON public."Measure" USING btree (_source);');
  await client.query('CREATE INDEX "Measure__tag_idx" ON public."Measure" USING gin (_tag);');
  await client.query('CREATE INDEX "Measure_compartments_idx" ON public."Measure" USING gin (compartments);');
  await client.query('CREATE INDEX "Measure_composedOf_idx" ON public."Measure" USING gin ("composedOf");');
  await client.query('CREATE INDEX "Measure_contextQuantity_idx" ON public."Measure" USING gin ("contextQuantity");');
  await client.query(
    'CREATE INDEX "Measure_contextTypeQuantity_idx" ON public."Measure" USING gin ("contextTypeQuantity");'
  );
  await client.query('CREATE INDEX "Measure_contextTypeValue_idx" ON public."Measure" USING gin ("contextTypeValue");');
  await client.query('CREATE INDEX "Measure_date_idx" ON public."Measure" USING btree (date);');
  await client.query('CREATE INDEX "Measure_dependsOn_idx" ON public."Measure" USING gin ("dependsOn");');
  await client.query('CREATE INDEX "Measure_derivedFrom_idx" ON public."Measure" USING gin ("derivedFrom");');
  await client.query('CREATE INDEX "Measure_description_idx" ON public."Measure" USING btree (description);');
  await client.query('CREATE INDEX "Measure_effective_idx" ON public."Measure" USING btree (effective);');
  await client.query('CREATE INDEX "Measure_lastUpdated_idx" ON public."Measure" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Measure_name_idx" ON public."Measure" USING btree (name);');
  await client.query('CREATE INDEX "Measure_predecessor_idx" ON public."Measure" USING gin (predecessor);');
  await client.query('CREATE INDEX "Measure_projectId_idx" ON public."Measure" USING btree ("projectId");');
  await client.query('CREATE INDEX "Measure_publisher_idx" ON public."Measure" USING btree (publisher);');
  await client.query('CREATE INDEX "Measure_status_idx" ON public."Measure" USING btree (status);');
  await client.query('CREATE INDEX "Measure_successor_idx" ON public."Measure" USING gin (successor);');
  await client.query('CREATE INDEX "Measure_title_idx" ON public."Measure" USING btree (title);');
  await client.query('CREATE INDEX "Measure_url_idx" ON public."Measure" USING btree (url);');
  await client.query('CREATE INDEX "Measure_version_idx" ON public."Measure" USING btree (version);');
  await client.query('CREATE INDEX "Media_History_id_idx" ON public."Media_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Media_History_lastUpdated_idx" ON public."Media_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Media_Token_code_idx" ON public."Media_Token" USING btree (code);');
  await client.query('CREATE INDEX "Media_Token_resourceId_idx" ON public."Media_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Media_Token_system_idx" ON public."Media_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Media_Token_text_idx_tsv" ON public."Media_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Media_Token_value_idx" ON public."Media_Token" USING btree (value);');
  await client.query('CREATE INDEX "Media__profile_idx" ON public."Media" USING gin (_profile);');
  await client.query('CREATE INDEX "Media__security_idx" ON public."Media" USING gin (_security);');
  await client.query('CREATE INDEX "Media__source_idx" ON public."Media" USING btree (_source);');
  await client.query('CREATE INDEX "Media__tag_idx" ON public."Media" USING gin (_tag);');
  await client.query('CREATE INDEX "Media_basedOn_idx" ON public."Media" USING gin ("basedOn");');
  await client.query('CREATE INDEX "Media_compartments_idx" ON public."Media" USING gin (compartments);');
  await client.query('CREATE INDEX "Media_created_idx" ON public."Media" USING btree (created);');
  await client.query('CREATE INDEX "Media_device_idx" ON public."Media" USING btree (device);');
  await client.query('CREATE INDEX "Media_encounter_idx" ON public."Media" USING btree (encounter);');
  await client.query('CREATE INDEX "Media_lastUpdated_idx" ON public."Media" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Media_operator_idx" ON public."Media" USING btree (operator);');
  await client.query('CREATE INDEX "Media_patient_idx" ON public."Media" USING btree (patient);');
  await client.query('CREATE INDEX "Media_projectId_idx" ON public."Media" USING btree ("projectId");');
  await client.query('CREATE INDEX "Media_status_idx" ON public."Media" USING btree (status);');
  await client.query('CREATE INDEX "Media_subject_idx" ON public."Media" USING btree (subject);');
  await client.query(
    'CREATE INDEX "MedicationAdministration_History_id_idx" ON public."MedicationAdministration_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_History_lastUpdated_idx" ON public."MedicationAdministration_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_Token_code_idx" ON public."MedicationAdministration_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_Token_resourceId_idx" ON public."MedicationAdministration_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_Token_system_idx" ON public."MedicationAdministration_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_Token_text_idx_tsv" ON public."MedicationAdministration_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_Token_value_idx" ON public."MedicationAdministration_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration__profile_idx" ON public."MedicationAdministration" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration__security_idx" ON public."MedicationAdministration" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration__source_idx" ON public."MedicationAdministration" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration__tag_idx" ON public."MedicationAdministration" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_compartments_idx" ON public."MedicationAdministration" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_context_idx" ON public."MedicationAdministration" USING btree (context);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_device_idx" ON public."MedicationAdministration" USING gin (device);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_effectiveTime_idx" ON public."MedicationAdministration" USING btree ("effectiveTime");'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_lastUpdated_idx" ON public."MedicationAdministration" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_medication_idx" ON public."MedicationAdministration" USING btree (medication);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_patient_idx" ON public."MedicationAdministration" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_performer_idx" ON public."MedicationAdministration" USING gin (performer);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_projectId_idx" ON public."MedicationAdministration" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_request_idx" ON public."MedicationAdministration" USING btree (request);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_status_idx" ON public."MedicationAdministration" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "MedicationAdministration_subject_idx" ON public."MedicationAdministration" USING btree (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_History_id_idx" ON public."MedicationDispense_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_History_lastUpdated_idx" ON public."MedicationDispense_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_Token_code_idx" ON public."MedicationDispense_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_Token_resourceId_idx" ON public."MedicationDispense_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_Token_system_idx" ON public."MedicationDispense_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_Token_text_idx_tsv" ON public."MedicationDispense_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_Token_value_idx" ON public."MedicationDispense_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense__profile_idx" ON public."MedicationDispense" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense__security_idx" ON public."MedicationDispense" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense__source_idx" ON public."MedicationDispense" USING btree (_source);'
  );
  await client.query('CREATE INDEX "MedicationDispense__tag_idx" ON public."MedicationDispense" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MedicationDispense_compartments_idx" ON public."MedicationDispense" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_context_idx" ON public."MedicationDispense" USING btree (context);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_destination_idx" ON public."MedicationDispense" USING btree (destination);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_lastUpdated_idx" ON public."MedicationDispense" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_medication_idx" ON public."MedicationDispense" USING btree (medication);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_patient_idx" ON public."MedicationDispense" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_performer_idx" ON public."MedicationDispense" USING gin (performer);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_prescription_idx" ON public."MedicationDispense" USING gin (prescription);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_projectId_idx" ON public."MedicationDispense" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_receiver_idx" ON public."MedicationDispense" USING gin (receiver);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_responsibleparty_idx" ON public."MedicationDispense" USING gin (responsibleparty);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_status_idx" ON public."MedicationDispense" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_subject_idx" ON public."MedicationDispense" USING btree (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_whenhandedover_idx" ON public."MedicationDispense" USING btree (whenhandedover);'
  );
  await client.query(
    'CREATE INDEX "MedicationDispense_whenprepared_idx" ON public."MedicationDispense" USING btree (whenprepared);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_History_id_idx" ON public."MedicationKnowledge_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_History_lastUpdated_idx" ON public."MedicationKnowledge_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_Token_code_idx" ON public."MedicationKnowledge_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_Token_resourceId_idx" ON public."MedicationKnowledge_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_Token_system_idx" ON public."MedicationKnowledge_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_Token_text_idx_tsv" ON public."MedicationKnowledge_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_Token_value_idx" ON public."MedicationKnowledge_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge__profile_idx" ON public."MedicationKnowledge" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge__security_idx" ON public."MedicationKnowledge" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge__source_idx" ON public."MedicationKnowledge" USING btree (_source);'
  );
  await client.query('CREATE INDEX "MedicationKnowledge__tag_idx" ON public."MedicationKnowledge" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MedicationKnowledge_compartments_idx" ON public."MedicationKnowledge" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_ingredient_idx" ON public."MedicationKnowledge" USING gin (ingredient);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_lastUpdated_idx" ON public."MedicationKnowledge" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_manufacturer_idx" ON public."MedicationKnowledge" USING btree (manufacturer);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_monitoringProgramName_idx" ON public."MedicationKnowledge" USING gin ("monitoringProgramName");'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_monograph_idx" ON public."MedicationKnowledge" USING gin (monograph);'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_projectId_idx" ON public."MedicationKnowledge" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_sourceCost_idx" ON public."MedicationKnowledge" USING gin ("sourceCost");'
  );
  await client.query(
    'CREATE INDEX "MedicationKnowledge_status_idx" ON public."MedicationKnowledge" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_History_id_idx" ON public."MedicationRequest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_History_lastUpdated_idx" ON public."MedicationRequest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_Token_code_idx" ON public."MedicationRequest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_Token_resourceId_idx" ON public."MedicationRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_Token_system_idx" ON public."MedicationRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_Token_text_idx_tsv" ON public."MedicationRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_Token_value_idx" ON public."MedicationRequest_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest__profile_idx" ON public."MedicationRequest" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest__security_idx" ON public."MedicationRequest" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest__source_idx" ON public."MedicationRequest" USING btree (_source);'
  );
  await client.query('CREATE INDEX "MedicationRequest__tag_idx" ON public."MedicationRequest" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MedicationRequest_authoredon_idx" ON public."MedicationRequest" USING btree (authoredon);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_compartments_idx" ON public."MedicationRequest" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "MedicationRequest_date_idx" ON public."MedicationRequest" USING gin (date);');
  await client.query(
    'CREATE INDEX "MedicationRequest_encounter_idx" ON public."MedicationRequest" USING btree (encounter);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_intendedDispenser_idx" ON public."MedicationRequest" USING btree ("intendedDispenser");'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_intendedPerformer_idx" ON public."MedicationRequest" USING btree ("intendedPerformer");'
  );
  await client.query('CREATE INDEX "MedicationRequest_intent_idx" ON public."MedicationRequest" USING btree (intent);');
  await client.query(
    'CREATE INDEX "MedicationRequest_lastUpdated_idx" ON public."MedicationRequest" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_medication_idx" ON public."MedicationRequest" USING btree (medication);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_patient_idx" ON public."MedicationRequest" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_priority_idx" ON public."MedicationRequest" USING btree (priority);'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_projectId_idx" ON public."MedicationRequest" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicationRequest_requester_idx" ON public."MedicationRequest" USING btree (requester);'
  );
  await client.query('CREATE INDEX "MedicationRequest_status_idx" ON public."MedicationRequest" USING btree (status);');
  await client.query(
    'CREATE INDEX "MedicationRequest_subject_idx" ON public."MedicationRequest" USING btree (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_History_id_idx" ON public."MedicationStatement_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_History_lastUpdated_idx" ON public."MedicationStatement_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_Token_code_idx" ON public."MedicationStatement_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_Token_resourceId_idx" ON public."MedicationStatement_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_Token_system_idx" ON public."MedicationStatement_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_Token_text_idx_tsv" ON public."MedicationStatement_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_Token_value_idx" ON public."MedicationStatement_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement__profile_idx" ON public."MedicationStatement" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement__security_idx" ON public."MedicationStatement" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement__source_idx" ON public."MedicationStatement" USING btree (_source);'
  );
  await client.query('CREATE INDEX "MedicationStatement__tag_idx" ON public."MedicationStatement" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MedicationStatement_compartments_idx" ON public."MedicationStatement" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_context_idx" ON public."MedicationStatement" USING btree (context);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_effective_idx" ON public."MedicationStatement" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_lastUpdated_idx" ON public."MedicationStatement" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_medication_idx" ON public."MedicationStatement" USING btree (medication);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_partOf_idx" ON public."MedicationStatement" USING gin ("partOf");'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_patient_idx" ON public."MedicationStatement" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_projectId_idx" ON public."MedicationStatement" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_source_idx" ON public."MedicationStatement" USING btree (source);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_status_idx" ON public."MedicationStatement" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "MedicationStatement_subject_idx" ON public."MedicationStatement" USING btree (subject);'
  );
  await client.query('CREATE INDEX "Medication_History_id_idx" ON public."Medication_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Medication_History_lastUpdated_idx" ON public."Medication_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Medication_Token_code_idx" ON public."Medication_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Medication_Token_resourceId_idx" ON public."Medication_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Medication_Token_system_idx" ON public."Medication_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Medication_Token_text_idx_tsv" ON public."Medication_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Medication_Token_value_idx" ON public."Medication_Token" USING btree (value);');
  await client.query('CREATE INDEX "Medication__profile_idx" ON public."Medication" USING gin (_profile);');
  await client.query('CREATE INDEX "Medication__security_idx" ON public."Medication" USING gin (_security);');
  await client.query('CREATE INDEX "Medication__source_idx" ON public."Medication" USING btree (_source);');
  await client.query('CREATE INDEX "Medication__tag_idx" ON public."Medication" USING gin (_tag);');
  await client.query('CREATE INDEX "Medication_compartments_idx" ON public."Medication" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "Medication_expirationDate_idx" ON public."Medication" USING btree ("expirationDate");'
  );
  await client.query('CREATE INDEX "Medication_ingredient_idx" ON public."Medication" USING gin (ingredient);');
  await client.query('CREATE INDEX "Medication_lastUpdated_idx" ON public."Medication" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Medication_lotNumber_idx" ON public."Medication" USING btree ("lotNumber");');
  await client.query('CREATE INDEX "Medication_manufacturer_idx" ON public."Medication" USING btree (manufacturer);');
  await client.query('CREATE INDEX "Medication_projectId_idx" ON public."Medication" USING btree ("projectId");');
  await client.query('CREATE INDEX "Medication_status_idx" ON public."Medication" USING btree (status);');
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_History_id_idx" ON public."MedicinalProductAuthorization_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_History_lastUpdated_idx" ON public."MedicinalProductAuthorization_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_Token_code_idx" ON public."MedicinalProductAuthorization_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_Token_resourceId_idx" ON public."MedicinalProductAuthorization_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_Token_system_idx" ON public."MedicinalProductAuthorization_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_Token_text_idx_tsv" ON public."MedicinalProductAuthorization_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_Token_value_idx" ON public."MedicinalProductAuthorization_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization__profile_idx" ON public."MedicinalProductAuthorization" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization__security_idx" ON public."MedicinalProductAuthorization" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization__source_idx" ON public."MedicinalProductAuthorization" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization__tag_idx" ON public."MedicinalProductAuthorization" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_compartments_idx" ON public."MedicinalProductAuthorization" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_holder_idx" ON public."MedicinalProductAuthorization" USING btree (holder);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_lastUpdated_idx" ON public."MedicinalProductAuthorization" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_projectId_idx" ON public."MedicinalProductAuthorization" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductAuthorization_subject_idx" ON public."MedicinalProductAuthorization" USING btree (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_History_id_idx" ON public."MedicinalProductContraindication_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_History_lastUpdated_idx" ON public."MedicinalProductContraindication_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_Token_code_idx" ON public."MedicinalProductContraindication_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_Token_resourceId_idx" ON public."MedicinalProductContraindication_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_Token_system_idx" ON public."MedicinalProductContraindication_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_Token_text_idx_tsv" ON public."MedicinalProductContraindication_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_Token_value_idx" ON public."MedicinalProductContraindication_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication__profile_idx" ON public."MedicinalProductContraindication" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication__security_idx" ON public."MedicinalProductContraindication" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication__source_idx" ON public."MedicinalProductContraindication" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication__tag_idx" ON public."MedicinalProductContraindication" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_compartments_idx" ON public."MedicinalProductContraindication" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_lastUpdated_idx" ON public."MedicinalProductContraindication" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_projectId_idx" ON public."MedicinalProductContraindication" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductContraindication_subject_idx" ON public."MedicinalProductContraindication" USING gin (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_History_id_idx" ON public."MedicinalProductIndication_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_History_lastUpdated_idx" ON public."MedicinalProductIndication_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_Token_code_idx" ON public."MedicinalProductIndication_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_Token_resourceId_idx" ON public."MedicinalProductIndication_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_Token_system_idx" ON public."MedicinalProductIndication_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_Token_text_idx_tsv" ON public."MedicinalProductIndication_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_Token_value_idx" ON public."MedicinalProductIndication_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication__profile_idx" ON public."MedicinalProductIndication" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication__security_idx" ON public."MedicinalProductIndication" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication__source_idx" ON public."MedicinalProductIndication" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication__tag_idx" ON public."MedicinalProductIndication" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_compartments_idx" ON public."MedicinalProductIndication" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_lastUpdated_idx" ON public."MedicinalProductIndication" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_projectId_idx" ON public."MedicinalProductIndication" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIndication_subject_idx" ON public."MedicinalProductIndication" USING gin (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_History_id_idx" ON public."MedicinalProductIngredient_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_History_lastUpdated_idx" ON public."MedicinalProductIngredient_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_Token_code_idx" ON public."MedicinalProductIngredient_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_Token_resourceId_idx" ON public."MedicinalProductIngredient_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_Token_system_idx" ON public."MedicinalProductIngredient_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_Token_text_idx_tsv" ON public."MedicinalProductIngredient_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_Token_value_idx" ON public."MedicinalProductIngredient_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient__profile_idx" ON public."MedicinalProductIngredient" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient__security_idx" ON public."MedicinalProductIngredient" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient__source_idx" ON public."MedicinalProductIngredient" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient__tag_idx" ON public."MedicinalProductIngredient" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_compartments_idx" ON public."MedicinalProductIngredient" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_lastUpdated_idx" ON public."MedicinalProductIngredient" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductIngredient_projectId_idx" ON public."MedicinalProductIngredient" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_History_id_idx" ON public."MedicinalProductInteraction_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_History_lastUpdated_idx" ON public."MedicinalProductInteraction_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_Token_code_idx" ON public."MedicinalProductInteraction_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_Token_resourceId_idx" ON public."MedicinalProductInteraction_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_Token_system_idx" ON public."MedicinalProductInteraction_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_Token_text_idx_tsv" ON public."MedicinalProductInteraction_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_Token_value_idx" ON public."MedicinalProductInteraction_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction__profile_idx" ON public."MedicinalProductInteraction" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction__security_idx" ON public."MedicinalProductInteraction" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction__source_idx" ON public."MedicinalProductInteraction" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction__tag_idx" ON public."MedicinalProductInteraction" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_compartments_idx" ON public."MedicinalProductInteraction" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_lastUpdated_idx" ON public."MedicinalProductInteraction" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_projectId_idx" ON public."MedicinalProductInteraction" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductInteraction_subject_idx" ON public."MedicinalProductInteraction" USING gin (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_History_id_idx" ON public."MedicinalProductManufactured_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_History_lastUpdated_idx" ON public."MedicinalProductManufactured_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_Token_code_idx" ON public."MedicinalProductManufactured_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_Token_resourceId_idx" ON public."MedicinalProductManufactured_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_Token_system_idx" ON public."MedicinalProductManufactured_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_Token_text_idx_tsv" ON public."MedicinalProductManufactured_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_Token_value_idx" ON public."MedicinalProductManufactured_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured__profile_idx" ON public."MedicinalProductManufactured" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured__security_idx" ON public."MedicinalProductManufactured" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured__source_idx" ON public."MedicinalProductManufactured" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured__tag_idx" ON public."MedicinalProductManufactured" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_compartments_idx" ON public."MedicinalProductManufactured" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_lastUpdated_idx" ON public."MedicinalProductManufactured" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductManufactured_projectId_idx" ON public."MedicinalProductManufactured" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_History_id_idx" ON public."MedicinalProductPackaged_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_History_lastUpdated_idx" ON public."MedicinalProductPackaged_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_Token_code_idx" ON public."MedicinalProductPackaged_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_Token_resourceId_idx" ON public."MedicinalProductPackaged_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_Token_system_idx" ON public."MedicinalProductPackaged_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_Token_text_idx_tsv" ON public."MedicinalProductPackaged_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_Token_value_idx" ON public."MedicinalProductPackaged_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged__profile_idx" ON public."MedicinalProductPackaged" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged__security_idx" ON public."MedicinalProductPackaged" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged__source_idx" ON public."MedicinalProductPackaged" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged__tag_idx" ON public."MedicinalProductPackaged" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_compartments_idx" ON public."MedicinalProductPackaged" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_lastUpdated_idx" ON public."MedicinalProductPackaged" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_projectId_idx" ON public."MedicinalProductPackaged" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPackaged_subject_idx" ON public."MedicinalProductPackaged" USING gin (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_History_id_idx" ON public."MedicinalProductPharmaceutical_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_History_lastUpdated_idx" ON public."MedicinalProductPharmaceutical_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_Token_code_idx" ON public."MedicinalProductPharmaceutical_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_Token_resourceId_idx" ON public."MedicinalProductPharmaceutical_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_Token_system_idx" ON public."MedicinalProductPharmaceutical_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_Token_text_idx_tsv" ON public."MedicinalProductPharmaceutical_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_Token_value_idx" ON public."MedicinalProductPharmaceutical_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical__profile_idx" ON public."MedicinalProductPharmaceutical" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical__security_idx" ON public."MedicinalProductPharmaceutical" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical__source_idx" ON public."MedicinalProductPharmaceutical" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical__tag_idx" ON public."MedicinalProductPharmaceutical" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_compartments_idx" ON public."MedicinalProductPharmaceutical" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_lastUpdated_idx" ON public."MedicinalProductPharmaceutical" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductPharmaceutical_projectId_idx" ON public."MedicinalProductPharmaceutical" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_History_id_idx" ON public."MedicinalProductUndesirableEffect_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_History_lastUpdated_idx" ON public."MedicinalProductUndesirableEffect_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_Token_code_idx" ON public."MedicinalProductUndesirableEffect_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_Token_resourceId_idx" ON public."MedicinalProductUndesirableEffect_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_Token_system_idx" ON public."MedicinalProductUndesirableEffect_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_Token_text_idx_tsv" ON public."MedicinalProductUndesirableEffect_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_Token_value_idx" ON public."MedicinalProductUndesirableEffect_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect__profile_idx" ON public."MedicinalProductUndesirableEffect" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect__security_idx" ON public."MedicinalProductUndesirableEffect" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect__source_idx" ON public."MedicinalProductUndesirableEffect" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect__tag_idx" ON public."MedicinalProductUndesirableEffect" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_compartments_idx" ON public."MedicinalProductUndesirableEffect" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_lastUpdated_idx" ON public."MedicinalProductUndesirableEffect" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_projectId_idx" ON public."MedicinalProductUndesirableEffect" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProductUndesirableEffect_subject_idx" ON public."MedicinalProductUndesirableEffect" USING gin (subject);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_History_id_idx" ON public."MedicinalProduct_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_History_lastUpdated_idx" ON public."MedicinalProduct_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_Token_code_idx" ON public."MedicinalProduct_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_Token_resourceId_idx" ON public."MedicinalProduct_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_Token_system_idx" ON public."MedicinalProduct_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_Token_text_idx_tsv" ON public."MedicinalProduct_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_Token_value_idx" ON public."MedicinalProduct_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "MedicinalProduct__profile_idx" ON public."MedicinalProduct" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "MedicinalProduct__security_idx" ON public."MedicinalProduct" USING gin (_security);'
  );
  await client.query('CREATE INDEX "MedicinalProduct__source_idx" ON public."MedicinalProduct" USING btree (_source);');
  await client.query('CREATE INDEX "MedicinalProduct__tag_idx" ON public."MedicinalProduct" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MedicinalProduct_compartments_idx" ON public."MedicinalProduct" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MedicinalProduct_lastUpdated_idx" ON public."MedicinalProduct" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "MedicinalProduct_name_idx" ON public."MedicinalProduct" USING gin (name);');
  await client.query(
    'CREATE INDEX "MedicinalProduct_projectId_idx" ON public."MedicinalProduct" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_History_id_idx" ON public."MessageDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_History_lastUpdated_idx" ON public."MessageDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_Token_code_idx" ON public."MessageDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_Token_resourceId_idx" ON public."MessageDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_Token_system_idx" ON public."MessageDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_Token_text_idx_tsv" ON public."MessageDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_Token_value_idx" ON public."MessageDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition__profile_idx" ON public."MessageDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition__security_idx" ON public."MessageDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition__source_idx" ON public."MessageDefinition" USING btree (_source);'
  );
  await client.query('CREATE INDEX "MessageDefinition__tag_idx" ON public."MessageDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MessageDefinition_category_idx" ON public."MessageDefinition" USING btree (category);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_compartments_idx" ON public."MessageDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_contextQuantity_idx" ON public."MessageDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_contextTypeQuantity_idx" ON public."MessageDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_contextTypeValue_idx" ON public."MessageDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "MessageDefinition_date_idx" ON public."MessageDefinition" USING btree (date);');
  await client.query(
    'CREATE INDEX "MessageDefinition_description_idx" ON public."MessageDefinition" USING btree (description);'
  );
  await client.query('CREATE INDEX "MessageDefinition_focus_idx" ON public."MessageDefinition" USING gin (focus);');
  await client.query(
    'CREATE INDEX "MessageDefinition_lastUpdated_idx" ON public."MessageDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "MessageDefinition_name_idx" ON public."MessageDefinition" USING btree (name);');
  await client.query('CREATE INDEX "MessageDefinition_parent_idx" ON public."MessageDefinition" USING gin (parent);');
  await client.query(
    'CREATE INDEX "MessageDefinition_projectId_idx" ON public."MessageDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MessageDefinition_publisher_idx" ON public."MessageDefinition" USING btree (publisher);'
  );
  await client.query('CREATE INDEX "MessageDefinition_status_idx" ON public."MessageDefinition" USING btree (status);');
  await client.query('CREATE INDEX "MessageDefinition_title_idx" ON public."MessageDefinition" USING btree (title);');
  await client.query('CREATE INDEX "MessageDefinition_url_idx" ON public."MessageDefinition" USING btree (url);');
  await client.query(
    'CREATE INDEX "MessageDefinition_version_idx" ON public."MessageDefinition" USING btree (version);'
  );
  await client.query('CREATE INDEX "MessageHeader_History_id_idx" ON public."MessageHeader_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "MessageHeader_History_lastUpdated_idx" ON public."MessageHeader_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "MessageHeader_Token_code_idx" ON public."MessageHeader_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "MessageHeader_Token_resourceId_idx" ON public."MessageHeader_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MessageHeader_Token_system_idx" ON public."MessageHeader_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MessageHeader_Token_text_idx_tsv" ON public."MessageHeader_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MessageHeader_Token_value_idx" ON public."MessageHeader_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "MessageHeader__profile_idx" ON public."MessageHeader" USING gin (_profile);');
  await client.query('CREATE INDEX "MessageHeader__security_idx" ON public."MessageHeader" USING gin (_security);');
  await client.query('CREATE INDEX "MessageHeader__source_idx" ON public."MessageHeader" USING btree (_source);');
  await client.query('CREATE INDEX "MessageHeader__tag_idx" ON public."MessageHeader" USING gin (_tag);');
  await client.query('CREATE INDEX "MessageHeader_author_idx" ON public."MessageHeader" USING btree (author);');
  await client.query('CREATE INDEX "MessageHeader_code_idx" ON public."MessageHeader" USING btree (code);');
  await client.query(
    'CREATE INDEX "MessageHeader_compartments_idx" ON public."MessageHeader" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MessageHeader_destinationUri_idx" ON public."MessageHeader" USING gin ("destinationUri");'
  );
  await client.query('CREATE INDEX "MessageHeader_destination_idx" ON public."MessageHeader" USING gin (destination);');
  await client.query('CREATE INDEX "MessageHeader_enterer_idx" ON public."MessageHeader" USING btree (enterer);');
  await client.query('CREATE INDEX "MessageHeader_focus_idx" ON public."MessageHeader" USING gin (focus);');
  await client.query(
    'CREATE INDEX "MessageHeader_lastUpdated_idx" ON public."MessageHeader" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "MessageHeader_projectId_idx" ON public."MessageHeader" USING btree ("projectId");');
  await client.query('CREATE INDEX "MessageHeader_receiver_idx" ON public."MessageHeader" USING gin (receiver);');
  await client.query(
    'CREATE INDEX "MessageHeader_responseId_idx" ON public."MessageHeader" USING btree ("responseId");'
  );
  await client.query(
    'CREATE INDEX "MessageHeader_responsible_idx" ON public."MessageHeader" USING btree (responsible);'
  );
  await client.query('CREATE INDEX "MessageHeader_sender_idx" ON public."MessageHeader" USING btree (sender);');
  await client.query('CREATE INDEX "MessageHeader_sourceUri_idx" ON public."MessageHeader" USING btree ("sourceUri");');
  await client.query('CREATE INDEX "MessageHeader_source_idx" ON public."MessageHeader" USING btree (source);');
  await client.query('CREATE INDEX "MessageHeader_target_idx" ON public."MessageHeader" USING gin (target);');
  await client.query(
    'CREATE INDEX "MolecularSequence_History_id_idx" ON public."MolecularSequence_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_History_lastUpdated_idx" ON public."MolecularSequence_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_Token_code_idx" ON public."MolecularSequence_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_Token_resourceId_idx" ON public."MolecularSequence_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_Token_system_idx" ON public."MolecularSequence_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_Token_text_idx_tsv" ON public."MolecularSequence_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_Token_value_idx" ON public."MolecularSequence_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence__profile_idx" ON public."MolecularSequence" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence__security_idx" ON public."MolecularSequence" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence__source_idx" ON public."MolecularSequence" USING btree (_source);'
  );
  await client.query('CREATE INDEX "MolecularSequence__tag_idx" ON public."MolecularSequence" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "MolecularSequence_chromosomeVariantCoordinate_idx" ON public."MolecularSequence" USING gin ("chromosomeVariantCoordinate");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_chromosomeWindowCoordinate_idx" ON public."MolecularSequence" USING btree ("chromosomeWindowCoordinate");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_compartments_idx" ON public."MolecularSequence" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_lastUpdated_idx" ON public."MolecularSequence" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_patient_idx" ON public."MolecularSequence" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_projectId_idx" ON public."MolecularSequence" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_referenceseqidVariantCoordinate_idx" ON public."MolecularSequence" USING gin ("referenceseqidVariantCoordinate");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_referenceseqidWindowCoordinate_idx" ON public."MolecularSequence" USING btree ("referenceseqidWindowCoordinate");'
  );
  await client.query('CREATE INDEX "MolecularSequence_type_idx" ON public."MolecularSequence" USING btree (type);');
  await client.query(
    'CREATE INDEX "MolecularSequence_variantEnd_idx" ON public."MolecularSequence" USING gin ("variantEnd");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_variantStart_idx" ON public."MolecularSequence" USING gin ("variantStart");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_windowEnd_idx" ON public."MolecularSequence" USING btree ("windowEnd");'
  );
  await client.query(
    'CREATE INDEX "MolecularSequence_windowStart_idx" ON public."MolecularSequence" USING btree ("windowStart");'
  );
  await client.query('CREATE INDEX "NamingSystem_History_id_idx" ON public."NamingSystem_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "NamingSystem_History_lastUpdated_idx" ON public."NamingSystem_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "NamingSystem_Token_code_idx" ON public."NamingSystem_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "NamingSystem_Token_resourceId_idx" ON public."NamingSystem_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "NamingSystem_Token_system_idx" ON public."NamingSystem_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "NamingSystem_Token_text_idx_tsv" ON public."NamingSystem_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "NamingSystem_Token_value_idx" ON public."NamingSystem_Token" USING btree (value);');
  await client.query('CREATE INDEX "NamingSystem__profile_idx" ON public."NamingSystem" USING gin (_profile);');
  await client.query('CREATE INDEX "NamingSystem__security_idx" ON public."NamingSystem" USING gin (_security);');
  await client.query('CREATE INDEX "NamingSystem__source_idx" ON public."NamingSystem" USING btree (_source);');
  await client.query('CREATE INDEX "NamingSystem__tag_idx" ON public."NamingSystem" USING gin (_tag);');
  await client.query('CREATE INDEX "NamingSystem_compartments_idx" ON public."NamingSystem" USING gin (compartments);');
  await client.query('CREATE INDEX "NamingSystem_contact_idx" ON public."NamingSystem" USING gin (contact);');
  await client.query(
    'CREATE INDEX "NamingSystem_contextQuantity_idx" ON public."NamingSystem" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "NamingSystem_contextTypeQuantity_idx" ON public."NamingSystem" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "NamingSystem_contextTypeValue_idx" ON public."NamingSystem" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "NamingSystem_date_idx" ON public."NamingSystem" USING btree (date);');
  await client.query('CREATE INDEX "NamingSystem_description_idx" ON public."NamingSystem" USING btree (description);');
  await client.query('CREATE INDEX "NamingSystem_idType_idx" ON public."NamingSystem" USING gin ("idType");');
  await client.query('CREATE INDEX "NamingSystem_kind_idx" ON public."NamingSystem" USING btree (kind);');
  await client.query(
    'CREATE INDEX "NamingSystem_lastUpdated_idx" ON public."NamingSystem" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "NamingSystem_name_idx" ON public."NamingSystem" USING btree (name);');
  await client.query('CREATE INDEX "NamingSystem_period_idx" ON public."NamingSystem" USING gin (period);');
  await client.query('CREATE INDEX "NamingSystem_projectId_idx" ON public."NamingSystem" USING btree ("projectId");');
  await client.query('CREATE INDEX "NamingSystem_publisher_idx" ON public."NamingSystem" USING btree (publisher);');
  await client.query('CREATE INDEX "NamingSystem_responsible_idx" ON public."NamingSystem" USING btree (responsible);');
  await client.query('CREATE INDEX "NamingSystem_status_idx" ON public."NamingSystem" USING btree (status);');
  await client.query('CREATE INDEX "NamingSystem_value_idx" ON public."NamingSystem" USING gin (value);');
  await client.query(
    'CREATE INDEX "NutritionOrder_History_id_idx" ON public."NutritionOrder_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_History_lastUpdated_idx" ON public."NutritionOrder_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_Token_code_idx" ON public."NutritionOrder_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_Token_resourceId_idx" ON public."NutritionOrder_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_Token_system_idx" ON public."NutritionOrder_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_Token_text_idx_tsv" ON public."NutritionOrder_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_Token_value_idx" ON public."NutritionOrder_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "NutritionOrder__profile_idx" ON public."NutritionOrder" USING gin (_profile);');
  await client.query('CREATE INDEX "NutritionOrder__security_idx" ON public."NutritionOrder" USING gin (_security);');
  await client.query('CREATE INDEX "NutritionOrder__source_idx" ON public."NutritionOrder" USING btree (_source);');
  await client.query('CREATE INDEX "NutritionOrder__tag_idx" ON public."NutritionOrder" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "NutritionOrder_compartments_idx" ON public."NutritionOrder" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "NutritionOrder_datetime_idx" ON public."NutritionOrder" USING btree (datetime);');
  await client.query('CREATE INDEX "NutritionOrder_encounter_idx" ON public."NutritionOrder" USING btree (encounter);');
  await client.query(
    'CREATE INDEX "NutritionOrder_instantiatesCanonical_idx" ON public."NutritionOrder" USING gin ("instantiatesCanonical");'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_instantiatesUri_idx" ON public."NutritionOrder" USING gin ("instantiatesUri");'
  );
  await client.query(
    'CREATE INDEX "NutritionOrder_lastUpdated_idx" ON public."NutritionOrder" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "NutritionOrder_patient_idx" ON public."NutritionOrder" USING btree (patient);');
  await client.query(
    'CREATE INDEX "NutritionOrder_projectId_idx" ON public."NutritionOrder" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "NutritionOrder_provider_idx" ON public."NutritionOrder" USING btree (provider);');
  await client.query('CREATE INDEX "NutritionOrder_status_idx" ON public."NutritionOrder" USING btree (status);');
  await client.query(
    'CREATE INDEX "ObservationDefinition_History_id_idx" ON public."ObservationDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_History_lastUpdated_idx" ON public."ObservationDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_Token_code_idx" ON public."ObservationDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_Token_resourceId_idx" ON public."ObservationDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_Token_system_idx" ON public."ObservationDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_Token_text_idx_tsv" ON public."ObservationDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_Token_value_idx" ON public."ObservationDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition__profile_idx" ON public."ObservationDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition__security_idx" ON public."ObservationDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition__source_idx" ON public."ObservationDefinition" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition__tag_idx" ON public."ObservationDefinition" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_compartments_idx" ON public."ObservationDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_lastUpdated_idx" ON public."ObservationDefinition" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_projectId_idx" ON public."ObservationDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ObservationDefinition_publisher_idx" ON public."ObservationDefinition" USING btree (publisher);'
  );
  await client.query('CREATE INDEX "Observation_History_id_idx" ON public."Observation_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Observation_History_lastUpdated_idx" ON public."Observation_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Observation_Token_code_idx" ON public."Observation_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Observation_Token_resourceId_idx" ON public."Observation_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Observation_Token_system_idx" ON public."Observation_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Observation_Token_text_idx_tsv" ON public."Observation_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Observation_Token_value_idx" ON public."Observation_Token" USING btree (value);');
  await client.query('CREATE INDEX "Observation__profile_idx" ON public."Observation" USING gin (_profile);');
  await client.query('CREATE INDEX "Observation__security_idx" ON public."Observation" USING gin (_security);');
  await client.query('CREATE INDEX "Observation__source_idx" ON public."Observation" USING btree (_source);');
  await client.query('CREATE INDEX "Observation__tag_idx" ON public."Observation" USING gin (_tag);');
  await client.query('CREATE INDEX "Observation_basedOn_idx" ON public."Observation" USING gin ("basedOn");');
  await client.query(
    'CREATE INDEX "Observation_codeValueConcept_idx" ON public."Observation" USING btree ("codeValueConcept");'
  );
  await client.query(
    'CREATE INDEX "Observation_codeValueDate_idx" ON public."Observation" USING btree ("codeValueDate");'
  );
  await client.query(
    'CREATE INDEX "Observation_codeValueQuantity_idx" ON public."Observation" USING btree ("codeValueQuantity");'
  );
  await client.query(
    'CREATE INDEX "Observation_codeValueString_idx" ON public."Observation" USING btree ("codeValueString");'
  );
  await client.query(
    'CREATE INDEX "Observation_comboCodeValueConcept_idx" ON public."Observation" USING gin ("comboCodeValueConcept");'
  );
  await client.query(
    'CREATE INDEX "Observation_comboCodeValueQuantity_idx" ON public."Observation" USING gin ("comboCodeValueQuantity");'
  );
  await client.query('CREATE INDEX "Observation_comboCode_idx" ON public."Observation" USING gin ("comboCode");');
  await client.query(
    'CREATE INDEX "Observation_comboDataAbsentReason_idx" ON public."Observation" USING gin ("comboDataAbsentReason");'
  );
  await client.query(
    'CREATE INDEX "Observation_comboValueConcept_idx" ON public."Observation" USING gin ("comboValueConcept");'
  );
  await client.query(
    'CREATE INDEX "Observation_comboValueQuantity_idx" ON public."Observation" USING gin ("comboValueQuantity");'
  );
  await client.query('CREATE INDEX "Observation_compartments_idx" ON public."Observation" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "Observation_componentCodeValueConcept_idx" ON public."Observation" USING gin ("componentCodeValueConcept");'
  );
  await client.query(
    'CREATE INDEX "Observation_componentCodeValueQuantity_idx" ON public."Observation" USING gin ("componentCodeValueQuantity");'
  );
  await client.query(
    'CREATE INDEX "Observation_componentValueQuantity_idx" ON public."Observation" USING gin ("componentValueQuantity");'
  );
  await client.query('CREATE INDEX "Observation_date_idx" ON public."Observation" USING btree (date);');
  await client.query('CREATE INDEX "Observation_derivedFrom_idx" ON public."Observation" USING gin ("derivedFrom");');
  await client.query('CREATE INDEX "Observation_device_idx" ON public."Observation" USING btree (device);');
  await client.query('CREATE INDEX "Observation_encounter_idx" ON public."Observation" USING btree (encounter);');
  await client.query('CREATE INDEX "Observation_focus_idx" ON public."Observation" USING gin (focus);');
  await client.query('CREATE INDEX "Observation_hasMember_idx" ON public."Observation" USING gin ("hasMember");');
  await client.query('CREATE INDEX "Observation_lastUpdated_idx" ON public."Observation" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Observation_partOf_idx" ON public."Observation" USING gin ("partOf");');
  await client.query('CREATE INDEX "Observation_patient_idx" ON public."Observation" USING btree (patient);');
  await client.query('CREATE INDEX "Observation_performer_idx" ON public."Observation" USING gin (performer);');
  await client.query('CREATE INDEX "Observation_projectId_idx" ON public."Observation" USING btree ("projectId");');
  await client.query('CREATE INDEX "Observation_specimen_idx" ON public."Observation" USING btree (specimen);');
  await client.query('CREATE INDEX "Observation_status_idx" ON public."Observation" USING btree (status);');
  await client.query('CREATE INDEX "Observation_subject_idx" ON public."Observation" USING btree (subject);');
  await client.query('CREATE INDEX "Observation_valueDate_idx" ON public."Observation" USING btree ("valueDate");');
  await client.query(
    'CREATE INDEX "Observation_valueQuantity_idx" ON public."Observation" USING btree ("valueQuantity");'
  );
  await client.query('CREATE INDEX "Observation_valueString_idx" ON public."Observation" USING btree ("valueString");');
  await client.query(
    'CREATE INDEX "OperationDefinition_History_id_idx" ON public."OperationDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_History_lastUpdated_idx" ON public."OperationDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_Token_code_idx" ON public."OperationDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_Token_resourceId_idx" ON public."OperationDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_Token_system_idx" ON public."OperationDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_Token_text_idx_tsv" ON public."OperationDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_Token_value_idx" ON public."OperationDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition__profile_idx" ON public."OperationDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition__security_idx" ON public."OperationDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition__source_idx" ON public."OperationDefinition" USING btree (_source);'
  );
  await client.query('CREATE INDEX "OperationDefinition__tag_idx" ON public."OperationDefinition" USING gin (_tag);');
  await client.query('CREATE INDEX "OperationDefinition_base_idx" ON public."OperationDefinition" USING btree (base);');
  await client.query('CREATE INDEX "OperationDefinition_code_idx" ON public."OperationDefinition" USING btree (code);');
  await client.query(
    'CREATE INDEX "OperationDefinition_compartments_idx" ON public."OperationDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_contextQuantity_idx" ON public."OperationDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_contextTypeQuantity_idx" ON public."OperationDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_contextTypeValue_idx" ON public."OperationDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "OperationDefinition_date_idx" ON public."OperationDefinition" USING btree (date);');
  await client.query(
    'CREATE INDEX "OperationDefinition_description_idx" ON public."OperationDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_inputProfile_idx" ON public."OperationDefinition" USING btree ("inputProfile");'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_instance_idx" ON public."OperationDefinition" USING btree (instance);'
  );
  await client.query('CREATE INDEX "OperationDefinition_kind_idx" ON public."OperationDefinition" USING btree (kind);');
  await client.query(
    'CREATE INDEX "OperationDefinition_lastUpdated_idx" ON public."OperationDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "OperationDefinition_name_idx" ON public."OperationDefinition" USING btree (name);');
  await client.query(
    'CREATE INDEX "OperationDefinition_outputProfile_idx" ON public."OperationDefinition" USING btree ("outputProfile");'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_projectId_idx" ON public."OperationDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_publisher_idx" ON public."OperationDefinition" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_status_idx" ON public."OperationDefinition" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_system_idx" ON public."OperationDefinition" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "OperationDefinition_title_idx" ON public."OperationDefinition" USING btree (title);'
  );
  await client.query('CREATE INDEX "OperationDefinition_type_idx" ON public."OperationDefinition" USING btree (type);');
  await client.query('CREATE INDEX "OperationDefinition_url_idx" ON public."OperationDefinition" USING btree (url);');
  await client.query(
    'CREATE INDEX "OperationDefinition_version_idx" ON public."OperationDefinition" USING btree (version);'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_History_id_idx" ON public."OperationOutcome_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_History_lastUpdated_idx" ON public."OperationOutcome_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_Token_code_idx" ON public."OperationOutcome_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_Token_resourceId_idx" ON public."OperationOutcome_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_Token_system_idx" ON public."OperationOutcome_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_Token_text_idx_tsv" ON public."OperationOutcome_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_Token_value_idx" ON public."OperationOutcome_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "OperationOutcome__profile_idx" ON public."OperationOutcome" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "OperationOutcome__security_idx" ON public."OperationOutcome" USING gin (_security);'
  );
  await client.query('CREATE INDEX "OperationOutcome__source_idx" ON public."OperationOutcome" USING btree (_source);');
  await client.query('CREATE INDEX "OperationOutcome__tag_idx" ON public."OperationOutcome" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "OperationOutcome_compartments_idx" ON public."OperationOutcome" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_lastUpdated_idx" ON public."OperationOutcome" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "OperationOutcome_projectId_idx" ON public."OperationOutcome" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_History_id_idx" ON public."OrganizationAffiliation_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_History_lastUpdated_idx" ON public."OrganizationAffiliation_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_Token_code_idx" ON public."OrganizationAffiliation_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_Token_resourceId_idx" ON public."OrganizationAffiliation_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_Token_system_idx" ON public."OrganizationAffiliation_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_Token_text_idx_tsv" ON public."OrganizationAffiliation_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_Token_value_idx" ON public."OrganizationAffiliation_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation__profile_idx" ON public."OrganizationAffiliation" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation__security_idx" ON public."OrganizationAffiliation" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation__source_idx" ON public."OrganizationAffiliation" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation__tag_idx" ON public."OrganizationAffiliation" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_active_idx" ON public."OrganizationAffiliation" USING btree (active);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_compartments_idx" ON public."OrganizationAffiliation" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_date_idx" ON public."OrganizationAffiliation" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_endpoint_idx" ON public."OrganizationAffiliation" USING gin (endpoint);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_lastUpdated_idx" ON public."OrganizationAffiliation" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_location_idx" ON public."OrganizationAffiliation" USING gin (location);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_network_idx" ON public."OrganizationAffiliation" USING gin (network);'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_participatingOrganization_idx" ON public."OrganizationAffiliation" USING btree ("participatingOrganization");'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_primaryOrganization_idx" ON public."OrganizationAffiliation" USING btree ("primaryOrganization");'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_projectId_idx" ON public."OrganizationAffiliation" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "OrganizationAffiliation_service_idx" ON public."OrganizationAffiliation" USING gin (service);'
  );
  await client.query('CREATE INDEX "Organization_History_id_idx" ON public."Organization_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Organization_History_lastUpdated_idx" ON public."Organization_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Organization_Token_code_idx" ON public."Organization_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Organization_Token_resourceId_idx" ON public."Organization_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "Organization_Token_system_idx" ON public."Organization_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "Organization_Token_text_idx_tsv" ON public."Organization_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Organization_Token_value_idx" ON public."Organization_Token" USING btree (value);');
  await client.query('CREATE INDEX "Organization__profile_idx" ON public."Organization" USING gin (_profile);');
  await client.query('CREATE INDEX "Organization__security_idx" ON public."Organization" USING gin (_security);');
  await client.query('CREATE INDEX "Organization__source_idx" ON public."Organization" USING btree (_source);');
  await client.query('CREATE INDEX "Organization__tag_idx" ON public."Organization" USING gin (_tag);');
  await client.query('CREATE INDEX "Organization_active_idx" ON public."Organization" USING btree (active);');
  await client.query('CREATE INDEX "Organization_compartments_idx" ON public."Organization" USING gin (compartments);');
  await client.query('CREATE INDEX "Organization_endpoint_idx" ON public."Organization" USING gin (endpoint);');
  await client.query(
    'CREATE INDEX "Organization_lastUpdated_idx" ON public."Organization" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Organization_name_idx" ON public."Organization" USING gin (name);');
  await client.query('CREATE INDEX "Organization_partof_idx" ON public."Organization" USING btree (partof);');
  await client.query('CREATE INDEX "Organization_phonetic_idx" ON public."Organization" USING btree (phonetic);');
  await client.query('CREATE INDEX "Organization_projectId_idx" ON public."Organization" USING btree ("projectId");');
  await client.query('CREATE INDEX "Parameters_History_id_idx" ON public."Parameters_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Parameters_History_lastUpdated_idx" ON public."Parameters_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Parameters_Token_code_idx" ON public."Parameters_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Parameters_Token_resourceId_idx" ON public."Parameters_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Parameters_Token_system_idx" ON public."Parameters_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Parameters_Token_text_idx_tsv" ON public."Parameters_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Parameters_Token_value_idx" ON public."Parameters_Token" USING btree (value);');
  await client.query('CREATE INDEX "Parameters__profile_idx" ON public."Parameters" USING gin (_profile);');
  await client.query('CREATE INDEX "Parameters__security_idx" ON public."Parameters" USING gin (_security);');
  await client.query('CREATE INDEX "Parameters__source_idx" ON public."Parameters" USING btree (_source);');
  await client.query('CREATE INDEX "Parameters__tag_idx" ON public."Parameters" USING gin (_tag);');
  await client.query('CREATE INDEX "Parameters_compartments_idx" ON public."Parameters" USING gin (compartments);');
  await client.query('CREATE INDEX "Parameters_lastUpdated_idx" ON public."Parameters" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Parameters_projectId_idx" ON public."Parameters" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_History_id_idx" ON public."PasswordChangeRequest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_History_lastUpdated_idx" ON public."PasswordChangeRequest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_Token_code_idx" ON public."PasswordChangeRequest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_Token_resourceId_idx" ON public."PasswordChangeRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_Token_system_idx" ON public."PasswordChangeRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_Token_text_idx_tsv" ON public."PasswordChangeRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_Token_value_idx" ON public."PasswordChangeRequest_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest__profile_idx" ON public."PasswordChangeRequest" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest__security_idx" ON public."PasswordChangeRequest" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest__source_idx" ON public."PasswordChangeRequest" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest__tag_idx" ON public."PasswordChangeRequest" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_compartments_idx" ON public."PasswordChangeRequest" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_lastUpdated_idx" ON public."PasswordChangeRequest" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_projectId_idx" ON public."PasswordChangeRequest" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "PasswordChangeRequest_user_idx" ON public."PasswordChangeRequest" USING btree ("user");'
  );
  await client.query('CREATE INDEX "Patient_History_id_idx" ON public."Patient_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Patient_History_lastUpdated_idx" ON public."Patient_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Patient_Token_code_idx" ON public."Patient_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Patient_Token_resourceId_idx" ON public."Patient_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Patient_Token_system_idx" ON public."Patient_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Patient_Token_text_idx_tsv" ON public."Patient_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Patient_Token_value_idx" ON public."Patient_Token" USING btree (value);');
  await client.query('CREATE INDEX "Patient__profile_idx" ON public."Patient" USING gin (_profile);');
  await client.query('CREATE INDEX "Patient__security_idx" ON public."Patient" USING gin (_security);');
  await client.query('CREATE INDEX "Patient__source_idx" ON public."Patient" USING btree (_source);');
  await client.query('CREATE INDEX "Patient__tag_idx" ON public."Patient" USING gin (_tag);');
  await client.query('CREATE INDEX "Patient_active_idx" ON public."Patient" USING btree (active);');
  await client.query('CREATE INDEX "Patient_birthdate_idx" ON public."Patient" USING btree (birthdate);');
  await client.query('CREATE INDEX "Patient_compartments_idx" ON public."Patient" USING gin (compartments);');
  await client.query('CREATE INDEX "Patient_deathDate_idx" ON public."Patient" USING btree ("deathDate");');
  await client.query('CREATE INDEX "Patient_deceased_idx" ON public."Patient" USING btree (deceased);');
  await client.query('CREATE INDEX "Patient_gender_idx" ON public."Patient" USING btree (gender);');
  await client.query(
    'CREATE INDEX "Patient_generalPractitioner_idx" ON public."Patient" USING gin ("generalPractitioner");'
  );
  await client.query('CREATE INDEX "Patient_lastUpdated_idx" ON public."Patient" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Patient_link_idx" ON public."Patient" USING gin (link);');
  await client.query('CREATE INDEX "Patient_organization_idx" ON public."Patient" USING btree (organization);');
  await client.query('CREATE INDEX "Patient_phonetic_idx" ON public."Patient" USING gin (phonetic);');
  await client.query('CREATE INDEX "Patient_projectId_idx" ON public."Patient" USING btree ("projectId");');
  await client.query('CREATE INDEX "PaymentNotice_History_id_idx" ON public."PaymentNotice_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "PaymentNotice_History_lastUpdated_idx" ON public."PaymentNotice_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "PaymentNotice_Token_code_idx" ON public."PaymentNotice_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "PaymentNotice_Token_resourceId_idx" ON public."PaymentNotice_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "PaymentNotice_Token_system_idx" ON public."PaymentNotice_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "PaymentNotice_Token_text_idx_tsv" ON public."PaymentNotice_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "PaymentNotice_Token_value_idx" ON public."PaymentNotice_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "PaymentNotice__profile_idx" ON public."PaymentNotice" USING gin (_profile);');
  await client.query('CREATE INDEX "PaymentNotice__security_idx" ON public."PaymentNotice" USING gin (_security);');
  await client.query('CREATE INDEX "PaymentNotice__source_idx" ON public."PaymentNotice" USING btree (_source);');
  await client.query('CREATE INDEX "PaymentNotice__tag_idx" ON public."PaymentNotice" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "PaymentNotice_compartments_idx" ON public."PaymentNotice" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "PaymentNotice_created_idx" ON public."PaymentNotice" USING btree (created);');
  await client.query(
    'CREATE INDEX "PaymentNotice_lastUpdated_idx" ON public."PaymentNotice" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "PaymentNotice_projectId_idx" ON public."PaymentNotice" USING btree ("projectId");');
  await client.query('CREATE INDEX "PaymentNotice_provider_idx" ON public."PaymentNotice" USING btree (provider);');
  await client.query('CREATE INDEX "PaymentNotice_request_idx" ON public."PaymentNotice" USING btree (request);');
  await client.query('CREATE INDEX "PaymentNotice_response_idx" ON public."PaymentNotice" USING btree (response);');
  await client.query('CREATE INDEX "PaymentNotice_status_idx" ON public."PaymentNotice" USING btree (status);');
  await client.query(
    'CREATE INDEX "PaymentReconciliation_History_id_idx" ON public."PaymentReconciliation_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_History_lastUpdated_idx" ON public."PaymentReconciliation_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_Token_code_idx" ON public."PaymentReconciliation_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_Token_resourceId_idx" ON public."PaymentReconciliation_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_Token_system_idx" ON public."PaymentReconciliation_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_Token_text_idx_tsv" ON public."PaymentReconciliation_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_Token_value_idx" ON public."PaymentReconciliation_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation__profile_idx" ON public."PaymentReconciliation" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation__security_idx" ON public."PaymentReconciliation" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation__source_idx" ON public."PaymentReconciliation" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation__tag_idx" ON public."PaymentReconciliation" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_compartments_idx" ON public."PaymentReconciliation" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_created_idx" ON public."PaymentReconciliation" USING btree (created);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_disposition_idx" ON public."PaymentReconciliation" USING btree (disposition);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_lastUpdated_idx" ON public."PaymentReconciliation" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_outcome_idx" ON public."PaymentReconciliation" USING btree (outcome);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_paymentIssuer_idx" ON public."PaymentReconciliation" USING btree ("paymentIssuer");'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_projectId_idx" ON public."PaymentReconciliation" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_request_idx" ON public."PaymentReconciliation" USING btree (request);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_requestor_idx" ON public."PaymentReconciliation" USING btree (requestor);'
  );
  await client.query(
    'CREATE INDEX "PaymentReconciliation_status_idx" ON public."PaymentReconciliation" USING btree (status);'
  );
  await client.query('CREATE INDEX "Person_History_id_idx" ON public."Person_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Person_History_lastUpdated_idx" ON public."Person_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Person_Token_code_idx" ON public."Person_Token" USING btree (code);');
  await client.query('CREATE INDEX "Person_Token_resourceId_idx" ON public."Person_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Person_Token_system_idx" ON public."Person_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Person_Token_text_idx_tsv" ON public."Person_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Person_Token_value_idx" ON public."Person_Token" USING btree (value);');
  await client.query('CREATE INDEX "Person__profile_idx" ON public."Person" USING gin (_profile);');
  await client.query('CREATE INDEX "Person__security_idx" ON public."Person" USING gin (_security);');
  await client.query('CREATE INDEX "Person__source_idx" ON public."Person" USING btree (_source);');
  await client.query('CREATE INDEX "Person__tag_idx" ON public."Person" USING gin (_tag);');
  await client.query('CREATE INDEX "Person_birthdate_idx" ON public."Person" USING btree (birthdate);');
  await client.query('CREATE INDEX "Person_compartments_idx" ON public."Person" USING gin (compartments);');
  await client.query('CREATE INDEX "Person_gender_idx" ON public."Person" USING btree (gender);');
  await client.query('CREATE INDEX "Person_lastUpdated_idx" ON public."Person" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Person_link_idx" ON public."Person" USING gin (link);');
  await client.query('CREATE INDEX "Person_organization_idx" ON public."Person" USING btree (organization);');
  await client.query('CREATE INDEX "Person_patient_idx" ON public."Person" USING gin (patient);');
  await client.query('CREATE INDEX "Person_phonetic_idx" ON public."Person" USING gin (phonetic);');
  await client.query('CREATE INDEX "Person_practitioner_idx" ON public."Person" USING gin (practitioner);');
  await client.query('CREATE INDEX "Person_projectId_idx" ON public."Person" USING btree ("projectId");');
  await client.query('CREATE INDEX "Person_relatedperson_idx" ON public."Person" USING gin (relatedperson);');
  await client.query(
    'CREATE INDEX "PlanDefinition_History_id_idx" ON public."PlanDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_History_lastUpdated_idx" ON public."PlanDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_Token_code_idx" ON public."PlanDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_Token_resourceId_idx" ON public."PlanDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_Token_system_idx" ON public."PlanDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_Token_text_idx_tsv" ON public."PlanDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_Token_value_idx" ON public."PlanDefinition_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "PlanDefinition__profile_idx" ON public."PlanDefinition" USING gin (_profile);');
  await client.query('CREATE INDEX "PlanDefinition__security_idx" ON public."PlanDefinition" USING gin (_security);');
  await client.query('CREATE INDEX "PlanDefinition__source_idx" ON public."PlanDefinition" USING btree (_source);');
  await client.query('CREATE INDEX "PlanDefinition__tag_idx" ON public."PlanDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "PlanDefinition_compartments_idx" ON public."PlanDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_composedOf_idx" ON public."PlanDefinition" USING gin ("composedOf");'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_contextQuantity_idx" ON public."PlanDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_contextTypeQuantity_idx" ON public."PlanDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_contextTypeValue_idx" ON public."PlanDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "PlanDefinition_date_idx" ON public."PlanDefinition" USING btree (date);');
  await client.query('CREATE INDEX "PlanDefinition_definition_idx" ON public."PlanDefinition" USING gin (definition);');
  await client.query('CREATE INDEX "PlanDefinition_dependsOn_idx" ON public."PlanDefinition" USING gin ("dependsOn");');
  await client.query(
    'CREATE INDEX "PlanDefinition_derivedFrom_idx" ON public."PlanDefinition" USING gin ("derivedFrom");'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_description_idx" ON public."PlanDefinition" USING btree (description);'
  );
  await client.query('CREATE INDEX "PlanDefinition_effective_idx" ON public."PlanDefinition" USING btree (effective);');
  await client.query(
    'CREATE INDEX "PlanDefinition_lastUpdated_idx" ON public."PlanDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "PlanDefinition_name_idx" ON public."PlanDefinition" USING btree (name);');
  await client.query(
    'CREATE INDEX "PlanDefinition_predecessor_idx" ON public."PlanDefinition" USING gin (predecessor);'
  );
  await client.query(
    'CREATE INDEX "PlanDefinition_projectId_idx" ON public."PlanDefinition" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "PlanDefinition_publisher_idx" ON public."PlanDefinition" USING btree (publisher);');
  await client.query('CREATE INDEX "PlanDefinition_status_idx" ON public."PlanDefinition" USING btree (status);');
  await client.query('CREATE INDEX "PlanDefinition_successor_idx" ON public."PlanDefinition" USING gin (successor);');
  await client.query('CREATE INDEX "PlanDefinition_title_idx" ON public."PlanDefinition" USING btree (title);');
  await client.query('CREATE INDEX "PlanDefinition_url_idx" ON public."PlanDefinition" USING btree (url);');
  await client.query('CREATE INDEX "PlanDefinition_version_idx" ON public."PlanDefinition" USING btree (version);');
  await client.query(
    'CREATE INDEX "PractitionerRole_History_id_idx" ON public."PractitionerRole_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_History_lastUpdated_idx" ON public."PractitionerRole_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_Token_code_idx" ON public."PractitionerRole_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_Token_resourceId_idx" ON public."PractitionerRole_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_Token_system_idx" ON public."PractitionerRole_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_Token_text_idx_tsv" ON public."PractitionerRole_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_Token_value_idx" ON public."PractitionerRole_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "PractitionerRole__profile_idx" ON public."PractitionerRole" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "PractitionerRole__security_idx" ON public."PractitionerRole" USING gin (_security);'
  );
  await client.query('CREATE INDEX "PractitionerRole__source_idx" ON public."PractitionerRole" USING btree (_source);');
  await client.query('CREATE INDEX "PractitionerRole__tag_idx" ON public."PractitionerRole" USING gin (_tag);');
  await client.query('CREATE INDEX "PractitionerRole_active_idx" ON public."PractitionerRole" USING btree (active);');
  await client.query(
    'CREATE INDEX "PractitionerRole_compartments_idx" ON public."PractitionerRole" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "PractitionerRole_date_idx" ON public."PractitionerRole" USING btree (date);');
  await client.query('CREATE INDEX "PractitionerRole_endpoint_idx" ON public."PractitionerRole" USING gin (endpoint);');
  await client.query(
    'CREATE INDEX "PractitionerRole_lastUpdated_idx" ON public."PractitionerRole" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "PractitionerRole_location_idx" ON public."PractitionerRole" USING gin (location);');
  await client.query(
    'CREATE INDEX "PractitionerRole_organization_idx" ON public."PractitionerRole" USING btree (organization);'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_practitioner_idx" ON public."PractitionerRole" USING btree (practitioner);'
  );
  await client.query(
    'CREATE INDEX "PractitionerRole_projectId_idx" ON public."PractitionerRole" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "PractitionerRole_service_idx" ON public."PractitionerRole" USING gin (service);');
  await client.query('CREATE INDEX "Practitioner_History_id_idx" ON public."Practitioner_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Practitioner_History_lastUpdated_idx" ON public."Practitioner_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Practitioner_Token_code_idx" ON public."Practitioner_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Practitioner_Token_resourceId_idx" ON public."Practitioner_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "Practitioner_Token_system_idx" ON public."Practitioner_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "Practitioner_Token_text_idx_tsv" ON public."Practitioner_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Practitioner_Token_value_idx" ON public."Practitioner_Token" USING btree (value);');
  await client.query('CREATE INDEX "Practitioner__profile_idx" ON public."Practitioner" USING gin (_profile);');
  await client.query('CREATE INDEX "Practitioner__security_idx" ON public."Practitioner" USING gin (_security);');
  await client.query('CREATE INDEX "Practitioner__source_idx" ON public."Practitioner" USING btree (_source);');
  await client.query('CREATE INDEX "Practitioner__tag_idx" ON public."Practitioner" USING gin (_tag);');
  await client.query('CREATE INDEX "Practitioner_active_idx" ON public."Practitioner" USING btree (active);');
  await client.query('CREATE INDEX "Practitioner_compartments_idx" ON public."Practitioner" USING gin (compartments);');
  await client.query('CREATE INDEX "Practitioner_gender_idx" ON public."Practitioner" USING btree (gender);');
  await client.query(
    'CREATE INDEX "Practitioner_lastUpdated_idx" ON public."Practitioner" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Practitioner_phonetic_idx" ON public."Practitioner" USING gin (phonetic);');
  await client.query('CREATE INDEX "Practitioner_projectId_idx" ON public."Practitioner" USING btree ("projectId");');
  await client.query('CREATE INDEX "Procedure_History_id_idx" ON public."Procedure_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Procedure_History_lastUpdated_idx" ON public."Procedure_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Procedure_Token_code_idx" ON public."Procedure_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Procedure_Token_resourceId_idx" ON public."Procedure_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Procedure_Token_system_idx" ON public."Procedure_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Procedure_Token_text_idx_tsv" ON public."Procedure_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Procedure_Token_value_idx" ON public."Procedure_Token" USING btree (value);');
  await client.query('CREATE INDEX "Procedure__profile_idx" ON public."Procedure" USING gin (_profile);');
  await client.query('CREATE INDEX "Procedure__security_idx" ON public."Procedure" USING gin (_security);');
  await client.query('CREATE INDEX "Procedure__source_idx" ON public."Procedure" USING btree (_source);');
  await client.query('CREATE INDEX "Procedure__tag_idx" ON public."Procedure" USING gin (_tag);');
  await client.query('CREATE INDEX "Procedure_basedOn_idx" ON public."Procedure" USING gin ("basedOn");');
  await client.query('CREATE INDEX "Procedure_compartments_idx" ON public."Procedure" USING gin (compartments);');
  await client.query('CREATE INDEX "Procedure_date_idx" ON public."Procedure" USING btree (date);');
  await client.query('CREATE INDEX "Procedure_encounter_idx" ON public."Procedure" USING btree (encounter);');
  await client.query(
    'CREATE INDEX "Procedure_instantiatesCanonical_idx" ON public."Procedure" USING gin ("instantiatesCanonical");'
  );
  await client.query(
    'CREATE INDEX "Procedure_instantiatesUri_idx" ON public."Procedure" USING gin ("instantiatesUri");'
  );
  await client.query('CREATE INDEX "Procedure_lastUpdated_idx" ON public."Procedure" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Procedure_location_idx" ON public."Procedure" USING btree (location);');
  await client.query('CREATE INDEX "Procedure_partOf_idx" ON public."Procedure" USING gin ("partOf");');
  await client.query('CREATE INDEX "Procedure_patient_idx" ON public."Procedure" USING btree (patient);');
  await client.query('CREATE INDEX "Procedure_performer_idx" ON public."Procedure" USING gin (performer);');
  await client.query('CREATE INDEX "Procedure_projectId_idx" ON public."Procedure" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "Procedure_reasonReference_idx" ON public."Procedure" USING gin ("reasonReference");'
  );
  await client.query('CREATE INDEX "Procedure_status_idx" ON public."Procedure" USING btree (status);');
  await client.query('CREATE INDEX "Procedure_subject_idx" ON public."Procedure" USING btree (subject);');
  await client.query(
    'CREATE INDEX "ProjectMembership_History_id_idx" ON public."ProjectMembership_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_History_lastUpdated_idx" ON public."ProjectMembership_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_Token_code_idx" ON public."ProjectMembership_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_Token_resourceId_idx" ON public."ProjectMembership_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_Token_system_idx" ON public."ProjectMembership_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_Token_text_idx_tsv" ON public."ProjectMembership_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_Token_value_idx" ON public."ProjectMembership_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership__profile_idx" ON public."ProjectMembership" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership__security_idx" ON public."ProjectMembership" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership__source_idx" ON public."ProjectMembership" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ProjectMembership__tag_idx" ON public."ProjectMembership" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ProjectMembership_accessPolicy_idx" ON public."ProjectMembership" USING gin ("accessPolicy");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_compartments_idx" ON public."ProjectMembership" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_externalId_idx" ON public."ProjectMembership" USING btree ("externalId");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_lastUpdated_idx" ON public."ProjectMembership" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_profileType_idx" ON public."ProjectMembership" USING btree ("profileType");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_profile_idx" ON public."ProjectMembership" USING btree (profile);'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_projectId_idx" ON public."ProjectMembership" USING btree ("projectId");'
  );
  await client.query(
    'CREATE UNIQUE INDEX "ProjectMembership_project_externalId_idx" ON public."ProjectMembership" USING btree (project, "externalId");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_project_idx" ON public."ProjectMembership" USING btree (project);'
  );
  await client.query(
    'CREATE UNIQUE INDEX "ProjectMembership_project_userName_idx" ON public."ProjectMembership" USING btree (project, "userName");'
  );
  await client.query(
    'CREATE INDEX "ProjectMembership_userName_idx" ON public."ProjectMembership" USING btree ("userName");'
  );
  await client.query('CREATE INDEX "ProjectMembership_user_idx" ON public."ProjectMembership" USING btree ("user");');
  await client.query('CREATE INDEX "Project_History_id_idx" ON public."Project_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Project_History_lastUpdated_idx" ON public."Project_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Project_Token_code_idx" ON public."Project_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Project_Token_resourceId_idx" ON public."Project_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Project_Token_system_idx" ON public."Project_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Project_Token_text_idx_tsv" ON public."Project_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Project_Token_value_idx" ON public."Project_Token" USING btree (value);');
  await client.query('CREATE INDEX "Project__profile_idx" ON public."Project" USING gin (_profile);');
  await client.query('CREATE INDEX "Project__security_idx" ON public."Project" USING gin (_security);');
  await client.query('CREATE INDEX "Project__source_idx" ON public."Project" USING btree (_source);');
  await client.query('CREATE INDEX "Project__tag_idx" ON public."Project" USING gin (_tag);');
  await client.query('CREATE INDEX "Project_compartments_idx" ON public."Project" USING gin (compartments);');
  await client.query('CREATE INDEX "Project_googleClientId_idx" ON public."Project" USING gin ("googleClientId");');
  await client.query('CREATE INDEX "Project_lastUpdated_idx" ON public."Project" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Project_name_idx" ON public."Project" USING btree (name);');
  await client.query('CREATE INDEX "Project_owner_idx" ON public."Project" USING btree (owner);');
  await client.query('CREATE INDEX "Project_projectId_idx" ON public."Project" USING btree ("projectId");');
  await client.query('CREATE INDEX "Project_recaptchaSiteKey_idx" ON public."Project" USING gin ("recaptchaSiteKey");');
  await client.query('CREATE INDEX "Provenance_History_id_idx" ON public."Provenance_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Provenance_History_lastUpdated_idx" ON public."Provenance_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Provenance_Token_code_idx" ON public."Provenance_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Provenance_Token_resourceId_idx" ON public."Provenance_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Provenance_Token_system_idx" ON public."Provenance_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Provenance_Token_text_idx_tsv" ON public."Provenance_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Provenance_Token_value_idx" ON public."Provenance_Token" USING btree (value);');
  await client.query('CREATE INDEX "Provenance__profile_idx" ON public."Provenance" USING gin (_profile);');
  await client.query('CREATE INDEX "Provenance__security_idx" ON public."Provenance" USING gin (_security);');
  await client.query('CREATE INDEX "Provenance__source_idx" ON public."Provenance" USING btree (_source);');
  await client.query('CREATE INDEX "Provenance__tag_idx" ON public."Provenance" USING gin (_tag);');
  await client.query('CREATE INDEX "Provenance_agent_idx" ON public."Provenance" USING gin (agent);');
  await client.query('CREATE INDEX "Provenance_compartments_idx" ON public."Provenance" USING gin (compartments);');
  await client.query('CREATE INDEX "Provenance_entity_idx" ON public."Provenance" USING gin (entity);');
  await client.query('CREATE INDEX "Provenance_lastUpdated_idx" ON public."Provenance" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Provenance_location_idx" ON public."Provenance" USING btree (location);');
  await client.query('CREATE INDEX "Provenance_patient_idx" ON public."Provenance" USING gin (patient);');
  await client.query('CREATE INDEX "Provenance_projectId_idx" ON public."Provenance" USING btree ("projectId");');
  await client.query('CREATE INDEX "Provenance_recorded_idx" ON public."Provenance" USING btree (recorded);');
  await client.query('CREATE INDEX "Provenance_target_idx" ON public."Provenance" USING gin (target);');
  await client.query('CREATE INDEX "Provenance_when_idx" ON public."Provenance" USING btree ("when");');
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_History_id_idx" ON public."QuestionnaireResponse_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_History_lastUpdated_idx" ON public."QuestionnaireResponse_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_Token_code_idx" ON public."QuestionnaireResponse_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_Token_resourceId_idx" ON public."QuestionnaireResponse_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_Token_system_idx" ON public."QuestionnaireResponse_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_Token_text_idx_tsv" ON public."QuestionnaireResponse_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_Token_value_idx" ON public."QuestionnaireResponse_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse__profile_idx" ON public."QuestionnaireResponse" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse__security_idx" ON public."QuestionnaireResponse" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse__source_idx" ON public."QuestionnaireResponse" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse__tag_idx" ON public."QuestionnaireResponse" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_author_idx" ON public."QuestionnaireResponse" USING btree (author);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_authored_idx" ON public."QuestionnaireResponse" USING btree (authored);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_basedOn_idx" ON public."QuestionnaireResponse" USING gin ("basedOn");'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_compartments_idx" ON public."QuestionnaireResponse" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_encounter_idx" ON public."QuestionnaireResponse" USING btree (encounter);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_lastUpdated_idx" ON public."QuestionnaireResponse" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_partOf_idx" ON public."QuestionnaireResponse" USING gin ("partOf");'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_patient_idx" ON public."QuestionnaireResponse" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_projectId_idx" ON public."QuestionnaireResponse" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_questionnaire_idx" ON public."QuestionnaireResponse" USING btree (questionnaire);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_source_idx" ON public."QuestionnaireResponse" USING btree (source);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_status_idx" ON public."QuestionnaireResponse" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "QuestionnaireResponse_subject_idx" ON public."QuestionnaireResponse" USING btree (subject);'
  );
  await client.query('CREATE INDEX "Questionnaire_History_id_idx" ON public."Questionnaire_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Questionnaire_History_lastUpdated_idx" ON public."Questionnaire_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Questionnaire_Token_code_idx" ON public."Questionnaire_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Questionnaire_Token_resourceId_idx" ON public."Questionnaire_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "Questionnaire_Token_system_idx" ON public."Questionnaire_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "Questionnaire_Token_text_idx_tsv" ON public."Questionnaire_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "Questionnaire_Token_value_idx" ON public."Questionnaire_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "Questionnaire__profile_idx" ON public."Questionnaire" USING gin (_profile);');
  await client.query('CREATE INDEX "Questionnaire__security_idx" ON public."Questionnaire" USING gin (_security);');
  await client.query('CREATE INDEX "Questionnaire__source_idx" ON public."Questionnaire" USING btree (_source);');
  await client.query('CREATE INDEX "Questionnaire__tag_idx" ON public."Questionnaire" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "Questionnaire_compartments_idx" ON public."Questionnaire" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "Questionnaire_contextQuantity_idx" ON public."Questionnaire" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "Questionnaire_contextTypeQuantity_idx" ON public."Questionnaire" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "Questionnaire_contextTypeValue_idx" ON public."Questionnaire" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "Questionnaire_date_idx" ON public."Questionnaire" USING btree (date);');
  await client.query('CREATE INDEX "Questionnaire_definition_idx" ON public."Questionnaire" USING gin (definition);');
  await client.query(
    'CREATE INDEX "Questionnaire_description_idx" ON public."Questionnaire" USING btree (description);'
  );
  await client.query('CREATE INDEX "Questionnaire_effective_idx" ON public."Questionnaire" USING btree (effective);');
  await client.query(
    'CREATE INDEX "Questionnaire_lastUpdated_idx" ON public."Questionnaire" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Questionnaire_name_idx" ON public."Questionnaire" USING btree (name);');
  await client.query('CREATE INDEX "Questionnaire_projectId_idx" ON public."Questionnaire" USING btree ("projectId");');
  await client.query('CREATE INDEX "Questionnaire_publisher_idx" ON public."Questionnaire" USING btree (publisher);');
  await client.query('CREATE INDEX "Questionnaire_status_idx" ON public."Questionnaire" USING btree (status);');
  await client.query(
    'CREATE INDEX "Questionnaire_subjectType_idx" ON public."Questionnaire" USING gin ("subjectType");'
  );
  await client.query('CREATE INDEX "Questionnaire_title_idx" ON public."Questionnaire" USING btree (title);');
  await client.query('CREATE INDEX "Questionnaire_url_idx" ON public."Questionnaire" USING btree (url);');
  await client.query('CREATE INDEX "Questionnaire_version_idx" ON public."Questionnaire" USING btree (version);');
  await client.query('CREATE INDEX "RelatedPerson_History_id_idx" ON public."RelatedPerson_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "RelatedPerson_History_lastUpdated_idx" ON public."RelatedPerson_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "RelatedPerson_Token_code_idx" ON public."RelatedPerson_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "RelatedPerson_Token_resourceId_idx" ON public."RelatedPerson_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "RelatedPerson_Token_system_idx" ON public."RelatedPerson_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "RelatedPerson_Token_text_idx_tsv" ON public."RelatedPerson_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "RelatedPerson_Token_value_idx" ON public."RelatedPerson_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "RelatedPerson__profile_idx" ON public."RelatedPerson" USING gin (_profile);');
  await client.query('CREATE INDEX "RelatedPerson__security_idx" ON public."RelatedPerson" USING gin (_security);');
  await client.query('CREATE INDEX "RelatedPerson__source_idx" ON public."RelatedPerson" USING btree (_source);');
  await client.query('CREATE INDEX "RelatedPerson__tag_idx" ON public."RelatedPerson" USING gin (_tag);');
  await client.query('CREATE INDEX "RelatedPerson_active_idx" ON public."RelatedPerson" USING btree (active);');
  await client.query('CREATE INDEX "RelatedPerson_birthdate_idx" ON public."RelatedPerson" USING btree (birthdate);');
  await client.query(
    'CREATE INDEX "RelatedPerson_compartments_idx" ON public."RelatedPerson" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "RelatedPerson_gender_idx" ON public."RelatedPerson" USING btree (gender);');
  await client.query(
    'CREATE INDEX "RelatedPerson_lastUpdated_idx" ON public."RelatedPerson" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "RelatedPerson_patient_idx" ON public."RelatedPerson" USING btree (patient);');
  await client.query('CREATE INDEX "RelatedPerson_phonetic_idx" ON public."RelatedPerson" USING gin (phonetic);');
  await client.query('CREATE INDEX "RelatedPerson_projectId_idx" ON public."RelatedPerson" USING btree ("projectId");');
  await client.query('CREATE INDEX "RequestGroup_History_id_idx" ON public."RequestGroup_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "RequestGroup_History_lastUpdated_idx" ON public."RequestGroup_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "RequestGroup_Token_code_idx" ON public."RequestGroup_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "RequestGroup_Token_resourceId_idx" ON public."RequestGroup_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "RequestGroup_Token_system_idx" ON public."RequestGroup_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "RequestGroup_Token_text_idx_tsv" ON public."RequestGroup_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "RequestGroup_Token_value_idx" ON public."RequestGroup_Token" USING btree (value);');
  await client.query('CREATE INDEX "RequestGroup__profile_idx" ON public."RequestGroup" USING gin (_profile);');
  await client.query('CREATE INDEX "RequestGroup__security_idx" ON public."RequestGroup" USING gin (_security);');
  await client.query('CREATE INDEX "RequestGroup__source_idx" ON public."RequestGroup" USING btree (_source);');
  await client.query('CREATE INDEX "RequestGroup__tag_idx" ON public."RequestGroup" USING gin (_tag);');
  await client.query('CREATE INDEX "RequestGroup_author_idx" ON public."RequestGroup" USING btree (author);');
  await client.query('CREATE INDEX "RequestGroup_authored_idx" ON public."RequestGroup" USING btree (authored);');
  await client.query('CREATE INDEX "RequestGroup_compartments_idx" ON public."RequestGroup" USING gin (compartments);');
  await client.query('CREATE INDEX "RequestGroup_encounter_idx" ON public."RequestGroup" USING btree (encounter);');
  await client.query(
    'CREATE INDEX "RequestGroup_groupIdentifier_idx" ON public."RequestGroup" USING btree ("groupIdentifier");'
  );
  await client.query(
    'CREATE INDEX "RequestGroup_instantiatesCanonical_idx" ON public."RequestGroup" USING gin ("instantiatesCanonical");'
  );
  await client.query(
    'CREATE INDEX "RequestGroup_instantiatesUri_idx" ON public."RequestGroup" USING gin ("instantiatesUri");'
  );
  await client.query('CREATE INDEX "RequestGroup_intent_idx" ON public."RequestGroup" USING btree (intent);');
  await client.query(
    'CREATE INDEX "RequestGroup_lastUpdated_idx" ON public."RequestGroup" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "RequestGroup_participant_idx" ON public."RequestGroup" USING gin (participant);');
  await client.query('CREATE INDEX "RequestGroup_patient_idx" ON public."RequestGroup" USING btree (patient);');
  await client.query('CREATE INDEX "RequestGroup_priority_idx" ON public."RequestGroup" USING btree (priority);');
  await client.query('CREATE INDEX "RequestGroup_projectId_idx" ON public."RequestGroup" USING btree ("projectId");');
  await client.query('CREATE INDEX "RequestGroup_status_idx" ON public."RequestGroup" USING btree (status);');
  await client.query('CREATE INDEX "RequestGroup_subject_idx" ON public."RequestGroup" USING btree (subject);');
  await client.query(
    'CREATE INDEX "ResearchDefinition_History_id_idx" ON public."ResearchDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_History_lastUpdated_idx" ON public."ResearchDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_Token_code_idx" ON public."ResearchDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_Token_resourceId_idx" ON public."ResearchDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_Token_system_idx" ON public."ResearchDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_Token_text_idx_tsv" ON public."ResearchDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_Token_value_idx" ON public."ResearchDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition__profile_idx" ON public."ResearchDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition__security_idx" ON public."ResearchDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition__source_idx" ON public."ResearchDefinition" USING btree (_source);'
  );
  await client.query('CREATE INDEX "ResearchDefinition__tag_idx" ON public."ResearchDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ResearchDefinition_compartments_idx" ON public."ResearchDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_composedOf_idx" ON public."ResearchDefinition" USING gin ("composedOf");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_contextQuantity_idx" ON public."ResearchDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_contextTypeQuantity_idx" ON public."ResearchDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_contextTypeValue_idx" ON public."ResearchDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "ResearchDefinition_date_idx" ON public."ResearchDefinition" USING btree (date);');
  await client.query(
    'CREATE INDEX "ResearchDefinition_dependsOn_idx" ON public."ResearchDefinition" USING gin ("dependsOn");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_derivedFrom_idx" ON public."ResearchDefinition" USING gin ("derivedFrom");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_description_idx" ON public."ResearchDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_effective_idx" ON public."ResearchDefinition" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_lastUpdated_idx" ON public."ResearchDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ResearchDefinition_name_idx" ON public."ResearchDefinition" USING btree (name);');
  await client.query(
    'CREATE INDEX "ResearchDefinition_predecessor_idx" ON public."ResearchDefinition" USING gin (predecessor);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_projectId_idx" ON public."ResearchDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_publisher_idx" ON public."ResearchDefinition" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_status_idx" ON public."ResearchDefinition" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ResearchDefinition_successor_idx" ON public."ResearchDefinition" USING gin (successor);'
  );
  await client.query('CREATE INDEX "ResearchDefinition_title_idx" ON public."ResearchDefinition" USING btree (title);');
  await client.query('CREATE INDEX "ResearchDefinition_url_idx" ON public."ResearchDefinition" USING btree (url);');
  await client.query(
    'CREATE INDEX "ResearchDefinition_version_idx" ON public."ResearchDefinition" USING btree (version);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_History_id_idx" ON public."ResearchElementDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_History_lastUpdated_idx" ON public."ResearchElementDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_Token_code_idx" ON public."ResearchElementDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_Token_resourceId_idx" ON public."ResearchElementDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_Token_system_idx" ON public."ResearchElementDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_Token_text_idx_tsv" ON public."ResearchElementDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_Token_value_idx" ON public."ResearchElementDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition__profile_idx" ON public."ResearchElementDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition__security_idx" ON public."ResearchElementDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition__source_idx" ON public."ResearchElementDefinition" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition__tag_idx" ON public."ResearchElementDefinition" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_compartments_idx" ON public."ResearchElementDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_composedOf_idx" ON public."ResearchElementDefinition" USING gin ("composedOf");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_contextQuantity_idx" ON public."ResearchElementDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_contextTypeQuantity_idx" ON public."ResearchElementDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_contextTypeValue_idx" ON public."ResearchElementDefinition" USING gin ("contextTypeValue");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_date_idx" ON public."ResearchElementDefinition" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_dependsOn_idx" ON public."ResearchElementDefinition" USING gin ("dependsOn");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_derivedFrom_idx" ON public."ResearchElementDefinition" USING gin ("derivedFrom");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_description_idx" ON public."ResearchElementDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_effective_idx" ON public."ResearchElementDefinition" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_lastUpdated_idx" ON public."ResearchElementDefinition" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_name_idx" ON public."ResearchElementDefinition" USING btree (name);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_predecessor_idx" ON public."ResearchElementDefinition" USING gin (predecessor);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_projectId_idx" ON public."ResearchElementDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_publisher_idx" ON public."ResearchElementDefinition" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_status_idx" ON public."ResearchElementDefinition" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_successor_idx" ON public."ResearchElementDefinition" USING gin (successor);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_title_idx" ON public."ResearchElementDefinition" USING btree (title);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_url_idx" ON public."ResearchElementDefinition" USING btree (url);'
  );
  await client.query(
    'CREATE INDEX "ResearchElementDefinition_version_idx" ON public."ResearchElementDefinition" USING btree (version);'
  );
  await client.query('CREATE INDEX "ResearchStudy_History_id_idx" ON public."ResearchStudy_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "ResearchStudy_History_lastUpdated_idx" ON public."ResearchStudy_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ResearchStudy_Token_code_idx" ON public."ResearchStudy_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "ResearchStudy_Token_resourceId_idx" ON public."ResearchStudy_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ResearchStudy_Token_system_idx" ON public."ResearchStudy_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ResearchStudy_Token_text_idx_tsv" ON public."ResearchStudy_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ResearchStudy_Token_value_idx" ON public."ResearchStudy_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "ResearchStudy__profile_idx" ON public."ResearchStudy" USING gin (_profile);');
  await client.query('CREATE INDEX "ResearchStudy__security_idx" ON public."ResearchStudy" USING gin (_security);');
  await client.query('CREATE INDEX "ResearchStudy__source_idx" ON public."ResearchStudy" USING btree (_source);');
  await client.query('CREATE INDEX "ResearchStudy__tag_idx" ON public."ResearchStudy" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ResearchStudy_compartments_idx" ON public."ResearchStudy" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "ResearchStudy_date_idx" ON public."ResearchStudy" USING btree (date);');
  await client.query(
    'CREATE INDEX "ResearchStudy_lastUpdated_idx" ON public."ResearchStudy" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ResearchStudy_partof_idx" ON public."ResearchStudy" USING gin (partof);');
  await client.query(
    'CREATE INDEX "ResearchStudy_principalinvestigator_idx" ON public."ResearchStudy" USING btree (principalinvestigator);'
  );
  await client.query('CREATE INDEX "ResearchStudy_projectId_idx" ON public."ResearchStudy" USING btree ("projectId");');
  await client.query('CREATE INDEX "ResearchStudy_protocol_idx" ON public."ResearchStudy" USING gin (protocol);');
  await client.query('CREATE INDEX "ResearchStudy_site_idx" ON public."ResearchStudy" USING gin (site);');
  await client.query('CREATE INDEX "ResearchStudy_sponsor_idx" ON public."ResearchStudy" USING btree (sponsor);');
  await client.query('CREATE INDEX "ResearchStudy_status_idx" ON public."ResearchStudy" USING btree (status);');
  await client.query('CREATE INDEX "ResearchStudy_title_idx" ON public."ResearchStudy" USING btree (title);');
  await client.query(
    'CREATE INDEX "ResearchSubject_History_id_idx" ON public."ResearchSubject_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ResearchSubject_History_lastUpdated_idx" ON public."ResearchSubject_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ResearchSubject_Token_code_idx" ON public."ResearchSubject_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ResearchSubject_Token_resourceId_idx" ON public."ResearchSubject_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ResearchSubject_Token_system_idx" ON public."ResearchSubject_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ResearchSubject_Token_text_idx_tsv" ON public."ResearchSubject_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ResearchSubject_Token_value_idx" ON public."ResearchSubject_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "ResearchSubject__profile_idx" ON public."ResearchSubject" USING gin (_profile);');
  await client.query('CREATE INDEX "ResearchSubject__security_idx" ON public."ResearchSubject" USING gin (_security);');
  await client.query('CREATE INDEX "ResearchSubject__source_idx" ON public."ResearchSubject" USING btree (_source);');
  await client.query('CREATE INDEX "ResearchSubject__tag_idx" ON public."ResearchSubject" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "ResearchSubject_compartments_idx" ON public."ResearchSubject" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "ResearchSubject_date_idx" ON public."ResearchSubject" USING btree (date);');
  await client.query(
    'CREATE INDEX "ResearchSubject_individual_idx" ON public."ResearchSubject" USING btree (individual);'
  );
  await client.query(
    'CREATE INDEX "ResearchSubject_lastUpdated_idx" ON public."ResearchSubject" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ResearchSubject_patient_idx" ON public."ResearchSubject" USING btree (patient);');
  await client.query(
    'CREATE INDEX "ResearchSubject_projectId_idx" ON public."ResearchSubject" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "ResearchSubject_status_idx" ON public."ResearchSubject" USING btree (status);');
  await client.query('CREATE INDEX "ResearchSubject_study_idx" ON public."ResearchSubject" USING btree (study);');
  await client.query(
    'CREATE INDEX "RiskAssessment_History_id_idx" ON public."RiskAssessment_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "RiskAssessment_History_lastUpdated_idx" ON public."RiskAssessment_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "RiskAssessment_Token_code_idx" ON public."RiskAssessment_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "RiskAssessment_Token_resourceId_idx" ON public."RiskAssessment_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "RiskAssessment_Token_system_idx" ON public."RiskAssessment_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "RiskAssessment_Token_text_idx_tsv" ON public."RiskAssessment_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "RiskAssessment_Token_value_idx" ON public."RiskAssessment_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "RiskAssessment__profile_idx" ON public."RiskAssessment" USING gin (_profile);');
  await client.query('CREATE INDEX "RiskAssessment__security_idx" ON public."RiskAssessment" USING gin (_security);');
  await client.query('CREATE INDEX "RiskAssessment__source_idx" ON public."RiskAssessment" USING btree (_source);');
  await client.query('CREATE INDEX "RiskAssessment__tag_idx" ON public."RiskAssessment" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "RiskAssessment_compartments_idx" ON public."RiskAssessment" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "RiskAssessment_condition_idx" ON public."RiskAssessment" USING btree (condition);');
  await client.query('CREATE INDEX "RiskAssessment_date_idx" ON public."RiskAssessment" USING btree (date);');
  await client.query('CREATE INDEX "RiskAssessment_encounter_idx" ON public."RiskAssessment" USING btree (encounter);');
  await client.query(
    'CREATE INDEX "RiskAssessment_lastUpdated_idx" ON public."RiskAssessment" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "RiskAssessment_patient_idx" ON public."RiskAssessment" USING btree (patient);');
  await client.query('CREATE INDEX "RiskAssessment_performer_idx" ON public."RiskAssessment" USING btree (performer);');
  await client.query(
    'CREATE INDEX "RiskAssessment_probability_idx" ON public."RiskAssessment" USING gin (probability);'
  );
  await client.query(
    'CREATE INDEX "RiskAssessment_projectId_idx" ON public."RiskAssessment" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "RiskAssessment_subject_idx" ON public."RiskAssessment" USING btree (subject);');
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_History_id_idx" ON public."RiskEvidenceSynthesis_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_History_lastUpdated_idx" ON public."RiskEvidenceSynthesis_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_Token_code_idx" ON public."RiskEvidenceSynthesis_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_Token_resourceId_idx" ON public."RiskEvidenceSynthesis_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_Token_system_idx" ON public."RiskEvidenceSynthesis_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_Token_text_idx_tsv" ON public."RiskEvidenceSynthesis_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_Token_value_idx" ON public."RiskEvidenceSynthesis_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis__profile_idx" ON public."RiskEvidenceSynthesis" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis__security_idx" ON public."RiskEvidenceSynthesis" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis__source_idx" ON public."RiskEvidenceSynthesis" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis__tag_idx" ON public."RiskEvidenceSynthesis" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_compartments_idx" ON public."RiskEvidenceSynthesis" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_contextQuantity_idx" ON public."RiskEvidenceSynthesis" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_contextTypeQuantity_idx" ON public."RiskEvidenceSynthesis" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_contextTypeValue_idx" ON public."RiskEvidenceSynthesis" USING gin ("contextTypeValue");'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_date_idx" ON public."RiskEvidenceSynthesis" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_description_idx" ON public."RiskEvidenceSynthesis" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_effective_idx" ON public."RiskEvidenceSynthesis" USING btree (effective);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_lastUpdated_idx" ON public."RiskEvidenceSynthesis" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_name_idx" ON public."RiskEvidenceSynthesis" USING btree (name);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_projectId_idx" ON public."RiskEvidenceSynthesis" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_publisher_idx" ON public."RiskEvidenceSynthesis" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_status_idx" ON public."RiskEvidenceSynthesis" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_title_idx" ON public."RiskEvidenceSynthesis" USING btree (title);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_url_idx" ON public."RiskEvidenceSynthesis" USING btree (url);'
  );
  await client.query(
    'CREATE INDEX "RiskEvidenceSynthesis_version_idx" ON public."RiskEvidenceSynthesis" USING btree (version);'
  );
  await client.query('CREATE INDEX "Schedule_History_id_idx" ON public."Schedule_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Schedule_History_lastUpdated_idx" ON public."Schedule_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Schedule_Token_code_idx" ON public."Schedule_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Schedule_Token_resourceId_idx" ON public."Schedule_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Schedule_Token_system_idx" ON public."Schedule_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Schedule_Token_text_idx_tsv" ON public."Schedule_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Schedule_Token_value_idx" ON public."Schedule_Token" USING btree (value);');
  await client.query('CREATE INDEX "Schedule__profile_idx" ON public."Schedule" USING gin (_profile);');
  await client.query('CREATE INDEX "Schedule__security_idx" ON public."Schedule" USING gin (_security);');
  await client.query('CREATE INDEX "Schedule__source_idx" ON public."Schedule" USING btree (_source);');
  await client.query('CREATE INDEX "Schedule__tag_idx" ON public."Schedule" USING gin (_tag);');
  await client.query('CREATE INDEX "Schedule_active_idx" ON public."Schedule" USING btree (active);');
  await client.query('CREATE INDEX "Schedule_actor_idx" ON public."Schedule" USING gin (actor);');
  await client.query('CREATE INDEX "Schedule_compartments_idx" ON public."Schedule" USING gin (compartments);');
  await client.query('CREATE INDEX "Schedule_date_idx" ON public."Schedule" USING btree (date);');
  await client.query('CREATE INDEX "Schedule_lastUpdated_idx" ON public."Schedule" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Schedule_projectId_idx" ON public."Schedule" USING btree ("projectId");');
  await client.query(
    'CREATE INDEX "SearchParameter_History_id_idx" ON public."SearchParameter_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_History_lastUpdated_idx" ON public."SearchParameter_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_Token_code_idx" ON public."SearchParameter_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_Token_resourceId_idx" ON public."SearchParameter_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_Token_system_idx" ON public."SearchParameter_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_Token_text_idx_tsv" ON public."SearchParameter_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_Token_value_idx" ON public."SearchParameter_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "SearchParameter__profile_idx" ON public."SearchParameter" USING gin (_profile);');
  await client.query('CREATE INDEX "SearchParameter__security_idx" ON public."SearchParameter" USING gin (_security);');
  await client.query('CREATE INDEX "SearchParameter__source_idx" ON public."SearchParameter" USING btree (_source);');
  await client.query('CREATE INDEX "SearchParameter__tag_idx" ON public."SearchParameter" USING gin (_tag);');
  await client.query('CREATE INDEX "SearchParameter_base_idx" ON public."SearchParameter" USING gin (base);');
  await client.query('CREATE INDEX "SearchParameter_code_idx" ON public."SearchParameter" USING btree (code);');
  await client.query(
    'CREATE INDEX "SearchParameter_compartments_idx" ON public."SearchParameter" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "SearchParameter_component_idx" ON public."SearchParameter" USING gin (component);');
  await client.query(
    'CREATE INDEX "SearchParameter_contextQuantity_idx" ON public."SearchParameter" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_contextTypeQuantity_idx" ON public."SearchParameter" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_contextTypeValue_idx" ON public."SearchParameter" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "SearchParameter_date_idx" ON public."SearchParameter" USING btree (date);');
  await client.query(
    'CREATE INDEX "SearchParameter_derivedFrom_idx" ON public."SearchParameter" USING btree ("derivedFrom");'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_description_idx" ON public."SearchParameter" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_lastUpdated_idx" ON public."SearchParameter" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "SearchParameter_name_idx" ON public."SearchParameter" USING btree (name);');
  await client.query(
    'CREATE INDEX "SearchParameter_projectId_idx" ON public."SearchParameter" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "SearchParameter_publisher_idx" ON public."SearchParameter" USING btree (publisher);'
  );
  await client.query('CREATE INDEX "SearchParameter_status_idx" ON public."SearchParameter" USING btree (status);');
  await client.query('CREATE INDEX "SearchParameter_target_idx" ON public."SearchParameter" USING gin (target);');
  await client.query('CREATE INDEX "SearchParameter_type_idx" ON public."SearchParameter" USING btree (type);');
  await client.query('CREATE INDEX "SearchParameter_url_idx" ON public."SearchParameter" USING btree (url);');
  await client.query('CREATE INDEX "SearchParameter_version_idx" ON public."SearchParameter" USING btree (version);');
  await client.query(
    'CREATE INDEX "ServiceRequest_History_id_idx" ON public."ServiceRequest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_History_lastUpdated_idx" ON public."ServiceRequest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_Token_code_idx" ON public."ServiceRequest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_Token_resourceId_idx" ON public."ServiceRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_Token_system_idx" ON public."ServiceRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_Token_text_idx_tsv" ON public."ServiceRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_Token_value_idx" ON public."ServiceRequest_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "ServiceRequest__profile_idx" ON public."ServiceRequest" USING gin (_profile);');
  await client.query('CREATE INDEX "ServiceRequest__security_idx" ON public."ServiceRequest" USING gin (_security);');
  await client.query('CREATE INDEX "ServiceRequest__source_idx" ON public."ServiceRequest" USING btree (_source);');
  await client.query('CREATE INDEX "ServiceRequest__tag_idx" ON public."ServiceRequest" USING gin (_tag);');
  await client.query('CREATE INDEX "ServiceRequest_authored_idx" ON public."ServiceRequest" USING btree (authored);');
  await client.query('CREATE INDEX "ServiceRequest_basedOn_idx" ON public."ServiceRequest" USING gin ("basedOn");');
  await client.query(
    'CREATE INDEX "ServiceRequest_compartments_idx" ON public."ServiceRequest" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "ServiceRequest_encounter_idx" ON public."ServiceRequest" USING btree (encounter);');
  await client.query(
    'CREATE INDEX "ServiceRequest_instantiatesCanonical_idx" ON public."ServiceRequest" USING gin ("instantiatesCanonical");'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_instantiatesUri_idx" ON public."ServiceRequest" USING gin ("instantiatesUri");'
  );
  await client.query('CREATE INDEX "ServiceRequest_intent_idx" ON public."ServiceRequest" USING btree (intent);');
  await client.query(
    'CREATE INDEX "ServiceRequest_lastUpdated_idx" ON public."ServiceRequest" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_occurrence_idx" ON public."ServiceRequest" USING btree (occurrence);'
  );
  await client.query(
    'CREATE INDEX "ServiceRequest_orderDetail_idx" ON public."ServiceRequest" USING gin ("orderDetail");'
  );
  await client.query('CREATE INDEX "ServiceRequest_patient_idx" ON public."ServiceRequest" USING btree (patient);');
  await client.query('CREATE INDEX "ServiceRequest_performer_idx" ON public."ServiceRequest" USING gin (performer);');
  await client.query('CREATE INDEX "ServiceRequest_priority_idx" ON public."ServiceRequest" USING btree (priority);');
  await client.query(
    'CREATE INDEX "ServiceRequest_projectId_idx" ON public."ServiceRequest" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "ServiceRequest_replaces_idx" ON public."ServiceRequest" USING gin (replaces);');
  await client.query('CREATE INDEX "ServiceRequest_requester_idx" ON public."ServiceRequest" USING btree (requester);');
  await client.query(
    'CREATE INDEX "ServiceRequest_requisition_idx" ON public."ServiceRequest" USING btree (requisition);'
  );
  await client.query('CREATE INDEX "ServiceRequest_specimen_idx" ON public."ServiceRequest" USING gin (specimen);');
  await client.query('CREATE INDEX "ServiceRequest_status_idx" ON public."ServiceRequest" USING btree (status);');
  await client.query('CREATE INDEX "ServiceRequest_subject_idx" ON public."ServiceRequest" USING btree (subject);');
  await client.query('CREATE INDEX "Slot_History_id_idx" ON public."Slot_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Slot_History_lastUpdated_idx" ON public."Slot_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Slot_Token_code_idx" ON public."Slot_Token" USING btree (code);');
  await client.query('CREATE INDEX "Slot_Token_resourceId_idx" ON public."Slot_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Slot_Token_system_idx" ON public."Slot_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Slot_Token_text_idx_tsv" ON public."Slot_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Slot_Token_value_idx" ON public."Slot_Token" USING btree (value);');
  await client.query('CREATE INDEX "Slot__profile_idx" ON public."Slot" USING gin (_profile);');
  await client.query('CREATE INDEX "Slot__security_idx" ON public."Slot" USING gin (_security);');
  await client.query('CREATE INDEX "Slot__source_idx" ON public."Slot" USING btree (_source);');
  await client.query('CREATE INDEX "Slot__tag_idx" ON public."Slot" USING gin (_tag);');
  await client.query('CREATE INDEX "Slot_compartments_idx" ON public."Slot" USING gin (compartments);');
  await client.query('CREATE INDEX "Slot_lastUpdated_idx" ON public."Slot" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Slot_projectId_idx" ON public."Slot" USING btree ("projectId");');
  await client.query('CREATE INDEX "Slot_schedule_idx" ON public."Slot" USING btree (schedule);');
  await client.query('CREATE INDEX "Slot_start_idx" ON public."Slot" USING btree (start);');
  await client.query('CREATE INDEX "Slot_status_idx" ON public."Slot" USING btree (status);');
  await client.query(
    'CREATE INDEX "SmartAppLaunch_History_id_idx" ON public."SmartAppLaunch_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_History_lastUpdated_idx" ON public."SmartAppLaunch_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_Token_code_idx" ON public."SmartAppLaunch_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_Token_resourceId_idx" ON public."SmartAppLaunch_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_Token_system_idx" ON public."SmartAppLaunch_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_Token_text_idx_tsv" ON public."SmartAppLaunch_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_Token_value_idx" ON public."SmartAppLaunch_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "SmartAppLaunch__profile_idx" ON public."SmartAppLaunch" USING gin (_profile);');
  await client.query('CREATE INDEX "SmartAppLaunch__security_idx" ON public."SmartAppLaunch" USING gin (_security);');
  await client.query('CREATE INDEX "SmartAppLaunch__source_idx" ON public."SmartAppLaunch" USING btree (_source);');
  await client.query('CREATE INDEX "SmartAppLaunch__tag_idx" ON public."SmartAppLaunch" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "SmartAppLaunch_compartments_idx" ON public."SmartAppLaunch" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_lastUpdated_idx" ON public."SmartAppLaunch" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SmartAppLaunch_projectId_idx" ON public."SmartAppLaunch" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_History_id_idx" ON public."SpecimenDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_History_lastUpdated_idx" ON public."SpecimenDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_Token_code_idx" ON public."SpecimenDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_Token_resourceId_idx" ON public."SpecimenDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_Token_system_idx" ON public."SpecimenDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_Token_text_idx_tsv" ON public."SpecimenDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_Token_value_idx" ON public."SpecimenDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition__profile_idx" ON public."SpecimenDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition__security_idx" ON public."SpecimenDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition__source_idx" ON public."SpecimenDefinition" USING btree (_source);'
  );
  await client.query('CREATE INDEX "SpecimenDefinition__tag_idx" ON public."SpecimenDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "SpecimenDefinition_compartments_idx" ON public."SpecimenDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_lastUpdated_idx" ON public."SpecimenDefinition" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SpecimenDefinition_projectId_idx" ON public."SpecimenDefinition" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "Specimen_History_id_idx" ON public."Specimen_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Specimen_History_lastUpdated_idx" ON public."Specimen_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Specimen_Token_code_idx" ON public."Specimen_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Specimen_Token_resourceId_idx" ON public."Specimen_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Specimen_Token_system_idx" ON public."Specimen_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Specimen_Token_text_idx_tsv" ON public."Specimen_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Specimen_Token_value_idx" ON public."Specimen_Token" USING btree (value);');
  await client.query('CREATE INDEX "Specimen__profile_idx" ON public."Specimen" USING gin (_profile);');
  await client.query('CREATE INDEX "Specimen__security_idx" ON public."Specimen" USING gin (_security);');
  await client.query('CREATE INDEX "Specimen__source_idx" ON public."Specimen" USING btree (_source);');
  await client.query('CREATE INDEX "Specimen__tag_idx" ON public."Specimen" USING gin (_tag);');
  await client.query('CREATE INDEX "Specimen_accession_idx" ON public."Specimen" USING btree (accession);');
  await client.query('CREATE INDEX "Specimen_collected_idx" ON public."Specimen" USING btree (collected);');
  await client.query('CREATE INDEX "Specimen_collector_idx" ON public."Specimen" USING btree (collector);');
  await client.query('CREATE INDEX "Specimen_compartments_idx" ON public."Specimen" USING gin (compartments);');
  await client.query('CREATE INDEX "Specimen_containerId_idx" ON public."Specimen" USING gin ("containerId");');
  await client.query('CREATE INDEX "Specimen_lastUpdated_idx" ON public."Specimen" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Specimen_parent_idx" ON public."Specimen" USING gin (parent);');
  await client.query('CREATE INDEX "Specimen_patient_idx" ON public."Specimen" USING btree (patient);');
  await client.query('CREATE INDEX "Specimen_projectId_idx" ON public."Specimen" USING btree ("projectId");');
  await client.query('CREATE INDEX "Specimen_status_idx" ON public."Specimen" USING btree (status);');
  await client.query('CREATE INDEX "Specimen_subject_idx" ON public."Specimen" USING btree (subject);');
  await client.query(
    'CREATE INDEX "StructureDefinition_History_id_idx" ON public."StructureDefinition_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_History_lastUpdated_idx" ON public."StructureDefinition_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_Token_code_idx" ON public."StructureDefinition_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_Token_resourceId_idx" ON public."StructureDefinition_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_Token_system_idx" ON public."StructureDefinition_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_Token_text_idx_tsv" ON public."StructureDefinition_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_Token_value_idx" ON public."StructureDefinition_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition__profile_idx" ON public."StructureDefinition" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition__security_idx" ON public."StructureDefinition" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition__source_idx" ON public."StructureDefinition" USING btree (_source);'
  );
  await client.query('CREATE INDEX "StructureDefinition__tag_idx" ON public."StructureDefinition" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "StructureDefinition_abstract_idx" ON public."StructureDefinition" USING btree (abstract);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_basePath_idx" ON public."StructureDefinition" USING gin ("basePath");'
  );
  await client.query('CREATE INDEX "StructureDefinition_base_idx" ON public."StructureDefinition" USING btree (base);');
  await client.query(
    'CREATE INDEX "StructureDefinition_compartments_idx" ON public."StructureDefinition" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_contextQuantity_idx" ON public."StructureDefinition" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_contextTypeQuantity_idx" ON public."StructureDefinition" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_contextTypeValue_idx" ON public."StructureDefinition" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "StructureDefinition_date_idx" ON public."StructureDefinition" USING btree (date);');
  await client.query(
    'CREATE INDEX "StructureDefinition_derivation_idx" ON public."StructureDefinition" USING btree (derivation);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_description_idx" ON public."StructureDefinition" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_experimental_idx" ON public."StructureDefinition" USING btree (experimental);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_extContext_idx" ON public."StructureDefinition" USING gin ("extContext");'
  );
  await client.query('CREATE INDEX "StructureDefinition_kind_idx" ON public."StructureDefinition" USING btree (kind);');
  await client.query(
    'CREATE INDEX "StructureDefinition_lastUpdated_idx" ON public."StructureDefinition" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "StructureDefinition_name_idx" ON public."StructureDefinition" USING btree (name);');
  await client.query('CREATE INDEX "StructureDefinition_path_idx" ON public."StructureDefinition" USING gin (path);');
  await client.query(
    'CREATE INDEX "StructureDefinition_projectId_idx" ON public."StructureDefinition" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_publisher_idx" ON public."StructureDefinition" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_status_idx" ON public."StructureDefinition" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_title_idx" ON public."StructureDefinition" USING btree (title);'
  );
  await client.query('CREATE INDEX "StructureDefinition_type_idx" ON public."StructureDefinition" USING btree (type);');
  await client.query('CREATE INDEX "StructureDefinition_url_idx" ON public."StructureDefinition" USING btree (url);');
  await client.query(
    'CREATE INDEX "StructureDefinition_valueset_idx" ON public."StructureDefinition" USING gin (valueset);'
  );
  await client.query(
    'CREATE INDEX "StructureDefinition_version_idx" ON public."StructureDefinition" USING btree (version);'
  );
  await client.query('CREATE INDEX "StructureMap_History_id_idx" ON public."StructureMap_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "StructureMap_History_lastUpdated_idx" ON public."StructureMap_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "StructureMap_Token_code_idx" ON public."StructureMap_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "StructureMap_Token_resourceId_idx" ON public."StructureMap_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "StructureMap_Token_system_idx" ON public."StructureMap_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "StructureMap_Token_text_idx_tsv" ON public."StructureMap_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "StructureMap_Token_value_idx" ON public."StructureMap_Token" USING btree (value);');
  await client.query('CREATE INDEX "StructureMap__profile_idx" ON public."StructureMap" USING gin (_profile);');
  await client.query('CREATE INDEX "StructureMap__security_idx" ON public."StructureMap" USING gin (_security);');
  await client.query('CREATE INDEX "StructureMap__source_idx" ON public."StructureMap" USING btree (_source);');
  await client.query('CREATE INDEX "StructureMap__tag_idx" ON public."StructureMap" USING gin (_tag);');
  await client.query('CREATE INDEX "StructureMap_compartments_idx" ON public."StructureMap" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "StructureMap_contextQuantity_idx" ON public."StructureMap" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "StructureMap_contextTypeQuantity_idx" ON public."StructureMap" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "StructureMap_contextTypeValue_idx" ON public."StructureMap" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "StructureMap_date_idx" ON public."StructureMap" USING btree (date);');
  await client.query('CREATE INDEX "StructureMap_description_idx" ON public."StructureMap" USING btree (description);');
  await client.query(
    'CREATE INDEX "StructureMap_lastUpdated_idx" ON public."StructureMap" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "StructureMap_name_idx" ON public."StructureMap" USING btree (name);');
  await client.query('CREATE INDEX "StructureMap_projectId_idx" ON public."StructureMap" USING btree ("projectId");');
  await client.query('CREATE INDEX "StructureMap_publisher_idx" ON public."StructureMap" USING btree (publisher);');
  await client.query('CREATE INDEX "StructureMap_status_idx" ON public."StructureMap" USING btree (status);');
  await client.query('CREATE INDEX "StructureMap_title_idx" ON public."StructureMap" USING btree (title);');
  await client.query('CREATE INDEX "StructureMap_url_idx" ON public."StructureMap" USING btree (url);');
  await client.query('CREATE INDEX "StructureMap_version_idx" ON public."StructureMap" USING btree (version);');
  await client.query(
    'CREATE INDEX "SubscriptionStatus_Token_text_idx_tsv" ON public."SubscriptionStatus_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Subscription_History_id_idx" ON public."Subscription_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Subscription_History_lastUpdated_idx" ON public."Subscription_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Subscription_Token_code_idx" ON public."Subscription_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Subscription_Token_resourceId_idx" ON public."Subscription_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "Subscription_Token_system_idx" ON public."Subscription_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "Subscription_Token_text_idx_tsv" ON public."Subscription_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Subscription_Token_value_idx" ON public."Subscription_Token" USING btree (value);');
  await client.query('CREATE INDEX "Subscription__profile_idx" ON public."Subscription" USING gin (_profile);');
  await client.query('CREATE INDEX "Subscription__security_idx" ON public."Subscription" USING gin (_security);');
  await client.query('CREATE INDEX "Subscription__source_idx" ON public."Subscription" USING btree (_source);');
  await client.query('CREATE INDEX "Subscription__tag_idx" ON public."Subscription" USING gin (_tag);');
  await client.query('CREATE INDEX "Subscription_compartments_idx" ON public."Subscription" USING gin (compartments);');
  await client.query('CREATE INDEX "Subscription_criteria_idx" ON public."Subscription" USING btree (criteria);');
  await client.query(
    'CREATE INDEX "Subscription_lastUpdated_idx" ON public."Subscription" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Subscription_payload_idx" ON public."Subscription" USING btree (payload);');
  await client.query('CREATE INDEX "Subscription_projectId_idx" ON public."Subscription" USING btree ("projectId");');
  await client.query('CREATE INDEX "Subscription_status_idx" ON public."Subscription" USING btree (status);');
  await client.query('CREATE INDEX "Subscription_type_idx" ON public."Subscription" USING btree (type);');
  await client.query('CREATE INDEX "Subscription_url_idx" ON public."Subscription" USING btree (url);');
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_History_id_idx" ON public."SubstanceNucleicAcid_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_History_lastUpdated_idx" ON public."SubstanceNucleicAcid_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_Token_code_idx" ON public."SubstanceNucleicAcid_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_Token_resourceId_idx" ON public."SubstanceNucleicAcid_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_Token_system_idx" ON public."SubstanceNucleicAcid_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_Token_text_idx_tsv" ON public."SubstanceNucleicAcid_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_Token_value_idx" ON public."SubstanceNucleicAcid_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid__profile_idx" ON public."SubstanceNucleicAcid" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid__security_idx" ON public."SubstanceNucleicAcid" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid__source_idx" ON public."SubstanceNucleicAcid" USING btree (_source);'
  );
  await client.query('CREATE INDEX "SubstanceNucleicAcid__tag_idx" ON public."SubstanceNucleicAcid" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_compartments_idx" ON public."SubstanceNucleicAcid" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_lastUpdated_idx" ON public."SubstanceNucleicAcid" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceNucleicAcid_projectId_idx" ON public."SubstanceNucleicAcid" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_History_id_idx" ON public."SubstancePolymer_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_History_lastUpdated_idx" ON public."SubstancePolymer_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_Token_code_idx" ON public."SubstancePolymer_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_Token_resourceId_idx" ON public."SubstancePolymer_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_Token_system_idx" ON public."SubstancePolymer_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_Token_text_idx_tsv" ON public."SubstancePolymer_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_Token_value_idx" ON public."SubstancePolymer_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "SubstancePolymer__profile_idx" ON public."SubstancePolymer" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "SubstancePolymer__security_idx" ON public."SubstancePolymer" USING gin (_security);'
  );
  await client.query('CREATE INDEX "SubstancePolymer__source_idx" ON public."SubstancePolymer" USING btree (_source);');
  await client.query('CREATE INDEX "SubstancePolymer__tag_idx" ON public."SubstancePolymer" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "SubstancePolymer_compartments_idx" ON public."SubstancePolymer" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_lastUpdated_idx" ON public."SubstancePolymer" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstancePolymer_projectId_idx" ON public."SubstancePolymer" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_History_id_idx" ON public."SubstanceProtein_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_History_lastUpdated_idx" ON public."SubstanceProtein_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_Token_code_idx" ON public."SubstanceProtein_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_Token_resourceId_idx" ON public."SubstanceProtein_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_Token_system_idx" ON public."SubstanceProtein_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_Token_text_idx_tsv" ON public."SubstanceProtein_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_Token_value_idx" ON public."SubstanceProtein_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "SubstanceProtein__profile_idx" ON public."SubstanceProtein" USING gin (_profile);');
  await client.query(
    'CREATE INDEX "SubstanceProtein__security_idx" ON public."SubstanceProtein" USING gin (_security);'
  );
  await client.query('CREATE INDEX "SubstanceProtein__source_idx" ON public."SubstanceProtein" USING btree (_source);');
  await client.query('CREATE INDEX "SubstanceProtein__tag_idx" ON public."SubstanceProtein" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "SubstanceProtein_compartments_idx" ON public."SubstanceProtein" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_lastUpdated_idx" ON public."SubstanceProtein" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceProtein_projectId_idx" ON public."SubstanceProtein" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_History_id_idx" ON public."SubstanceReferenceInformation_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_History_lastUpdated_idx" ON public."SubstanceReferenceInformation_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_Token_code_idx" ON public."SubstanceReferenceInformation_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_Token_resourceId_idx" ON public."SubstanceReferenceInformation_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_Token_system_idx" ON public."SubstanceReferenceInformation_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_Token_text_idx_tsv" ON public."SubstanceReferenceInformation_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_Token_value_idx" ON public."SubstanceReferenceInformation_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation__profile_idx" ON public."SubstanceReferenceInformation" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation__security_idx" ON public."SubstanceReferenceInformation" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation__source_idx" ON public."SubstanceReferenceInformation" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation__tag_idx" ON public."SubstanceReferenceInformation" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_compartments_idx" ON public."SubstanceReferenceInformation" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_lastUpdated_idx" ON public."SubstanceReferenceInformation" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceReferenceInformation_projectId_idx" ON public."SubstanceReferenceInformation" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_History_id_idx" ON public."SubstanceSourceMaterial_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_History_lastUpdated_idx" ON public."SubstanceSourceMaterial_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_Token_code_idx" ON public."SubstanceSourceMaterial_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_Token_resourceId_idx" ON public."SubstanceSourceMaterial_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_Token_system_idx" ON public."SubstanceSourceMaterial_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_Token_text_idx_tsv" ON public."SubstanceSourceMaterial_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_Token_value_idx" ON public."SubstanceSourceMaterial_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial__profile_idx" ON public."SubstanceSourceMaterial" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial__security_idx" ON public."SubstanceSourceMaterial" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial__source_idx" ON public."SubstanceSourceMaterial" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial__tag_idx" ON public."SubstanceSourceMaterial" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_compartments_idx" ON public."SubstanceSourceMaterial" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_lastUpdated_idx" ON public."SubstanceSourceMaterial" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSourceMaterial_projectId_idx" ON public."SubstanceSourceMaterial" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_History_id_idx" ON public."SubstanceSpecification_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_History_lastUpdated_idx" ON public."SubstanceSpecification_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_Token_code_idx" ON public."SubstanceSpecification_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_Token_resourceId_idx" ON public."SubstanceSpecification_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_Token_system_idx" ON public."SubstanceSpecification_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_Token_text_idx_tsv" ON public."SubstanceSpecification_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_Token_value_idx" ON public."SubstanceSpecification_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification__profile_idx" ON public."SubstanceSpecification" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification__security_idx" ON public."SubstanceSpecification" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification__source_idx" ON public."SubstanceSpecification" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification__tag_idx" ON public."SubstanceSpecification" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_compartments_idx" ON public."SubstanceSpecification" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_lastUpdated_idx" ON public."SubstanceSpecification" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SubstanceSpecification_projectId_idx" ON public."SubstanceSpecification" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "Substance_History_id_idx" ON public."Substance_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Substance_History_lastUpdated_idx" ON public."Substance_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Substance_Token_code_idx" ON public."Substance_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "Substance_Token_resourceId_idx" ON public."Substance_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "Substance_Token_system_idx" ON public."Substance_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Substance_Token_text_idx_tsv" ON public."Substance_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Substance_Token_value_idx" ON public."Substance_Token" USING btree (value);');
  await client.query('CREATE INDEX "Substance__profile_idx" ON public."Substance" USING gin (_profile);');
  await client.query('CREATE INDEX "Substance__security_idx" ON public."Substance" USING gin (_security);');
  await client.query('CREATE INDEX "Substance__source_idx" ON public."Substance" USING btree (_source);');
  await client.query('CREATE INDEX "Substance__tag_idx" ON public."Substance" USING gin (_tag);');
  await client.query('CREATE INDEX "Substance_code_idx" ON public."Substance" USING gin (code);');
  await client.query('CREATE INDEX "Substance_compartments_idx" ON public."Substance" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "Substance_containerIdentifier_idx" ON public."Substance" USING gin ("containerIdentifier");'
  );
  await client.query('CREATE INDEX "Substance_expiry_idx" ON public."Substance" USING gin (expiry);');
  await client.query('CREATE INDEX "Substance_lastUpdated_idx" ON public."Substance" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Substance_projectId_idx" ON public."Substance" USING btree ("projectId");');
  await client.query('CREATE INDEX "Substance_quantity_idx" ON public."Substance" USING gin (quantity);');
  await client.query('CREATE INDEX "Substance_status_idx" ON public."Substance" USING btree (status);');
  await client.query(
    'CREATE INDEX "Substance_substanceReference_idx" ON public."Substance" USING gin ("substanceReference");'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_History_id_idx" ON public."SupplyDelivery_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_History_lastUpdated_idx" ON public."SupplyDelivery_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_Token_code_idx" ON public."SupplyDelivery_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_Token_resourceId_idx" ON public."SupplyDelivery_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_Token_system_idx" ON public."SupplyDelivery_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_Token_text_idx_tsv" ON public."SupplyDelivery_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_Token_value_idx" ON public."SupplyDelivery_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "SupplyDelivery__profile_idx" ON public."SupplyDelivery" USING gin (_profile);');
  await client.query('CREATE INDEX "SupplyDelivery__security_idx" ON public."SupplyDelivery" USING gin (_security);');
  await client.query('CREATE INDEX "SupplyDelivery__source_idx" ON public."SupplyDelivery" USING btree (_source);');
  await client.query('CREATE INDEX "SupplyDelivery__tag_idx" ON public."SupplyDelivery" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "SupplyDelivery_compartments_idx" ON public."SupplyDelivery" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "SupplyDelivery_lastUpdated_idx" ON public."SupplyDelivery" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "SupplyDelivery_patient_idx" ON public."SupplyDelivery" USING btree (patient);');
  await client.query(
    'CREATE INDEX "SupplyDelivery_projectId_idx" ON public."SupplyDelivery" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "SupplyDelivery_receiver_idx" ON public."SupplyDelivery" USING gin (receiver);');
  await client.query('CREATE INDEX "SupplyDelivery_status_idx" ON public."SupplyDelivery" USING btree (status);');
  await client.query('CREATE INDEX "SupplyDelivery_supplier_idx" ON public."SupplyDelivery" USING btree (supplier);');
  await client.query('CREATE INDEX "SupplyRequest_History_id_idx" ON public."SupplyRequest_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "SupplyRequest_History_lastUpdated_idx" ON public."SupplyRequest_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "SupplyRequest_Token_code_idx" ON public."SupplyRequest_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "SupplyRequest_Token_resourceId_idx" ON public."SupplyRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "SupplyRequest_Token_system_idx" ON public."SupplyRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "SupplyRequest_Token_text_idx_tsv" ON public."SupplyRequest_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "SupplyRequest_Token_value_idx" ON public."SupplyRequest_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX "SupplyRequest__profile_idx" ON public."SupplyRequest" USING gin (_profile);');
  await client.query('CREATE INDEX "SupplyRequest__security_idx" ON public."SupplyRequest" USING gin (_security);');
  await client.query('CREATE INDEX "SupplyRequest__source_idx" ON public."SupplyRequest" USING btree (_source);');
  await client.query('CREATE INDEX "SupplyRequest__tag_idx" ON public."SupplyRequest" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "SupplyRequest_compartments_idx" ON public."SupplyRequest" USING gin (compartments);'
  );
  await client.query('CREATE INDEX "SupplyRequest_date_idx" ON public."SupplyRequest" USING btree (date);');
  await client.query(
    'CREATE INDEX "SupplyRequest_lastUpdated_idx" ON public."SupplyRequest" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "SupplyRequest_projectId_idx" ON public."SupplyRequest" USING btree ("projectId");');
  await client.query('CREATE INDEX "SupplyRequest_requester_idx" ON public."SupplyRequest" USING btree (requester);');
  await client.query('CREATE INDEX "SupplyRequest_status_idx" ON public."SupplyRequest" USING btree (status);');
  await client.query('CREATE INDEX "SupplyRequest_subject_idx" ON public."SupplyRequest" USING btree (subject);');
  await client.query('CREATE INDEX "SupplyRequest_supplier_idx" ON public."SupplyRequest" USING gin (supplier);');
  await client.query('CREATE INDEX "Task_History_id_idx" ON public."Task_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "Task_History_lastUpdated_idx" ON public."Task_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "Task_Token_code_idx" ON public."Task_Token" USING btree (code);');
  await client.query('CREATE INDEX "Task_Token_resourceId_idx" ON public."Task_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "Task_Token_system_idx" ON public."Task_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "Task_Token_text_idx_tsv" ON public."Task_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "Task_Token_value_idx" ON public."Task_Token" USING btree (value);');
  await client.query('CREATE INDEX "Task__profile_idx" ON public."Task" USING gin (_profile);');
  await client.query('CREATE INDEX "Task__security_idx" ON public."Task" USING gin (_security);');
  await client.query('CREATE INDEX "Task__source_idx" ON public."Task" USING btree (_source);');
  await client.query('CREATE INDEX "Task__tag_idx" ON public."Task" USING gin (_tag);');
  await client.query('CREATE INDEX "Task_authoredOn_idx" ON public."Task" USING btree ("authoredOn");');
  await client.query('CREATE INDEX "Task_basedOn_idx" ON public."Task" USING gin ("basedOn");');
  await client.query('CREATE INDEX "Task_compartments_idx" ON public."Task" USING gin (compartments);');
  await client.query('CREATE INDEX "Task_dueDate_idx" ON public."Task" USING btree ("dueDate");');
  await client.query('CREATE INDEX "Task_encounter_idx" ON public."Task" USING btree (encounter);');
  await client.query('CREATE INDEX "Task_focus_idx" ON public."Task" USING btree (focus);');
  await client.query('CREATE INDEX "Task_groupIdentifier_idx" ON public."Task" USING btree ("groupIdentifier");');
  await client.query('CREATE INDEX "Task_intent_idx" ON public."Task" USING btree (intent);');
  await client.query('CREATE INDEX "Task_lastUpdated_idx" ON public."Task" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "Task_modified_idx" ON public."Task" USING btree (modified);');
  await client.query('CREATE INDEX "Task_owner_idx" ON public."Task" USING btree (owner);');
  await client.query('CREATE INDEX "Task_partOf_idx" ON public."Task" USING gin ("partOf");');
  await client.query('CREATE INDEX "Task_patient_idx" ON public."Task" USING btree (patient);');
  await client.query('CREATE INDEX "Task_period_idx" ON public."Task" USING btree (period);');
  await client.query('CREATE INDEX "Task_priority_idx" ON public."Task" USING btree (priority);');
  await client.query('CREATE INDEX "Task_projectId_idx" ON public."Task" USING btree ("projectId");');
  await client.query('CREATE INDEX "Task_requester_idx" ON public."Task" USING btree (requester);');
  await client.query('CREATE INDEX "Task_status_idx" ON public."Task" USING btree (status);');
  await client.query('CREATE INDEX "Task_subject_idx" ON public."Task" USING btree (subject);');
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_History_id_idx" ON public."TerminologyCapabilities_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_History_lastUpdated_idx" ON public."TerminologyCapabilities_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_Token_code_idx" ON public."TerminologyCapabilities_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_Token_resourceId_idx" ON public."TerminologyCapabilities_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_Token_system_idx" ON public."TerminologyCapabilities_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_Token_text_idx_tsv" ON public."TerminologyCapabilities_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_Token_value_idx" ON public."TerminologyCapabilities_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities__profile_idx" ON public."TerminologyCapabilities" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities__security_idx" ON public."TerminologyCapabilities" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities__source_idx" ON public."TerminologyCapabilities" USING btree (_source);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities__tag_idx" ON public."TerminologyCapabilities" USING gin (_tag);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_compartments_idx" ON public."TerminologyCapabilities" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_contextQuantity_idx" ON public."TerminologyCapabilities" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_contextTypeQuantity_idx" ON public."TerminologyCapabilities" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_contextTypeValue_idx" ON public."TerminologyCapabilities" USING gin ("contextTypeValue");'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_date_idx" ON public."TerminologyCapabilities" USING btree (date);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_description_idx" ON public."TerminologyCapabilities" USING btree (description);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_lastUpdated_idx" ON public."TerminologyCapabilities" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_name_idx" ON public."TerminologyCapabilities" USING btree (name);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_projectId_idx" ON public."TerminologyCapabilities" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_publisher_idx" ON public."TerminologyCapabilities" USING btree (publisher);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_status_idx" ON public."TerminologyCapabilities" USING btree (status);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_title_idx" ON public."TerminologyCapabilities" USING btree (title);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_url_idx" ON public."TerminologyCapabilities" USING btree (url);'
  );
  await client.query(
    'CREATE INDEX "TerminologyCapabilities_version_idx" ON public."TerminologyCapabilities" USING btree (version);'
  );
  await client.query('CREATE INDEX "TestReport_History_id_idx" ON public."TestReport_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "TestReport_History_lastUpdated_idx" ON public."TestReport_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "TestReport_Token_code_idx" ON public."TestReport_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "TestReport_Token_resourceId_idx" ON public."TestReport_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "TestReport_Token_system_idx" ON public."TestReport_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "TestReport_Token_text_idx_tsv" ON public."TestReport_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "TestReport_Token_value_idx" ON public."TestReport_Token" USING btree (value);');
  await client.query('CREATE INDEX "TestReport__profile_idx" ON public."TestReport" USING gin (_profile);');
  await client.query('CREATE INDEX "TestReport__security_idx" ON public."TestReport" USING gin (_security);');
  await client.query('CREATE INDEX "TestReport__source_idx" ON public."TestReport" USING btree (_source);');
  await client.query('CREATE INDEX "TestReport__tag_idx" ON public."TestReport" USING gin (_tag);');
  await client.query('CREATE INDEX "TestReport_compartments_idx" ON public."TestReport" USING gin (compartments);');
  await client.query('CREATE INDEX "TestReport_issued_idx" ON public."TestReport" USING btree (issued);');
  await client.query('CREATE INDEX "TestReport_lastUpdated_idx" ON public."TestReport" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "TestReport_participant_idx" ON public."TestReport" USING gin (participant);');
  await client.query('CREATE INDEX "TestReport_projectId_idx" ON public."TestReport" USING btree ("projectId");');
  await client.query('CREATE INDEX "TestReport_result_idx" ON public."TestReport" USING btree (result);');
  await client.query('CREATE INDEX "TestReport_tester_idx" ON public."TestReport" USING btree (tester);');
  await client.query('CREATE INDEX "TestReport_testscript_idx" ON public."TestReport" USING btree (testscript);');
  await client.query('CREATE INDEX "TestScript_History_id_idx" ON public."TestScript_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "TestScript_History_lastUpdated_idx" ON public."TestScript_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "TestScript_Token_code_idx" ON public."TestScript_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "TestScript_Token_resourceId_idx" ON public."TestScript_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "TestScript_Token_system_idx" ON public."TestScript_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "TestScript_Token_text_idx_tsv" ON public."TestScript_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "TestScript_Token_value_idx" ON public."TestScript_Token" USING btree (value);');
  await client.query('CREATE INDEX "TestScript__profile_idx" ON public."TestScript" USING gin (_profile);');
  await client.query('CREATE INDEX "TestScript__security_idx" ON public."TestScript" USING gin (_security);');
  await client.query('CREATE INDEX "TestScript__source_idx" ON public."TestScript" USING btree (_source);');
  await client.query('CREATE INDEX "TestScript__tag_idx" ON public."TestScript" USING gin (_tag);');
  await client.query('CREATE INDEX "TestScript_compartments_idx" ON public."TestScript" USING gin (compartments);');
  await client.query(
    'CREATE INDEX "TestScript_contextQuantity_idx" ON public."TestScript" USING gin ("contextQuantity");'
  );
  await client.query(
    'CREATE INDEX "TestScript_contextTypeQuantity_idx" ON public."TestScript" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "TestScript_contextTypeValue_idx" ON public."TestScript" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "TestScript_date_idx" ON public."TestScript" USING btree (date);');
  await client.query('CREATE INDEX "TestScript_description_idx" ON public."TestScript" USING btree (description);');
  await client.query('CREATE INDEX "TestScript_lastUpdated_idx" ON public."TestScript" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "TestScript_name_idx" ON public."TestScript" USING btree (name);');
  await client.query('CREATE INDEX "TestScript_projectId_idx" ON public."TestScript" USING btree ("projectId");');
  await client.query('CREATE INDEX "TestScript_publisher_idx" ON public."TestScript" USING btree (publisher);');
  await client.query('CREATE INDEX "TestScript_status_idx" ON public."TestScript" USING btree (status);');
  await client.query(
    'CREATE INDEX "TestScript_testscriptCapability_idx" ON public."TestScript" USING gin ("testscriptCapability");'
  );
  await client.query('CREATE INDEX "TestScript_title_idx" ON public."TestScript" USING btree (title);');
  await client.query('CREATE INDEX "TestScript_url_idx" ON public."TestScript" USING btree (url);');
  await client.query('CREATE INDEX "TestScript_version_idx" ON public."TestScript" USING btree (version);');
  await client.query(
    'CREATE INDEX "UserConfiguration_History_id_idx" ON public."UserConfiguration_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration_History_lastUpdated_idx" ON public."UserConfiguration_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration_Token_code_idx" ON public."UserConfiguration_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration_Token_resourceId_idx" ON public."UserConfiguration_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration_Token_system_idx" ON public."UserConfiguration_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration_Token_text_idx_tsv" ON public."UserConfiguration_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration_Token_value_idx" ON public."UserConfiguration_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration__profile_idx" ON public."UserConfiguration" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration__security_idx" ON public."UserConfiguration" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration__source_idx" ON public."UserConfiguration" USING btree (_source);'
  );
  await client.query('CREATE INDEX "UserConfiguration__tag_idx" ON public."UserConfiguration" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "UserConfiguration_compartments_idx" ON public."UserConfiguration" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "UserConfiguration_lastUpdated_idx" ON public."UserConfiguration" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "UserConfiguration_name_idx" ON public."UserConfiguration" USING btree (name);');
  await client.query(
    'CREATE INDEX "UserConfiguration_projectId_idx" ON public."UserConfiguration" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "User_History_id_idx" ON public."User_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "User_History_lastUpdated_idx" ON public."User_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "User_Token_code_idx" ON public."User_Token" USING btree (code);');
  await client.query('CREATE INDEX "User_Token_resourceId_idx" ON public."User_Token" USING btree ("resourceId");');
  await client.query('CREATE INDEX "User_Token_system_idx" ON public."User_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "User_Token_text_idx_tsv" ON public."User_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "User_Token_value_idx" ON public."User_Token" USING btree (value);');
  await client.query('CREATE INDEX "User__profile_idx" ON public."User" USING gin (_profile);');
  await client.query('CREATE INDEX "User__security_idx" ON public."User" USING gin (_security);');
  await client.query('CREATE INDEX "User__source_idx" ON public."User" USING btree (_source);');
  await client.query('CREATE INDEX "User__tag_idx" ON public."User" USING gin (_tag);');
  await client.query('CREATE INDEX "User_compartments_idx" ON public."User" USING gin (compartments);');
  await client.query('CREATE INDEX "User_email_idx" ON public."User" USING btree (email);');
  await client.query('CREATE INDEX "User_externalId_idx" ON public."User" USING btree ("externalId");');
  await client.query('CREATE INDEX "User_lastUpdated_idx" ON public."User" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "User_projectId_idx" ON public."User" USING btree ("projectId");');
  await client.query('CREATE UNIQUE INDEX "User_project_email_idx" ON public."User" USING btree (project, email);');
  await client.query(
    'CREATE UNIQUE INDEX "User_project_externalId_idx" ON public."User" USING btree (project, "externalId");'
  );
  await client.query('CREATE INDEX "User_project_idx" ON public."User" USING btree (project);');
  await client.query('CREATE INDEX "ValueSetElement_code_idx" ON public."ValueSetElement" USING btree (code);');
  await client.query('CREATE INDEX "ValueSetElement_display_idx" ON public."ValueSetElement" USING btree (display);');
  await client.query(
    'CREATE INDEX "ValueSetElement_display_idx_tsv" ON public."ValueSetElement" USING gin (to_tsvector(\'english\'::regconfig, display));'
  );
  await client.query(
    'CREATE INDEX "ValueSetElement_resourceId_idx" ON public."ValueSetElement" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "ValueSetElement_system_idx" ON public."ValueSetElement" USING btree (system);');
  await client.query(
    'CREATE INDEX "ValueSetElement_valueSet_idx" ON public."ValueSetElement" USING btree ("valueSet");'
  );
  await client.query('CREATE INDEX "ValueSet_History_id_idx" ON public."ValueSet_History" USING btree (id);');
  await client.query(
    'CREATE INDEX "ValueSet_History_lastUpdated_idx" ON public."ValueSet_History" USING btree ("lastUpdated");'
  );
  await client.query('CREATE INDEX "ValueSet_Token_code_idx" ON public."ValueSet_Token" USING btree (code);');
  await client.query(
    'CREATE INDEX "ValueSet_Token_resourceId_idx" ON public."ValueSet_Token" USING btree ("resourceId");'
  );
  await client.query('CREATE INDEX "ValueSet_Token_system_idx" ON public."ValueSet_Token" USING btree (system);');
  await client.query(
    'CREATE INDEX "ValueSet_Token_text_idx_tsv" ON public."ValueSet_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query('CREATE INDEX "ValueSet_Token_value_idx" ON public."ValueSet_Token" USING btree (value);');
  await client.query('CREATE INDEX "ValueSet__profile_idx" ON public."ValueSet" USING gin (_profile);');
  await client.query('CREATE INDEX "ValueSet__security_idx" ON public."ValueSet" USING gin (_security);');
  await client.query('CREATE INDEX "ValueSet__source_idx" ON public."ValueSet" USING btree (_source);');
  await client.query('CREATE INDEX "ValueSet__tag_idx" ON public."ValueSet" USING gin (_tag);');
  await client.query('CREATE INDEX "ValueSet_code_idx" ON public."ValueSet" USING gin (code);');
  await client.query('CREATE INDEX "ValueSet_compartments_idx" ON public."ValueSet" USING gin (compartments);');
  await client.query('CREATE INDEX "ValueSet_contextQuantity_idx" ON public."ValueSet" USING gin ("contextQuantity");');
  await client.query(
    'CREATE INDEX "ValueSet_contextTypeQuantity_idx" ON public."ValueSet" USING gin ("contextTypeQuantity");'
  );
  await client.query(
    'CREATE INDEX "ValueSet_contextTypeValue_idx" ON public."ValueSet" USING gin ("contextTypeValue");'
  );
  await client.query('CREATE INDEX "ValueSet_date_idx" ON public."ValueSet" USING btree (date);');
  await client.query('CREATE INDEX "ValueSet_description_idx" ON public."ValueSet" USING btree (description);');
  await client.query('CREATE INDEX "ValueSet_expansion_idx" ON public."ValueSet" USING btree (expansion);');
  await client.query('CREATE INDEX "ValueSet_lastUpdated_idx" ON public."ValueSet" USING btree ("lastUpdated");');
  await client.query('CREATE INDEX "ValueSet_name_idx" ON public."ValueSet" USING btree (name);');
  await client.query('CREATE INDEX "ValueSet_projectId_idx" ON public."ValueSet" USING btree ("projectId");');
  await client.query('CREATE INDEX "ValueSet_publisher_idx" ON public."ValueSet" USING btree (publisher);');
  await client.query('CREATE INDEX "ValueSet_reference_idx" ON public."ValueSet" USING gin (reference);');
  await client.query('CREATE INDEX "ValueSet_status_idx" ON public."ValueSet" USING btree (status);');
  await client.query('CREATE INDEX "ValueSet_title_idx" ON public."ValueSet" USING btree (title);');
  await client.query('CREATE INDEX "ValueSet_url_idx" ON public."ValueSet" USING btree (url);');
  await client.query('CREATE INDEX "ValueSet_version_idx" ON public."ValueSet" USING btree (version);');
  await client.query(
    'CREATE INDEX "VerificationResult_History_id_idx" ON public."VerificationResult_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_History_lastUpdated_idx" ON public."VerificationResult_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_Token_code_idx" ON public."VerificationResult_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_Token_resourceId_idx" ON public."VerificationResult_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_Token_system_idx" ON public."VerificationResult_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_Token_text_idx_tsv" ON public."VerificationResult_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_Token_value_idx" ON public."VerificationResult_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult__profile_idx" ON public."VerificationResult" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult__security_idx" ON public."VerificationResult" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult__source_idx" ON public."VerificationResult" USING btree (_source);'
  );
  await client.query('CREATE INDEX "VerificationResult__tag_idx" ON public."VerificationResult" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "VerificationResult_compartments_idx" ON public."VerificationResult" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_lastUpdated_idx" ON public."VerificationResult" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "VerificationResult_projectId_idx" ON public."VerificationResult" USING btree ("projectId");'
  );
  await client.query('CREATE INDEX "VerificationResult_target_idx" ON public."VerificationResult" USING gin (target);');
  await client.query(
    'CREATE INDEX "VisionPrescription_History_id_idx" ON public."VisionPrescription_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_History_lastUpdated_idx" ON public."VisionPrescription_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_Token_code_idx" ON public."VisionPrescription_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_Token_resourceId_idx" ON public."VisionPrescription_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_Token_system_idx" ON public."VisionPrescription_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_Token_text_idx_tsv" ON public."VisionPrescription_Token" USING gin (to_tsvector(\'simple\'::regconfig, value)) WHERE (system = \'text\'::text);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_Token_value_idx" ON public."VisionPrescription_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription__profile_idx" ON public."VisionPrescription" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription__security_idx" ON public."VisionPrescription" USING gin (_security);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription__source_idx" ON public."VisionPrescription" USING btree (_source);'
  );
  await client.query('CREATE INDEX "VisionPrescription__tag_idx" ON public."VisionPrescription" USING gin (_tag);');
  await client.query(
    'CREATE INDEX "VisionPrescription_compartments_idx" ON public."VisionPrescription" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_datewritten_idx" ON public."VisionPrescription" USING btree (datewritten);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_encounter_idx" ON public."VisionPrescription" USING btree (encounter);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_lastUpdated_idx" ON public."VisionPrescription" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_patient_idx" ON public."VisionPrescription" USING btree (patient);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_prescriber_idx" ON public."VisionPrescription" USING btree (prescriber);'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_projectId_idx" ON public."VisionPrescription" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX "VisionPrescription_status_idx" ON public."VisionPrescription" USING btree (status);'
  );
  await client.query('CREATE INDEX activitydefinition_context_idx ON public."ActivityDefinition" USING gin (context);');
  await client.query('CREATE INDEX agent_name_idx ON public."Agent" USING btree (name);');
  await client.query('CREATE INDEX agent_status_idx ON public."Agent" USING btree (status);');
  await client.query(
    'CREATE INDEX capabilitystatement_context_idx ON public."CapabilityStatement" USING gin (context);'
  );
  await client.query('CREATE INDEX careteam_name_idx ON public."CareTeam" USING btree (name);');
  await client.query(
    'CREATE INDEX chargeitemdefinition_context_idx ON public."ChargeItemDefinition" USING gin (context);'
  );
  await client.query('CREATE INDEX codesystem_context_idx ON public."CodeSystem" USING gin (context);');
  await client.query(
    'CREATE INDEX communicationrequest_priorityorder_idx ON public."CommunicationRequest" USING btree ("priorityOrder");'
  );
  await client.query(
    'CREATE INDEX compartmentdefinition_context_idx ON public."CompartmentDefinition" USING gin (context);'
  );
  await client.query('CREATE INDEX conceptmap_context_idx ON public."ConceptMap" USING gin (context);');
  await client.query('CREATE INDEX condition_asserteddate_idx ON public."Condition" USING btree ("assertedDate");');
  await client.query('CREATE INDEX detectedissue_status_idx ON public."DetectedIssue" USING btree (status);');
  await client.query('CREATE INDEX devicerequest_code_idx ON public."DeviceRequest" USING btree (code);');
  await client.query(
    'CREATE INDEX domainconfiguration_token_code_idx ON public."DomainConfiguration_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX domainconfiguration_token_resourceid_idx ON public."DomainConfiguration_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX domainconfiguration_token_system_idx ON public."DomainConfiguration_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX domainconfiguration_token_value_idx ON public."DomainConfiguration_Token" USING btree (value);'
  );
  await client.query(
    'CREATE INDEX effectevidencesynthesis_context_idx ON public."EffectEvidenceSynthesis" USING gin (context);'
  );
  await client.query('CREATE INDEX eventdefinition_context_idx ON public."EventDefinition" USING gin (context);');
  await client.query('CREATE INDEX evidence_context_idx ON public."Evidence" USING gin (context);');
  await client.query('CREATE INDEX evidencevariable_context_idx ON public."EvidenceVariable" USING gin (context);');
  await client.query('CREATE INDEX examplescenario_context_idx ON public."ExampleScenario" USING gin (context);');
  await client.query('CREATE INDEX graphdefinition_context_idx ON public."GraphDefinition" USING gin (context);');
  await client.query('CREATE INDEX group_name_idx ON public."Group" USING btree (name);');
  await client.query('CREATE INDEX group_value_idx ON public."Group" USING gin (value);');
  await client.query(
    'CREATE INDEX implementationguide_context_idx ON public."ImplementationGuide" USING gin (context);'
  );
  await client.query('CREATE INDEX library_context_idx ON public."Library" USING gin (context);');
  await client.query('CREATE INDEX measure_context_idx ON public."Measure" USING gin (context);');
  await client.query('CREATE INDEX medication_ingredientcode_idx ON public."Medication" USING gin ("ingredientCode");');
  await client.query(
    'CREATE INDEX medicationadministration_code_idx ON public."MedicationAdministration" USING btree (code);'
  );
  await client.query('CREATE INDEX medicationdispense_code_idx ON public."MedicationDispense" USING btree (code);');
  await client.query(
    'CREATE INDEX medicationknowledge_ingredientcode_idx ON public."MedicationKnowledge" USING gin ("ingredientCode");'
  );
  await client.query('CREATE INDEX medicationrequest_code_idx ON public."MedicationRequest" USING btree (code);');
  await client.query(
    'CREATE INDEX medicationrequest_priorityorder_idx ON public."MedicationRequest" USING btree ("priorityOrder");'
  );
  await client.query('CREATE INDEX medicationstatement_code_idx ON public."MedicationStatement" USING btree (code);');
  await client.query('CREATE INDEX messagedefinition_context_idx ON public."MessageDefinition" USING gin (context);');
  await client.query('CREATE INDEX namingsystem_context_idx ON public."NamingSystem" USING gin (context);');
  await client.query(
    'CREATE INDEX observation_componentvalueconcept_idx ON public."Observation" USING gin ("componentValueConcept");'
  );
  await client.query('CREATE INDEX observation_valueconcept_idx ON public."Observation" USING btree ("valueConcept");');
  await client.query(
    'CREATE INDEX operationdefinition_context_idx ON public."OperationDefinition" USING gin (context);'
  );
  await client.query('CREATE INDEX patient_ethnicity_idx ON public."Patient" USING gin (ethnicity);');
  await client.query('CREATE INDEX patient_genderidentity_idx ON public."Patient" USING gin ("genderIdentity");');
  await client.query('CREATE INDEX patient_race_idx ON public."Patient" USING gin (race);');
  await client.query('CREATE INDEX plandefinition_context_idx ON public."PlanDefinition" USING gin (context);');
  await client.query('CREATE INDEX questionnaire_context_idx ON public."Questionnaire" USING gin (context);');
  await client.query(
    'CREATE INDEX requestgroup_priorityorder_idx ON public."RequestGroup" USING btree ("priorityOrder");'
  );
  await client.query('CREATE INDEX researchdefinition_context_idx ON public."ResearchDefinition" USING gin (context);');
  await client.query(
    'CREATE INDEX researchelementdefinition_context_idx ON public."ResearchElementDefinition" USING gin (context);'
  );
  await client.query(
    'CREATE INDEX riskevidencesynthesis_context_idx ON public."RiskEvidenceSynthesis" USING gin (context);'
  );
  await client.query('CREATE INDEX searchparameter_context_idx ON public."SearchParameter" USING gin (context);');
  await client.query(
    'CREATE INDEX servicerequest_priorityorder_idx ON public."ServiceRequest" USING btree ("priorityOrder");'
  );
  await client.query(
    'CREATE INDEX structuredefinition_context_idx ON public."StructureDefinition" USING gin (context);'
  );
  await client.query('CREATE INDEX structuremap_context_idx ON public."StructureMap" USING gin (context);');
  await client.query(
    'CREATE INDEX subscriptionstatus__profile_idx ON public."SubscriptionStatus" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus__security_idx ON public."SubscriptionStatus" USING btree (_security);'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus__source_idx ON public."SubscriptionStatus" USING btree (_source);'
  );
  await client.query('CREATE INDEX subscriptionstatus__tag_idx ON public."SubscriptionStatus" USING gin (_tag);');
  await client.query(
    'CREATE INDEX subscriptionstatus_compartments_idx ON public."SubscriptionStatus" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_history_id_idx ON public."SubscriptionStatus_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_history_lastupdated_idx ON public."SubscriptionStatus_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_lastupdated_idx ON public."SubscriptionStatus" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_projectid_idx ON public."SubscriptionStatus" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_token_code_idx ON public."SubscriptionStatus_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_token_resourceid_idx ON public."SubscriptionStatus_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_token_system_idx ON public."SubscriptionStatus_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX subscriptionstatus_token_value_idx ON public."SubscriptionStatus_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX task_priorityorder_idx ON public."Task" USING btree ("priorityOrder");');
  await client.query(
    'CREATE INDEX terminologycapabilities_context_idx ON public."TerminologyCapabilities" USING gin (context);'
  );
  await client.query('CREATE INDEX testscript_context_idx ON public."TestScript" USING gin (context);');
  await client.query(
    'CREATE INDEX usersecurityrequest__profile_idx ON public."UserSecurityRequest" USING gin (_profile);'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest__security_idx ON public."UserSecurityRequest" USING btree (_security);'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest__source_idx ON public."UserSecurityRequest" USING btree (_source);'
  );
  await client.query('CREATE INDEX usersecurityrequest__tag_idx ON public."UserSecurityRequest" USING gin (_tag);');
  await client.query(
    'CREATE INDEX usersecurityrequest_compartments_idx ON public."UserSecurityRequest" USING gin (compartments);'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_history_id_idx ON public."UserSecurityRequest_History" USING btree (id);'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_history_lastupdated_idx ON public."UserSecurityRequest_History" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_lastupdated_idx ON public."UserSecurityRequest" USING btree ("lastUpdated");'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_projectid_idx ON public."UserSecurityRequest" USING btree ("projectId");'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_token_code_idx ON public."UserSecurityRequest_Token" USING btree (code);'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_token_resourceid_idx ON public."UserSecurityRequest_Token" USING btree ("resourceId");'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_token_system_idx ON public."UserSecurityRequest_Token" USING btree (system);'
  );
  await client.query(
    'CREATE INDEX usersecurityrequest_token_value_idx ON public."UserSecurityRequest_Token" USING btree (value);'
  );
  await client.query('CREATE INDEX usersecurityrequest_user_idx ON public."UserSecurityRequest" USING btree ("user");');
  await client.query('CREATE INDEX valueset_context_idx ON public."ValueSet" USING gin (context);');
}
